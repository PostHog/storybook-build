"use strict";(self.webpackChunkposthog=self.webpackChunkposthog||[]).push([[57592],{"./frontend/src/scenes/notebooks/NotebookCommentButton/NotebookCommentButton.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:function(){return Default},WithNoExistingContainingNotebooks:function(){return WithNoExistingContainingNotebooks},WithNoNotebooks:function(){return WithNoNotebooks},WithSlowNetworkResponse:function(){return WithSlowNetworkResponse}});var scenes_notebooks_NotebookCommentButton_NotebookCommentButton__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./frontend/src/scenes/notebooks/NotebookCommentButton/NotebookCommentButton.tsx"),_mocks_browser__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./frontend/src/mocks/browser.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/.pnpm/react@16.14.0/node_modules/react/jsx-runtime.js");__webpack_exports__.default={title:"Scenes-App/Notebooks/Components/Notebook Comment Button",component:scenes_notebooks_NotebookCommentButton_NotebookCommentButton__WEBPACK_IMPORTED_MODULE_0__.h};const Template=props=>((0,_mocks_browser__WEBPACK_IMPORTED_MODULE_1__.ok)({get:{"/api/projects/:team_id/notebooks/":(req,res,ctx)=>{const contains=req.url.searchParams.get("contains"),sessionRecordingId=contains?.split(":")[1],allNotebooks=[{title:"my amazing notebook",short_id:"abc"},{title:"and another amazing notebook",short_id:"def"},{title:"an empty notebook",short_id:"ghi"}];return null==contains&&void 0===sessionRecordingId?[200,allNotebooks]:"there_are_no_notebooks"===sessionRecordingId?[200,[]]:"not_already_contained"===sessionRecordingId?[200,allNotebooks.slice(2)]:"very_slow"===sessionRecordingId?res(ctx.delay("infinite"),ctx.status(200),ctx.json({results:[]})):void 0}}}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{className:"min-h-100",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(scenes_notebooks_NotebookCommentButton_NotebookCommentButton__WEBPACK_IMPORTED_MODULE_0__.h,{sessionRecordingId:props.sessionRecordingId,getCurrentPlayerTime:()=>0,visible:!0})})),Default=Template.bind({});Default.args={sessionRecordingId:"123"};const WithSlowNetworkResponse=Template.bind({});WithSlowNetworkResponse.args={sessionRecordingId:"very_slow"};const WithNoExistingContainingNotebooks=Template.bind({});WithNoExistingContainingNotebooks.args={sessionRecordingId:"not_already_contained"};const WithNoNotebooks=Template.bind({});WithNoExistingContainingNotebooks.args={sessionRecordingId:"there_are_no_notebooks"},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"props => {\n  useStorybookMocks({\n    get: {\n      '/api/projects/:team_id/notebooks/': (req, res, ctx) => {\n        const contains = req.url.searchParams.get('contains');\n        const sessionRecordingId = contains?.split(':')[1];\n        const allNotebooks = [{\n          title: 'my amazing notebook',\n          short_id: 'abc'\n        }, {\n          title: 'and another amazing notebook',\n          short_id: 'def'\n        }, {\n          title: 'an empty notebook',\n          short_id: 'ghi'\n        }];\n        const unfiltered = contains == null && sessionRecordingId === undefined;\n        if (unfiltered) {\n          return [200, allNotebooks];\n        }\n        if (sessionRecordingId === 'there_are_no_notebooks') {\n          return [200, []];\n        }\n        if (sessionRecordingId === 'not_already_contained') {\n          return [200, allNotebooks.slice(2)];\n        }\n        if (sessionRecordingId === 'very_slow') {\n          return res(ctx.delay('infinite'), ctx.status(200), ctx.json({\n            results: []\n          }));\n        }\n      }\n    }\n  });\n  return (\n    // the button has its dropdown showing and so needs a container that will include the pop-over\n    <div className={'min-h-100'}>\n            <NotebookCommentButton sessionRecordingId={props.sessionRecordingId} getCurrentPlayerTime={() => 0} visible={true} />\n        </div>\n  );\n}",...Default.parameters?.docs?.source}}},WithSlowNetworkResponse.parameters={...WithSlowNetworkResponse.parameters,docs:{...WithSlowNetworkResponse.parameters?.docs,source:{originalSource:"props => {\n  useStorybookMocks({\n    get: {\n      '/api/projects/:team_id/notebooks/': (req, res, ctx) => {\n        const contains = req.url.searchParams.get('contains');\n        const sessionRecordingId = contains?.split(':')[1];\n        const allNotebooks = [{\n          title: 'my amazing notebook',\n          short_id: 'abc'\n        }, {\n          title: 'and another amazing notebook',\n          short_id: 'def'\n        }, {\n          title: 'an empty notebook',\n          short_id: 'ghi'\n        }];\n        const unfiltered = contains == null && sessionRecordingId === undefined;\n        if (unfiltered) {\n          return [200, allNotebooks];\n        }\n        if (sessionRecordingId === 'there_are_no_notebooks') {\n          return [200, []];\n        }\n        if (sessionRecordingId === 'not_already_contained') {\n          return [200, allNotebooks.slice(2)];\n        }\n        if (sessionRecordingId === 'very_slow') {\n          return res(ctx.delay('infinite'), ctx.status(200), ctx.json({\n            results: []\n          }));\n        }\n      }\n    }\n  });\n  return (\n    // the button has its dropdown showing and so needs a container that will include the pop-over\n    <div className={'min-h-100'}>\n            <NotebookCommentButton sessionRecordingId={props.sessionRecordingId} getCurrentPlayerTime={() => 0} visible={true} />\n        </div>\n  );\n}",...WithSlowNetworkResponse.parameters?.docs?.source}}},WithNoExistingContainingNotebooks.parameters={...WithNoExistingContainingNotebooks.parameters,docs:{...WithNoExistingContainingNotebooks.parameters?.docs,source:{originalSource:"props => {\n  useStorybookMocks({\n    get: {\n      '/api/projects/:team_id/notebooks/': (req, res, ctx) => {\n        const contains = req.url.searchParams.get('contains');\n        const sessionRecordingId = contains?.split(':')[1];\n        const allNotebooks = [{\n          title: 'my amazing notebook',\n          short_id: 'abc'\n        }, {\n          title: 'and another amazing notebook',\n          short_id: 'def'\n        }, {\n          title: 'an empty notebook',\n          short_id: 'ghi'\n        }];\n        const unfiltered = contains == null && sessionRecordingId === undefined;\n        if (unfiltered) {\n          return [200, allNotebooks];\n        }\n        if (sessionRecordingId === 'there_are_no_notebooks') {\n          return [200, []];\n        }\n        if (sessionRecordingId === 'not_already_contained') {\n          return [200, allNotebooks.slice(2)];\n        }\n        if (sessionRecordingId === 'very_slow') {\n          return res(ctx.delay('infinite'), ctx.status(200), ctx.json({\n            results: []\n          }));\n        }\n      }\n    }\n  });\n  return (\n    // the button has its dropdown showing and so needs a container that will include the pop-over\n    <div className={'min-h-100'}>\n            <NotebookCommentButton sessionRecordingId={props.sessionRecordingId} getCurrentPlayerTime={() => 0} visible={true} />\n        </div>\n  );\n}",...WithNoExistingContainingNotebooks.parameters?.docs?.source}}},WithNoNotebooks.parameters={...WithNoNotebooks.parameters,docs:{...WithNoNotebooks.parameters?.docs,source:{originalSource:"props => {\n  useStorybookMocks({\n    get: {\n      '/api/projects/:team_id/notebooks/': (req, res, ctx) => {\n        const contains = req.url.searchParams.get('contains');\n        const sessionRecordingId = contains?.split(':')[1];\n        const allNotebooks = [{\n          title: 'my amazing notebook',\n          short_id: 'abc'\n        }, {\n          title: 'and another amazing notebook',\n          short_id: 'def'\n        }, {\n          title: 'an empty notebook',\n          short_id: 'ghi'\n        }];\n        const unfiltered = contains == null && sessionRecordingId === undefined;\n        if (unfiltered) {\n          return [200, allNotebooks];\n        }\n        if (sessionRecordingId === 'there_are_no_notebooks') {\n          return [200, []];\n        }\n        if (sessionRecordingId === 'not_already_contained') {\n          return [200, allNotebooks.slice(2)];\n        }\n        if (sessionRecordingId === 'very_slow') {\n          return res(ctx.delay('infinite'), ctx.status(200), ctx.json({\n            results: []\n          }));\n        }\n      }\n    }\n  });\n  return (\n    // the button has its dropdown showing and so needs a container that will include the pop-over\n    <div className={'min-h-100'}>\n            <NotebookCommentButton sessionRecordingId={props.sessionRecordingId} getCurrentPlayerTime={() => 0} visible={true} />\n        </div>\n  );\n}",...WithNoNotebooks.parameters?.docs?.source}}}}}]);