"use strict";(self.webpackChunk_posthog_storybook=self.webpackChunk_posthog_storybook||[]).push([[29113],{"../../frontend/src/lib/lemon-ui/icons/stories/Icons3.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{IconWithCountBubble:()=>IconWithCountBubble,IconWithCountHidingZero:()=>IconWithCountHidingZero,IconWithCountOverflowing:()=>IconWithCountOverflowing,IconWithCountShowingZero:()=>IconWithCountShowingZero,ShelfOther:()=>ShelfOther,ShelfS:()=>ShelfS,ShelfT:()=>ShelfT,ShelfU:()=>ShelfU,ShelfV:()=>ShelfV,ShelfW:()=>ShelfW,ShelfX:()=>ShelfX,ShelfY:()=>ShelfY,ShelfZ:()=>ShelfZ,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),_posthog_icons__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/.pnpm/@posthog+icons@0.28.1_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/@posthog/icons/dist/posthog-icons.es.js"),lib_lemon_ui_LemonButton__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../frontend/src/lib/lemon-ui/LemonButton/index.ts"),lib_lemon_ui_LemonCheckbox__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../../frontend/src/lib/lemon-ui/LemonCheckbox/index.ts"),lib_lemon_ui_LemonTable__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("../../frontend/src/lib/lemon-ui/LemonTable/index.ts"),_icons__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("../../frontend/src/lib/lemon-ui/icons/icons.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");let{IconWithCount}=_icons__WEBPACK_IMPORTED_MODULE_5__,__WEBPACK_DEFAULT_EXPORT__={title:"Lemon UI/Icons3",parameters:{docs:{description:{component:`

[Related Figma area](https://www.figma.com/file/Y9G24U4r04nEjIDGIEGuKI/PostHog-Design-System-One?node-id=3139%3A1388)

Lemon Icons are generally [Material Icons](https://fonts.google.com/icons) with some matching in-house additions. 
All should be based on a 24px (1.5rem) square viewbox, with icon contents fitting into a 20px (1.25rem) or smaller square. 

When adding new icons from Figma please make sure to:
- [ ] Export the item as an SVG using the 24x24 frame surrounding it
- [ ] Follow the existing \`IconFoo\` naming convention and use the \`<SvgIcon>\` component instead of \`<svg>\`
- [ ] Ensure all colors in the SVG are set to \`currentColor\` so that themes can be applied
`}}},tags:["autodocs"]},allIcons=Object.entries(_icons__WEBPACK_IMPORTED_MODULE_5__).filter(_ref=>{let[key]=_ref;return"IconWithCount"!==key&&"IconWithBadge"!==key}).map(_ref2=>{let[key,Icon]=_ref2;return{name:key,icon:Icon}}).sort((a,b)=>a.name.localeCompare(b.name)),LibraryTemplate=_ref3=>{let{letter}=_ref3,[showBorder,setShowBorder]=react__WEBPACK_IMPORTED_MODULE_0__.useState(!0),filteredIcons=void 0===letter?allIcons:null!==letter?allIcons.filter(icon=>icon.name.replace("Icon","").toLowerCase().startsWith(letter)):allIcons.filter(icon=>!icon.name.replace("Icon","").toLowerCase().match(/[a-z]/));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)("div",{className:"deprecated-space-y-2",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(lib_lemon_ui_LemonCheckbox__WEBPACK_IMPORTED_MODULE_3__.H,{bordered:!0,checked:showBorder,onChange:setShowBorder,label:"Show border"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(lib_lemon_ui_LemonTable__WEBPACK_IMPORTED_MODULE_4__.g,{dataSource:filteredIcons,columns:[{title:"Name",key:"name",dataIndex:"name",render:function RenderName(name){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("code",{children:`<${name} />`})}},{title:"Icon",key:"icon",dataIndex:"icon",render:function RenderIcon(Icon){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(Icon,{style:{fontSize:"1.5rem",boxShadow:showBorder?"0px 0px 1px 1px red":null}})}},{title:"In Button",key:"button-icon",dataIndex:"icon",render:function RenderButton(Icon){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(lib_lemon_ui_LemonButton__WEBPACK_IMPORTED_MODULE_2__.J,{type:"secondary",icon:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(Icon,{}),children:"Button"})}}],emptyState:letter?`No icons start with the letter ${letter.toUpperCase()}`:"No icons"})]})},ShelfS=LibraryTemplate.bind({});ShelfS.args={letter:"s"},ShelfS.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};let ShelfT=LibraryTemplate.bind({});ShelfT.args={letter:"t"},ShelfT.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};let ShelfU=LibraryTemplate.bind({});ShelfU.args={letter:"u"},ShelfU.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};let ShelfV=LibraryTemplate.bind({});ShelfV.args={letter:"v"},ShelfV.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};let ShelfW=LibraryTemplate.bind({});ShelfW.args={letter:"w"},ShelfW.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};let ShelfX=LibraryTemplate.bind({});ShelfX.args={letter:"x"},ShelfX.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};let ShelfY=LibraryTemplate.bind({});ShelfY.args={letter:"y"},ShelfY.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};let ShelfZ=LibraryTemplate.bind({});ShelfZ.args={letter:"z"},ShelfZ.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};let ShelfOther=LibraryTemplate.bind({});function IconWithCountBubble(){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("span",{className:"inline-flex text-2xl border border-accent p-1",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(IconWithCount,{count:7,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_posthog_icons__WEBPACK_IMPORTED_MODULE_1__.IconDashboard,{})})})}function IconWithCountHidingZero(){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("span",{className:"inline-flex text-2xl border border-accent p-1",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(IconWithCount,{count:0,showZero:!1,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_posthog_icons__WEBPACK_IMPORTED_MODULE_1__.IconDashboard,{})})})}function IconWithCountShowingZero(){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("span",{className:"inline-flex text-2xl border border-accent p-1",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(IconWithCount,{count:0,showZero:!0,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_posthog_icons__WEBPACK_IMPORTED_MODULE_1__.IconDashboard,{})})})}function IconWithCountOverflowing(){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("span",{className:"inline-flex text-2xl border border-accent p-1",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(IconWithCount,{count:11,showZero:!0,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_posthog_icons__WEBPACK_IMPORTED_MODULE_1__.IconDashboard,{})})})}ShelfOther.args={letter:null},ShelfOther.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}},ShelfS.parameters={...ShelfS.parameters,docs:{...ShelfS.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfS.parameters?.docs?.source}}},ShelfT.parameters={...ShelfT.parameters,docs:{...ShelfT.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfT.parameters?.docs?.source}}},ShelfU.parameters={...ShelfU.parameters,docs:{...ShelfU.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfU.parameters?.docs?.source}}},ShelfV.parameters={...ShelfV.parameters,docs:{...ShelfV.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfV.parameters?.docs?.source}}},ShelfW.parameters={...ShelfW.parameters,docs:{...ShelfW.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfW.parameters?.docs?.source}}},ShelfX.parameters={...ShelfX.parameters,docs:{...ShelfX.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfX.parameters?.docs?.source}}},ShelfY.parameters={...ShelfY.parameters,docs:{...ShelfY.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfY.parameters?.docs?.source}}},ShelfZ.parameters={...ShelfZ.parameters,docs:{...ShelfZ.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfZ.parameters?.docs?.source}}},ShelfOther.parameters={...ShelfOther.parameters,docs:{...ShelfOther.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfOther.parameters?.docs?.source}}},IconWithCountBubble.parameters={...IconWithCountBubble.parameters,docs:{...IconWithCountBubble.parameters?.docs,source:{originalSource:'function IconWithCountBubble(): JSX.Element {\n  return <span className="inline-flex text-2xl border border-accent p-1">\n            <IconWithCount count={7}>\n                <IconDashboard />\n            </IconWithCount>\n        </span>;\n}',...IconWithCountBubble.parameters?.docs?.source}}},IconWithCountHidingZero.parameters={...IconWithCountHidingZero.parameters,docs:{...IconWithCountHidingZero.parameters?.docs,source:{originalSource:'function IconWithCountHidingZero(): JSX.Element {\n  return <span className="inline-flex text-2xl border border-accent p-1">\n            <IconWithCount count={0} showZero={false}>\n                <IconDashboard />\n            </IconWithCount>\n        </span>;\n}',...IconWithCountHidingZero.parameters?.docs?.source}}},IconWithCountShowingZero.parameters={...IconWithCountShowingZero.parameters,docs:{...IconWithCountShowingZero.parameters?.docs,source:{originalSource:'function IconWithCountShowingZero(): JSX.Element {\n  return <span className="inline-flex text-2xl border border-accent p-1">\n            <IconWithCount count={0} showZero={true}>\n                <IconDashboard />\n            </IconWithCount>\n        </span>;\n}',...IconWithCountShowingZero.parameters?.docs?.source}}},IconWithCountOverflowing.parameters={...IconWithCountOverflowing.parameters,docs:{...IconWithCountOverflowing.parameters?.docs,source:{originalSource:'function IconWithCountOverflowing(): JSX.Element {\n  return <span className="inline-flex text-2xl border border-accent p-1">\n            <IconWithCount count={11} showZero={true}>\n                <IconDashboard />\n            </IconWithCount>\n        </span>;\n}',...IconWithCountOverflowing.parameters?.docs?.source}}};let __namedExportsOrder=["ShelfS","ShelfT","ShelfU","ShelfV","ShelfW","ShelfX","ShelfY","ShelfZ","ShelfOther","IconWithCountBubble","IconWithCountHidingZero","IconWithCountShowingZero","IconWithCountOverflowing"]}}]);
//# sourceMappingURL=lib-lemon-ui-icons-stories-Icons3-stories.cdb0144f.iframe.bundle.js.map