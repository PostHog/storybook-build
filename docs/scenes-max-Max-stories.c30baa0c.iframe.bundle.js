"use strict";(self.webpackChunk_posthog_storybook=self.webpackChunk_posthog_storybook||[]).push([[73086],{"../../frontend/src/scenes/max/Max.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ChatHistory:()=>ChatHistory,ChatHistoryEmpty:()=>ChatHistoryEmpty,ChatHistoryLoading:()=>ChatHistoryLoading,ChatWithUIContext:()=>ChatWithUIContext,EmptyThreadLoading:()=>EmptyThreadLoading,GenerationFailureThread:()=>GenerationFailureThread,MaxInstanceWithContextualTools:()=>MaxInstanceWithContextualTools,MultiVisualizationInThread:()=>MultiVisualizationInThread,NotebookUpdateComponent:()=>NotebookUpdateComponent,PlanningComponent:()=>PlanningComponent,ReasoningComponent:()=>ReasoningComponent,TaskExecutionComponent:()=>TaskExecutionComponent,TaskExecutionWithFailure:()=>TaskExecutionWithFailure,Thread:()=>Thread,ThreadScrollsToBottomOnNewMessages:()=>ThreadScrollsToBottomOnNewMessages,ThreadWithConversationLoading:()=>ThreadWithConversationLoading,ThreadWithEmptyConversation:()=>ThreadWithEmptyConversation,ThreadWithFailedGeneration:()=>ThreadWithFailedGeneration,ThreadWithForm:()=>ThreadWithForm,ThreadWithInProgressConversation:()=>ThreadWithInProgressConversation,ThreadWithMultipleContextObjects:()=>ThreadWithMultipleContextObjects,ThreadWithOpenedSuggestions:()=>ThreadWithOpenedSuggestions,ThreadWithOpenedSuggestionsMobile:()=>ThreadWithOpenedSuggestionsMobile,ThreadWithRateLimit:()=>ThreadWithRateLimit,ThreadWithRateLimitNoRetryAfter:()=>ThreadWithRateLimitNoRetryAfter,Welcome:()=>Welcome,WelcomeFeaturePreviewAutoEnrolled:()=>WelcomeFeaturePreviewAutoEnrolled,WelcomeWithLatestConversations:()=>WelcomeWithLatestConversations,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Max_stories});var schema_assistant_messages=__webpack_require__("../../frontend/src/queries/schema/schema-assistant-messages.ts"),maxTypes=__webpack_require__("../../frontend/src/scenes/max/maxTypes.ts");let failureMessage_namespaceObject=JSON.parse('{"type":"ai/failure","content":"Oops! It looks like Iâ€™m having trouble answering this. Could you please try again?","id":"test-failure-message"}'),summaryMessage_namespaceObject=JSON.parse('{"type":"ai","content":"Looks like no pageviews have occured. Get some damn users.","id":"test-summary-message"}'),visualizationMessage_namespaceObject=JSON.parse('{"type":"ai/viz","plan":"Test plan","answer":{"aggregation_group_type_index":null,"breakdownFilter":{"breakdown_hide_other_aggregation":null,"breakdown_histogram_bin_count":null,"breakdown_limit":null,"breakdowns":[{"group_type_index":null,"histogram_bin_count":null,"normalize_url":null,"property":"$current_url","type":"event"}]},"compareFilter":null,"dateRange":{"date_from":"-30d","date_to":null,"explicitDate":false},"filterTestAccounts":true,"interval":"day","kind":"TrendsQuery","properties":[],"samplingFactor":null,"series":[{"custom_name":"Pageviews","event":"$pageview","fixedProperties":null,"kind":"EventsNode","math":"total","math_group_type_index":null,"math_property":null,"name":null,"orderBy":null,"properties":null,"response":null}],"trendsFilter":{"aggregationAxisFormat":"numeric","aggregationAxisPostfix":null,"aggregationAxisPrefix":null,"breakdown_histogram_bin_count":null,"decimalPlaces":null,"display":"ActionsBar","formula":null,"hiddenLegendIndexes":null,"showLabelsOnSeries":null,"showLegend":false,"showPercentStackView":false,"showValuesOnSeries":false,"smoothingIntervals":1,"yAxisScaleType":null}},"id":"test-visualization-message"}'),CONVERSATION_ID="b1b4b3b4-1b3b-4b3b-1b3b4b3b4b3b",humanMessage={type:schema_assistant_messages.pj.Human,content:"What are my most popular pages?",id:"human-1"},reasoningMessage1={type:schema_assistant_messages.pj.Assistant,content:"",id:"reasoning-1",meta:{thinking:[{thinking:"Picking relevant events and properties"}]}},reasoningMessage2={type:schema_assistant_messages.pj.Assistant,content:"",id:"reasoning-2",meta:{thinking:[{thinking:"Generating trends"}]}};function generateChunk(events){return events.map(event=>event.startsWith("event:")?`${event}
`:`${event}

`).join("")}let chatResponseChunk=generateChunk(["event: conversation",`data: ${JSON.stringify({id:CONVERSATION_ID})}`,"event: message",`data: ${JSON.stringify(humanMessage)}`,"event: message",`data: ${JSON.stringify(reasoningMessage1)}`,"event: message",`data: ${JSON.stringify(reasoningMessage2)}`,"event: message",`data: ${JSON.stringify(visualizationMessage_namespaceObject)}`,"event: message",`data: ${JSON.stringify(summaryMessage_namespaceObject)}`]);generateChunk(["event: message",`data: ${JSON.stringify(reasoningMessage1)}`,"event: message",`data: ${JSON.stringify(reasoningMessage2)}`]);let generationFailure={type:schema_assistant_messages.PP.GenerationError},generationFailureChunk=generateChunk(["event: status",`data: ${JSON.stringify(generationFailure)}`]),failureChunk=generateChunk(["event: message",`data: ${JSON.stringify(failureMessage_namespaceObject)}`]),formMessage={type:schema_assistant_messages.pj.Assistant,content:"Does this look like a good summary of what your product does?",id:"assistant-1",meta:{form:{options:[{value:"Yes, save this",variant:"primary"},{value:"No, not quite right"}]}}},formChunk=generateChunk(["event: message",`data: ${JSON.stringify(formMessage)}`]),longMessage={type:schema_assistant_messages.pj.Assistant,content:"This\n\nis\n\na\n\nlong\n\nmessage\n\nthat\n\nshould\n\nbe\n\nsplit\n\ninto\n\nmultiple\n\nlines",id:"assistant-2"},longResponseChunk=generateChunk(["event: message",`data: ${JSON.stringify(humanMessage)}`,"event: message",`data: ${JSON.stringify(longMessage)}`]),humanMessageWithContext={type:schema_assistant_messages.pj.Human,content:"Tell me about the $pageview event",id:"human-context",ui_context:{events:[{id:"test-event-1",name:"$pageview",type:maxTypes.H.EVENT,description:"Page view event"}]}},assistantResponseWithContext={type:schema_assistant_messages.pj.Assistant,content:"Based on the event context you provided, the $pageview event is a standard event that tracks when users view pages in your application. This event helps you understand user navigation patterns and page popularity. It typically captures properties like the page URL, referrer, and timestamp.",id:"assistant-context"},chatResponseWithEventContext=generateChunk(["event: conversation",`data: ${JSON.stringify({id:CONVERSATION_ID})}`,"event: message",`data: ${JSON.stringify(humanMessageWithContext)}`,"event: message",`data: ${JSON.stringify(assistantResponseWithContext)}`]);var api_mock=__webpack_require__("../../frontend/src/lib/api.mock.ts"),index_esm=__webpack_require__("../../node_modules/.pnpm/kea@3.1.7_react@18.2.0/node_modules/kea/lib/index.esm.js"),react=__webpack_require__("../../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),bundle_mjs=__webpack_require__("../../node_modules/.pnpm/tailwind-merge@2.2.2/node_modules/tailwind-merge/dist/bundle-mjs.mjs"),constants=__webpack_require__("../../frontend/src/lib/constants.tsx"),browser=__webpack_require__("../../frontend/src/mocks/browser.tsx"),Max=__webpack_require__("../../frontend/src/scenes/max/Max.tsx");let conversationList_namespaceObject=JSON.parse('{"count":2,"next":null,"previous":null,"results":[{"id":"in_progress","status":"in_progress","title":"Loading the thread in progress","created_at":"2025-04-29T17:44:21.654307Z","updated_at":"2025-04-29T17:44:29.184791Z","messages":[{"type":"human","content":"What are my most popular pages?","id":"human-1"}]},{"id":"empty","status":"idle","title":"Counting users chatting from USA","created_at":"2025-04-29T17:44:21.654307Z","updated_at":"2025-04-29T17:44:29.184791Z","messages":[]},{"id":"poem","status":"idle","title":"Writing poems","created_at":"2025-04-29T17:44:21.654307Z","updated_at":"2025-04-29T17:44:29.184791Z","messages":[{"content":"write a poem","id":"human-1","type":"human"},{"content":"Sure, here\'s a little poem for you:\\n\\nIn the world of data, where numbers dance,  \\nPostHog stands ready, to give insights a chance.  \\nWith dashboards and charts, it paints the scene,  \\nTurning raw data into a story unseen.  \\n\\nFrom trends to funnels, retention too,  \\nIt helps you understand what your users do.  \\nSo gather your data, let PostHog play,  \\nAnd watch as insights light up your day!","id":"ai-1","meta":null,"tool_calls":[],"type":"ai"},{"content":"write another poem","id":"human-2","type":"human"},{"content":"Of course, here\'s another one for you:\\n\\nIn the forest of files, where hedgehogs roam,  \\nA platform was born, a digital home.  \\nDropbox for hedgehogs, sharing with flair,  \\nCollaborating with ease, no need to despair.  \\n\\nWith quills of data, we scurry and share,  \\nBuilding connections, with nary a care.  \\nSo join the adventure, in this digital bog,  \\nWhere files find a home, with PostHog!","id":"ai-2","meta":null,"tool_calls":[],"type":"ai"},{"content":"write another poem","id":"human-3","type":"human"},{"content":"Of course, here\'s another one for you:\\n\\nIn the forest of files, where hedgehogs roam,  \\nA platform was born, a digital home.  \\nDropbox for hedgehogs, sharing with flair,  \\nCollaborating with ease, no need to despair.  \\n\\nWith quills of data, we scurry and share,  \\nBuilding connections, with nary a care.  \\nSo join the adventure, in this digital bog,  \\nWhere files find a home, with PostHog!","id":"ai-3","meta":null,"tool_calls":[],"type":"ai"}]}]}');var maxContextLogic=__webpack_require__("../../frontend/src/scenes/max/maxContextLogic.ts"),maxGlobalLogic=__webpack_require__("../../frontend/src/scenes/max/maxGlobalLogic.tsx"),maxLogic=__webpack_require__("../../frontend/src/scenes/max/maxLogic.tsx"),maxThreadLogic=__webpack_require__("../../frontend/src/scenes/max/maxThreadLogic.tsx"),jsx_runtime=__webpack_require__("../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");let Max_stories={title:"Scenes-App/Max AI",decorators:[(0,browser.x8)({post:{"/api/environments/:team_id/conversations/":(_,res,ctx)=>res(ctx.text(chatResponseChunk))},get:{"/api/organizations/@current/":()=>[200,{...api_mock.On,is_ai_data_processing_approved:!0}],"/api/environments/:team_id/conversations/":()=>[200,conversationList_namespaceObject],[`/api/environments/:team_id/conversations/${CONVERSATION_ID}/`]:()=>[200,{id:CONVERSATION_ID,status:"idle",title:"Test Conversation",created_at:"2025-04-29T17:44:21.654307Z",updated_at:"2025-04-29T17:44:29.184791Z",messages:[]}]}})],parameters:{layout:"fullscreen",viewMode:"story",mockDate:"2023-01-28",featureFlags:[constants.y8.ARTIFICIAL_HOG]}},Template=_ref=>{let{className,...props}=_ref;return(0,jsx_runtime.jsx)("div",{className:(0,bundle_mjs.m6)("relative flex flex-col h-fit",className),children:(0,jsx_runtime.jsx)(Max.MaxInstance,{tabId:"storybook",...props})})},Welcome=()=>((0,browser.ok)({get:{"/api/organizations/@current/":()=>[200,{...api_mock.On,is_ai_data_processing_approved:!1}]}}),(0,jsx_runtime.jsx)(Template,{}));Welcome.parameters={testOptions:{waitForLoadersToDisappear:!1}};let WelcomeFeaturePreviewAutoEnrolled=()=>(0,jsx_runtime.jsx)(Template,{});WelcomeFeaturePreviewAutoEnrolled.parameters={featureFlags:[],testOptions:{waitForLoadersToDisappear:!1}};let Thread=()=>{let{setConversationId}=(0,index_esm.useActions)((0,maxLogic.v8)({tabId:"storybook"})),{askMax}=(0,index_esm.useActions)((0,maxThreadLogic.r)({conversationId:CONVERSATION_ID,conversation:null,tabId:"storybook"})),{dataProcessingAccepted}=(0,index_esm.useValues)(maxGlobalLogic.V);return((0,react.useEffect)(()=>{dataProcessingAccepted&&setTimeout(()=>{setConversationId(CONVERSATION_ID),askMax(humanMessage.content)},0)},[dataProcessingAccepted,setConversationId,askMax]),dataProcessingAccepted)?(0,jsx_runtime.jsx)(Template,{}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})},EmptyThreadLoading=()=>{(0,browser.ok)({post:{"/api/environments/:team_id/conversations/":(_req,_res,ctx)=>[ctx.delay("infinite")]}});let{setConversationId}=(0,index_esm.useActions)((0,maxLogic.v8)({tabId:"storybook"})),threadLogic=(0,maxThreadLogic.r)({conversationId:CONVERSATION_ID,conversation:null,tabId:"storybook"}),{askMax}=(0,index_esm.useActions)(threadLogic),{dataProcessingAccepted}=(0,index_esm.useValues)(maxGlobalLogic.V);return((0,react.useEffect)(()=>{dataProcessingAccepted&&setTimeout(()=>{setConversationId(CONVERSATION_ID),askMax(humanMessage.content)},0)},[dataProcessingAccepted,setConversationId,askMax]),dataProcessingAccepted)?(0,jsx_runtime.jsx)(Template,{}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})};EmptyThreadLoading.parameters={testOptions:{waitForLoadersToDisappear:!1}};let GenerationFailureThread=()=>{(0,browser.ok)({post:{"/api/environments/:team_id/conversations/":(_,res,ctx)=>res(ctx.text(generationFailureChunk))}});let{setConversationId}=(0,index_esm.useActions)((0,maxLogic.v8)({tabId:"storybook"})),threadLogic=(0,maxThreadLogic.r)({conversationId:CONVERSATION_ID,conversation:null,tabId:"storybook"}),{askMax,setMessageStatus}=(0,index_esm.useActions)(threadLogic),{threadRaw,threadLoading}=(0,index_esm.useValues)(threadLogic),{dataProcessingAccepted}=(0,index_esm.useValues)(maxGlobalLogic.V);return((0,react.useEffect)(()=>{dataProcessingAccepted&&setTimeout(()=>{setConversationId(CONVERSATION_ID),askMax(humanMessage.content)},0)},[dataProcessingAccepted,setConversationId,askMax]),(0,react.useEffect)(()=>{2!==threadRaw.length||threadLoading||setMessageStatus(1,"error")},[threadRaw.length,threadLoading,setMessageStatus]),dataProcessingAccepted)?(0,jsx_runtime.jsx)(Template,{}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})},ThreadWithFailedGeneration=()=>{(0,browser.ok)({post:{"/api/environments/:team_id/conversations/":(_,res,ctx)=>res(ctx.text(failureChunk))}});let{setConversationId}=(0,index_esm.useActions)((0,maxLogic.v8)({tabId:"storybook"})),threadLogic=(0,maxThreadLogic.r)({conversationId:CONVERSATION_ID,conversation:null,tabId:"storybook"}),{askMax}=(0,index_esm.useActions)(threadLogic),{dataProcessingAccepted}=(0,index_esm.useValues)(maxGlobalLogic.V);return((0,react.useEffect)(()=>{dataProcessingAccepted&&setTimeout(()=>{setConversationId(CONVERSATION_ID),askMax(humanMessage.content)},0)},[dataProcessingAccepted,setConversationId,askMax]),dataProcessingAccepted)?(0,jsx_runtime.jsx)(Template,{}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})},ThreadWithRateLimit=()=>{(0,browser.ok)({post:{"/api/environments/:team_id/conversations/":(_,res,ctx)=>res(ctx.text(chatResponseChunk),ctx.set({"Retry-After":"3899"}),ctx.status(429))}});let{setConversationId}=(0,index_esm.useActions)((0,maxLogic.v8)({tabId:"storybook"})),threadLogic=(0,maxThreadLogic.r)({conversationId:CONVERSATION_ID,conversation:null,tabId:"storybook"}),{askMax}=(0,index_esm.useActions)(threadLogic),{dataProcessingAccepted}=(0,index_esm.useValues)(maxGlobalLogic.V);return((0,react.useEffect)(()=>{dataProcessingAccepted&&setTimeout(()=>{setConversationId(CONVERSATION_ID),askMax(humanMessage.content)},0)},[dataProcessingAccepted,setConversationId,askMax]),dataProcessingAccepted)?(0,jsx_runtime.jsx)(Template,{}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})},ThreadWithRateLimitNoRetryAfter=()=>{(0,browser.ok)({post:{"/api/environments/:team_id/conversations/":(_,res,ctx)=>res(ctx.text(chatResponseChunk),ctx.status(429))}});let{setConversationId}=(0,index_esm.useActions)((0,maxLogic.v8)({tabId:"storybook"})),threadLogic=(0,maxThreadLogic.r)({conversationId:CONVERSATION_ID,conversation:null,tabId:"storybook"}),{askMax}=(0,index_esm.useActions)(threadLogic),{dataProcessingAccepted}=(0,index_esm.useValues)(maxGlobalLogic.V);return((0,react.useEffect)(()=>{dataProcessingAccepted&&setTimeout(()=>{setConversationId(CONVERSATION_ID),askMax(humanMessage.content)},0)},[dataProcessingAccepted,setConversationId,askMax]),dataProcessingAccepted)?(0,jsx_runtime.jsx)(Template,{}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})},ThreadWithForm=()=>{(0,browser.ok)({post:{"/api/environments/:team_id/conversations/":(_,res,ctx)=>res(ctx.text(formChunk))}});let{setConversationId}=(0,index_esm.useActions)((0,maxLogic.v8)({tabId:"storybook"})),threadLogic=(0,maxThreadLogic.r)({conversationId:CONVERSATION_ID,conversation:null,tabId:"storybook"}),{askMax}=(0,index_esm.useActions)(threadLogic),{dataProcessingAccepted}=(0,index_esm.useValues)(maxGlobalLogic.V);return((0,react.useEffect)(()=>{dataProcessingAccepted&&setTimeout(()=>{setConversationId(CONVERSATION_ID),askMax(humanMessage.content)},0)},[dataProcessingAccepted,setConversationId,askMax]),dataProcessingAccepted)?(0,jsx_runtime.jsx)(Template,{}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})},ThreadWithConversationLoading=()=>{(0,browser.ok)({get:{"/api/environments/:team_id/conversations/":(_req,_res,ctx)=>[ctx.delay("infinite")]}});let{setConversationId}=(0,index_esm.useActions)((0,maxLogic.v8)({tabId:"storybook"}));return(0,react.useEffect)(()=>{setConversationId(CONVERSATION_ID)},[setConversationId]),(0,jsx_runtime.jsx)(Template,{})};ThreadWithConversationLoading.parameters={testOptions:{waitForLoadersToDisappear:!1}};let ThreadWithEmptyConversation=()=>{(0,browser.ok)({get:{"/api/environments/:team_id/conversations/":()=>[200,conversationList_namespaceObject]}});let{setConversationId}=(0,index_esm.useActions)((0,maxLogic.v8)({tabId:"storybook"}));return(0,react.useEffect)(()=>{setConversationId("empty")},[setConversationId]),(0,jsx_runtime.jsx)(Template,{})},ThreadWithInProgressConversation=()=>{(0,browser.ok)({get:{"/api/environments/:team_id/conversations/":()=>[200,conversationList_namespaceObject],"/api/environments/:team_id/conversations/in_progress/":(_req,_res,ctx)=>[ctx.delay("infinite")]}});let{setConversationId}=(0,index_esm.useActions)((0,maxLogic.v8)({tabId:"storybook"}));return(0,react.useEffect)(()=>{setConversationId("in_progress")},[setConversationId]),(0,jsx_runtime.jsx)(Template,{sidePanel:!0})};ThreadWithInProgressConversation.parameters={testOptions:{waitForLoadersToDisappear:!1}};let WelcomeWithLatestConversations=()=>((0,browser.ok)({get:{"/api/environments/:team_id/conversations/":()=>[200,conversationList_namespaceObject]}}),(0,jsx_runtime.jsx)(Template,{sidePanel:!0}));WelcomeWithLatestConversations.parameters={testOptions:{waitForLoadersToDisappear:!1}};let ChatHistory=()=>{(0,browser.ok)({get:{"/api/environments/:team_id/conversations/":()=>[200,conversationList_namespaceObject]}});let{toggleConversationHistory}=(0,index_esm.useActions)((0,maxLogic.v8)({tabId:"storybook"}));return(0,react.useEffect)(()=>{toggleConversationHistory(!0)},[toggleConversationHistory]),(0,jsx_runtime.jsx)(Template,{sidePanel:!0})};ChatHistory.parameters={testOptions:{waitForLoadersToDisappear:!1}};let ChatHistoryEmpty=()=>{(0,browser.ok)({get:{"/api/environments/:team_id/conversations/":()=>[400]}});let{toggleConversationHistory}=(0,index_esm.useActions)((0,maxLogic.v8)({tabId:"storybook"}));return(0,react.useEffect)(()=>{toggleConversationHistory(!0)},[toggleConversationHistory]),(0,jsx_runtime.jsx)(Template,{sidePanel:!0})};ChatHistoryEmpty.parameters={testOptions:{waitForLoadersToDisappear:!1}};let ChatHistoryLoading=()=>{(0,browser.ok)({get:{"/api/environments/:team_id/conversations/":(_req,_res,ctx)=>[ctx.delay("infinite")]}});let{toggleConversationHistory}=(0,index_esm.useActions)((0,maxLogic.v8)({tabId:"storybook"}));return(0,react.useEffect)(()=>{toggleConversationHistory(!0)},[toggleConversationHistory]),(0,jsx_runtime.jsx)(Template,{sidePanel:!0})};ChatHistoryLoading.parameters={testOptions:{waitForLoadersToDisappear:!1}};let ThreadWithOpenedSuggestionsMobile=()=>{let{setActiveGroup}=(0,index_esm.useActions)((0,maxLogic.v8)({tabId:"storybook"}));return(0,react.useEffect)(()=>{maxLogic.iv[3]&&setActiveGroup(maxLogic.iv[3])},[setActiveGroup]),(0,jsx_runtime.jsx)(Template,{sidePanel:!0})};ThreadWithOpenedSuggestionsMobile.parameters={testOptions:{waitForLoadersToDisappear:!1},viewport:{defaultViewport:"mobile2"}};let ThreadWithOpenedSuggestions=()=>{let{setActiveGroup}=(0,index_esm.useActions)((0,maxLogic.v8)({tabId:"storybook"}));return(0,react.useEffect)(()=>{maxLogic.iv[3]&&setActiveGroup(maxLogic.iv[3])},[setActiveGroup]),(0,jsx_runtime.jsx)(Template,{sidePanel:!0})};ThreadWithOpenedSuggestions.parameters={testOptions:{waitForLoadersToDisappear:!1}};let ThreadWithMultipleContextObjects=()=>{(0,browser.ok)({get:{"/api/environments/:team_id/conversations/":()=>[200,conversationList_namespaceObject]}});let{addOrUpdateContextInsight}=(0,index_esm.useActions)(maxContextLogic.U);return(0,react.useEffect)(()=>{addOrUpdateContextInsight({short_id:"insight-1",name:"Weekly Active Users",description:"Track weekly active users over time",query:{kind:"TrendsQuery",series:[{event:"$pageview"}]}}),addOrUpdateContextInsight({short_id:"insight-2",name:"Conversion Funnel",description:"User signup to activation funnel",query:{kind:"FunnelsQuery",series:[{event:"sign up"},{event:"first action"}]}})},[addOrUpdateContextInsight]),(0,jsx_runtime.jsx)(Template,{sidePanel:!0})};ThreadWithMultipleContextObjects.parameters={testOptions:{waitForLoadersToDisappear:!1}};let ThreadScrollsToBottomOnNewMessages=()=>{(0,browser.ok)({get:{"/api/environments/:team_id/conversations/":()=>[200,conversationList_namespaceObject]},post:{"/api/environments/:team_id/conversations/":(_,res,ctx)=>res(ctx.delay(100),ctx.text(longResponseChunk))}});let{conversation}=(0,index_esm.useValues)((0,maxLogic.v8)({tabId:"storybook"})),{setConversationId}=(0,index_esm.useActions)((0,maxLogic.v8)({tabId:"storybook"})),logic=(0,maxThreadLogic.r)({conversationId:"poem",conversation,tabId:"storybook"}),{threadRaw}=(0,index_esm.useValues)(logic),{askMax}=(0,index_esm.useActions)(logic);(0,react.useEffect)(()=>{setConversationId("poem")},[setConversationId]);let messagesSet=threadRaw.length>0;return(0,react.useEffect)(()=>{messagesSet&&askMax("This message must be on the top of the container")},[messagesSet,askMax]),(0,jsx_runtime.jsx)("div",{className:"h-fit max-h-screen overflow-y-auto SidePanel3000__content",children:(0,jsx_runtime.jsx)(Template,{})})};ThreadScrollsToBottomOnNewMessages.parameters={testOptions:{waitForLoadersToDisappear:!1}};let ChatWithUIContext=()=>{(0,browser.ok)({post:{"/api/environments/:team_id/conversations/":(_,res,ctx)=>res(ctx.text(chatResponseWithEventContext))},get:{"/api/environments/:team_id/conversations/":()=>[200,conversationList_namespaceObject],[`/api/environments/:team_id/conversations/${CONVERSATION_ID}/`]:()=>[200,{id:CONVERSATION_ID,status:"idle",title:"Event Context Test",created_at:"2025-04-29T17:44:21.654307Z",updated_at:"2025-04-29T17:44:29.184791Z",messages:[]}]}});let{contextEvents}=(0,index_esm.useValues)(maxContextLogic.U),{addOrUpdateContextEvent}=(0,index_esm.useActions)(maxContextLogic.U),{setConversationId}=(0,index_esm.useActions)((0,maxLogic.v8)({tabId:"storybook"})),threadLogic=(0,maxThreadLogic.r)({conversationId:CONVERSATION_ID,conversation:null,tabId:"storybook"}),{askMax}=(0,index_esm.useActions)(threadLogic),{dataProcessingAccepted}=(0,index_esm.useValues)(maxGlobalLogic.V);return((0,react.useEffect)(()=>{dataProcessingAccepted&&addOrUpdateContextEvent({id:"test-event-1",name:"$pageview",description:"Page view event",tags:[]})},[addOrUpdateContextEvent,dataProcessingAccepted]),(0,react.useEffect)(()=>{dataProcessingAccepted&&contextEvents.length>0&&setTimeout(()=>{setConversationId(CONVERSATION_ID),askMax("Tell me about the $pageview event")},100)},[contextEvents.length,setConversationId,askMax,dataProcessingAccepted]),(0,react.useEffect)(()=>{contextEvents.length>0&&console.info("Event context preserved:",contextEvents)},[contextEvents]),dataProcessingAccepted)?(0,jsx_runtime.jsx)(Template,{}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})};ChatWithUIContext.parameters={testOptions:{waitForLoadersToDisappear:!1}};let MaxInstanceWithContextualTools=()=>{let{registerTool}=(0,index_esm.useActions)(maxGlobalLogic.V);return(0,react.useEffect)(()=>{registerTool({identifier:"query_insights",name:"Query insights",description:"Max can query insights and their properties",context:{available_insights:["pageview_trends","user_retention","conversion_rates"],active_filters:{date_from:"-7d",properties:[{key:"browser",value:"Chrome"}]},user_permissions:["read_insights","create_insights"]},callback:toolOutput=>{console.info("Querying insights:",toolOutput)}}),registerTool({identifier:"manage_cohorts",name:"Manage cohorts",description:"Max can manage cohorts and their properties",context:{existing_cohorts:[{id:1,name:"Power Users",size:1250},{id:2,name:"New Signups",size:3400}],cohort_types:["behavioral","demographic","custom"]},callback:toolOutput=>{console.info("Managing cohorts:",toolOutput)}}),registerTool({identifier:"feature_flags",name:"Feature flags",description:"Max can manage feature flags and their properties",context:{active_flags:["new-dashboard","beta-feature","experiment-checkout"],flag_stats:{total:15,active:8,inactive:7},rollout_percentages:{"new-dashboard":25,"beta-feature":50}},callback:toolOutput=>{console.info("Feature flag action:",toolOutput)}})},[registerTool]),(0,jsx_runtime.jsx)(Template,{})};MaxInstanceWithContextualTools.parameters={testOptions:{waitForLoadersToDisappear:!1}};let NotebookUpdateComponent=()=>{let notebookMessage={type:schema_assistant_messages.pj.Notebook,notebook_id:"nb_123456",content:{type:"doc",content:[{type:"paragraph",content:[{type:"text",text:"Analysis notebook has been updated with new insights"}]}]},id:"notebook-update-message"};(0,browser.ok)({post:{"/api/environments/:team_id/conversations/":(_,res,ctx)=>res(ctx.text(Max_stories_generateChunk(["event: conversation",`data: ${JSON.stringify({id:CONVERSATION_ID})}`,"event: message",`data: ${JSON.stringify({...humanMessage,content:"Update my analysis notebook"})}`,"event: message",`data: ${JSON.stringify(notebookMessage)}`])))}});let{setConversationId}=(0,index_esm.useActions)((0,maxLogic.v8)({tabId:"storybook"})),threadLogic=(0,maxThreadLogic.r)({conversationId:CONVERSATION_ID,conversation:null,tabId:"storybook"}),{askMax}=(0,index_esm.useActions)(threadLogic),{dataProcessingAccepted}=(0,index_esm.useValues)(maxGlobalLogic.V);return((0,react.useEffect)(()=>{dataProcessingAccepted&&setTimeout(()=>{setConversationId(CONVERSATION_ID),askMax("Update my analysis notebook")},0)},[dataProcessingAccepted,setConversationId,askMax]),dataProcessingAccepted)?(0,jsx_runtime.jsx)(Template,{}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})},PlanningComponent=()=>{let planningMessage={type:schema_assistant_messages.pj.Assistant,content:"I'll create a comprehensive analysis plan for you.",id:"planning-msg-1",tool_calls:[{id:"todo_1",name:"todo_write",type:"tool_call",args:{todos:[{content:"Analyze user engagement metrics",status:"completed",activeForm:"Analyzing user engagement metrics"},{content:"Create conversion funnel visualization",status:"completed",activeForm:"Creating conversion funnel visualization"},{content:"Generate retention cohort analysis",status:"in_progress",activeForm:"Generating retention cohort analysis"},{content:"Compile comprehensive report",status:"pending",activeForm:"Compiling comprehensive report"},{content:"Export data to dashboard",status:"pending",activeForm:"Exporting data to dashboard"}]}}]};(0,browser.ok)({post:{"/api/environments/:team_id/conversations/":(_,res,ctx)=>res(ctx.text(Max_stories_generateChunk(["event: conversation",`data: ${JSON.stringify({id:CONVERSATION_ID})}`,"event: message",`data: ${JSON.stringify({...humanMessage,content:"Create a comprehensive analysis plan"})}`,"event: message",`data: ${JSON.stringify(planningMessage)}`])))}});let{setConversationId}=(0,index_esm.useActions)((0,maxLogic.v8)({tabId:"storybook"})),threadLogic=(0,maxThreadLogic.r)({conversationId:CONVERSATION_ID,conversation:null,tabId:"storybook"}),{askMax}=(0,index_esm.useActions)(threadLogic),{dataProcessingAccepted}=(0,index_esm.useValues)(maxGlobalLogic.V);return((0,react.useEffect)(()=>{dataProcessingAccepted&&setTimeout(()=>{setConversationId(CONVERSATION_ID),askMax("Create a comprehensive analysis plan")},0)},[dataProcessingAccepted,setConversationId,askMax]),dataProcessingAccepted)?(0,jsx_runtime.jsx)(Template,{}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})},ReasoningComponent=()=>{let reasoningMessage={type:schema_assistant_messages.pj.Assistant,content:"",id:"reasoning-msg-1",meta:{thinking:[{type:"thinking",thinking:"*Analyzing user behavior patterns...*"}]}};(0,browser.ok)({post:{"/api/environments/:team_id/conversations/":(_,res,ctx)=>res(ctx.text(Max_stories_generateChunk(["event: conversation",`data: ${JSON.stringify({id:CONVERSATION_ID})}`,"event: message",`data: ${JSON.stringify({...humanMessage,content:"Analyze user engagement"})}`,"event: message",`data: ${JSON.stringify(reasoningMessage)}`])))}});let{setConversationId}=(0,index_esm.useActions)((0,maxLogic.v8)({tabId:"storybook"})),threadLogic=(0,maxThreadLogic.r)({conversationId:CONVERSATION_ID,conversation:null,tabId:"storybook"}),{askMax}=(0,index_esm.useActions)(threadLogic),{dataProcessingAccepted}=(0,index_esm.useValues)(maxGlobalLogic.V);return((0,react.useEffect)(()=>{dataProcessingAccepted&&setTimeout(()=>{setConversationId(CONVERSATION_ID),askMax("Analyze user engagement")},0)},[dataProcessingAccepted,setConversationId,askMax]),dataProcessingAccepted)?(0,jsx_runtime.jsx)(Template,{}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})},TaskExecutionComponent=()=>{let taskExecutionMessage={type:schema_assistant_messages.pj.Assistant,content:"Executing analysis tasks...",id:"task-exec-msg-1",tool_calls:[{id:"task_1",name:"create_and_query_insight",type:"tool_call",args:{}},{id:"task_2",name:"create_and_query_insight",type:"tool_call",args:{commentary:"Identifying peak usage times and user segments"}},{id:"task_3",name:"search",type:"tool_call",args:{kind:"insights"}},{id:"task_4",name:"search",type:"tool_call",args:{kind:"docs"}},{id:"task_5",name:"create_and_query_insight",type:"tool_call",args:{}}],meta:{thinking:[{thinking:"Analyzing user engagement metrics..."}]}},toolCallCompletion1={type:schema_assistant_messages.pj.ToolCall,tool_call_id:"task_1",content:"Successfully loaded user data for the last 30 days",id:"tool-completion-1"},toolCallCompletion2={type:schema_assistant_messages.pj.ToolCall,tool_call_id:"task_2",content:"Engagement pattern analysis completed",id:"tool-completion-2"},updateMessages=[{tool_call_id:"task_3",content:"Fetching last 30 days of user activity",id:"task-exec-msg-1-1"},{tool_call_id:"task_3",content:"Data loaded successfully",id:"task-exec-msg-1-1"},{tool_call_id:"task_4",content:"Processing funnel metrics across key paths",id:"task-exec-msg-1-1"},{tool_call_id:"task_5",content:"Exploring data...",id:"task-exec-msg-1-1"}];(0,browser.ok)({post:{"/api/environments/:team_id/conversations/":(_,res,ctx)=>res(ctx.text(Max_stories_generateChunk(["event: conversation",`data: ${JSON.stringify({id:"in_progress"})}`,"event: message",`data: ${JSON.stringify({...humanMessage,content:"Execute analysis tasks"})}`,"event: message",`data: ${JSON.stringify(taskExecutionMessage)}`,"event: message",`data: ${JSON.stringify(toolCallCompletion1)}`,"event: message",`data: ${JSON.stringify(toolCallCompletion2)}`,"event: update",`data: ${JSON.stringify(updateMessages[0])}`,"event: update",`data: ${JSON.stringify(updateMessages[1])}`,"event: update",`data: ${JSON.stringify(updateMessages[2])}`,"event: update",`data: ${JSON.stringify(updateMessages[3])}`])))},get:{"/api/environments/:team_id/conversations/in_progress/":(_req,_res,ctx)=>[ctx.delay("infinite")]}});let{setConversationId}=(0,index_esm.useActions)((0,maxLogic.v8)({tabId:"storybook"})),threadLogic=(0,maxThreadLogic.r)({conversationId:"in_progress",conversation:null,tabId:"storybook"}),{askMax}=(0,index_esm.useActions)(threadLogic),{dataProcessingAccepted}=(0,index_esm.useValues)(maxGlobalLogic.V);return((0,react.useEffect)(()=>{dataProcessingAccepted&&setTimeout(()=>{askMax("Execute analysis tasks"),setConversationId("in_progress")},0)},[dataProcessingAccepted,setConversationId,askMax]),dataProcessingAccepted)?(0,jsx_runtime.jsx)(Template,{}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})};TaskExecutionComponent.parameters={testOptions:{waitForLoadersToDisappear:!1}};let TaskExecutionWithFailure=()=>{let taskExecutionMessage={type:schema_assistant_messages.pj.Assistant,content:"Executing analysis with some failures...",id:"task-exec-fail-msg-1",tool_calls:[{id:"task_1",name:"search",type:"tool_call",args:{kind:"insights"}},{id:"task_2",name:"search",type:"tool_call",args:{kind:"insights"}},{id:"task_3",name:"create_and_query_insight",type:"tool_call",args:{}},{id:"task_4",name:"create_and_query_insight",type:"tool_call",args:{}},{id:"task_5",name:"create_and_query_insight",type:"tool_call",args:{}}]},toolCallCompletion1={type:schema_assistant_messages.pj.ToolCall,tool_call_id:"task_1",content:"Successfully loaded user data",id:"tool-completion-fail-1"},toolCallCompletion2={type:schema_assistant_messages.pj.ToolCall,tool_call_id:"task_2",content:"Engagement patterns analyzed",id:"tool-completion-fail-2"},toolCallCompletion3={type:schema_assistant_messages.pj.ToolCall,tool_call_id:"task_3",content:"Failed to calculate conversion rates due to insufficient data",id:"tool-completion-fail-3"};(0,browser.ok)({post:{"/api/environments/:team_id/conversations/":(_,res,ctx)=>res(ctx.text(Max_stories_generateChunk(["event: conversation",`data: ${JSON.stringify({id:CONVERSATION_ID})}`,"event: message",`data: ${JSON.stringify({...humanMessage,content:"Execute analysis with some failures"})}`,"event: message",`data: ${JSON.stringify(taskExecutionMessage)}`,"event: message",`data: ${JSON.stringify(toolCallCompletion1)}`,"event: message",`data: ${JSON.stringify(toolCallCompletion2)}`,"event: message",`data: ${JSON.stringify(toolCallCompletion3)}`])))}});let{setConversationId}=(0,index_esm.useActions)((0,maxLogic.v8)({tabId:"storybook"})),threadLogic=(0,maxThreadLogic.r)({conversationId:CONVERSATION_ID,conversation:null,tabId:"storybook"}),{askMax}=(0,index_esm.useActions)(threadLogic),{dataProcessingAccepted}=(0,index_esm.useValues)(maxGlobalLogic.V);return((0,react.useEffect)(()=>{dataProcessingAccepted&&setTimeout(()=>{setConversationId(CONVERSATION_ID),askMax("Execute analysis with some failures")},0)},[dataProcessingAccepted,setConversationId,askMax]),dataProcessingAccepted)?(0,jsx_runtime.jsx)(Template,{}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})},MultiVisualizationInThread=()=>{(0,browser.ok)({post:{"/api/environments/:team_id/query/":()=>[200,{results:[[100,120,130,140,150]],columns:["count"],types:["integer"],hogql:"SELECT count() FROM events"}],"/api/environments/:team_id/conversations/":(_,res,ctx)=>{let humanMsg={type:schema_assistant_messages.pj.Human,content:"Analyze our product metrics comprehensively",id:"human-multi-viz"},multiVizMessage={type:schema_assistant_messages.pj.MultiVisualization,id:"multi-viz-1",visualizations:[{query:"Daily Active Users",plan:"Track user engagement over the past 30 days",answer:{kind:"TrendsQuery",series:[{event:"$pageview",name:"Pageviews"}],dateRange:{date_from:"-30d"}}},{query:"User Conversion Funnel",plan:"Analyze conversion from signup to purchase",answer:{kind:"FunnelsQuery",series:[{event:"user signed up"},{event:"viewed product"},{event:"completed purchase"}]}},{query:"Feature Adoption",plan:"Measure feature usage rates",answer:{kind:"TrendsQuery",series:[{event:"feature_used",name:"Feature Usage"}],breakdownFilter:{breakdown:"feature_name",breakdown_type:"event"}}}],commentary:`I've analyzed your product metrics across three key dimensions:

1. **User Engagement**: Daily active users show a positive trend with 25% growth
2. **Conversion Funnel**: 40% drop-off at payment step needs attention
3. **Feature Adoption**: New dashboard feature has 65% adoption rate

### Recommendations
- Optimize the payment flow to reduce friction
- Continue current engagement strategies
- Apply dashboard rollout strategy to future features`};return res(ctx.text(Max_stories_generateChunk(["event: conversation",`data: ${JSON.stringify({id:CONVERSATION_ID})}`,"event: message",`data: ${JSON.stringify({...humanMsg,content:"Analyze our product metrics comprehensively"})}`,"event: message",`data: ${JSON.stringify(multiVizMessage)}`])))}}});let{setConversationId}=(0,index_esm.useActions)((0,maxLogic.v8)({tabId:"storybook"})),threadLogic=(0,maxThreadLogic.r)({conversationId:CONVERSATION_ID,conversation:null,tabId:"storybook"}),{askMax}=(0,index_esm.useActions)(threadLogic),{dataProcessingAccepted}=(0,index_esm.useValues)(maxGlobalLogic.V);return((0,react.useEffect)(()=>{dataProcessingAccepted&&setTimeout(()=>{setConversationId(CONVERSATION_ID),askMax("Analyze our product metrics comprehensively")},0)},[dataProcessingAccepted,setConversationId,askMax]),dataProcessingAccepted)?(0,jsx_runtime.jsx)(Template,{}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})};function Max_stories_generateChunk(events){return events.map(event=>event.startsWith("event:")?`${event}
`:`${event}

`).join("")}Welcome.parameters={...Welcome.parameters,docs:{...Welcome.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    get: {\n      '/api/organizations/@current/': () => [200, {\n        ...MOCK_DEFAULT_ORGANIZATION,\n        // We override data processing opt-in to false, so that we see the welcome screen as a first-time user would\n        is_ai_data_processing_approved: false\n      }]\n    }\n  });\n  return <Template />;\n}",...Welcome.parameters?.docs?.source}}},WelcomeFeaturePreviewAutoEnrolled.parameters={...WelcomeFeaturePreviewAutoEnrolled.parameters,docs:{...WelcomeFeaturePreviewAutoEnrolled.parameters?.docs,source:{originalSource:"() => {\n  return <Template />;\n}",...WelcomeFeaturePreviewAutoEnrolled.parameters?.docs?.source}}},Thread.parameters={...Thread.parameters,docs:{...Thread.parameters?.docs,source:{originalSource:"() => {\n  const {\n    setConversationId\n  } = useActions(maxLogic({\n    tabId: 'storybook'\n  }));\n  const {\n    askMax\n  } = useActions(maxThreadLogic({\n    conversationId: CONVERSATION_ID,\n    conversation: null,\n    tabId: 'storybook'\n  }));\n  const {\n    dataProcessingAccepted\n  } = useValues(maxGlobalLogic);\n  useEffect(() => {\n    if (dataProcessingAccepted) {\n      setTimeout(() => {\n        setConversationId(CONVERSATION_ID);\n        askMax(humanMessage.content);\n      }, 0);\n    }\n  }, [dataProcessingAccepted, setConversationId, askMax]);\n  if (!dataProcessingAccepted) {\n    return <></>;\n  }\n  return <Template />;\n}",...Thread.parameters?.docs?.source}}},EmptyThreadLoading.parameters={...EmptyThreadLoading.parameters,docs:{...EmptyThreadLoading.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    post: {\n      '/api/environments/:team_id/conversations/': (_req, _res, ctx) => [ctx.delay('infinite')]\n    }\n  });\n  const {\n    setConversationId\n  } = useActions(maxLogic({\n    tabId: 'storybook'\n  }));\n  const threadLogic = maxThreadLogic({\n    conversationId: CONVERSATION_ID,\n    conversation: null,\n    tabId: 'storybook'\n  });\n  const {\n    askMax\n  } = useActions(threadLogic);\n  const {\n    dataProcessingAccepted\n  } = useValues(maxGlobalLogic);\n  useEffect(() => {\n    if (dataProcessingAccepted) {\n      setTimeout(() => {\n        setConversationId(CONVERSATION_ID);\n        askMax(humanMessage.content);\n      }, 0);\n    }\n  }, [dataProcessingAccepted, setConversationId, askMax]);\n  if (!dataProcessingAccepted) {\n    return <></>;\n  }\n  return <Template />;\n}",...EmptyThreadLoading.parameters?.docs?.source}}},GenerationFailureThread.parameters={...GenerationFailureThread.parameters,docs:{...GenerationFailureThread.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    post: {\n      '/api/environments/:team_id/conversations/': (_, res, ctx) => res(ctx.text(generationFailureChunk))\n    }\n  });\n  const {\n    setConversationId\n  } = useActions(maxLogic({\n    tabId: 'storybook'\n  }));\n  const threadLogic = maxThreadLogic({\n    conversationId: CONVERSATION_ID,\n    conversation: null,\n    tabId: 'storybook'\n  });\n  const {\n    askMax,\n    setMessageStatus\n  } = useActions(threadLogic);\n  const {\n    threadRaw,\n    threadLoading\n  } = useValues(threadLogic);\n  const {\n    dataProcessingAccepted\n  } = useValues(maxGlobalLogic);\n  useEffect(() => {\n    if (dataProcessingAccepted) {\n      setTimeout(() => {\n        setConversationId(CONVERSATION_ID);\n        askMax(humanMessage.content);\n      }, 0);\n    }\n  }, [dataProcessingAccepted, setConversationId, askMax]);\n  useEffect(() => {\n    if (threadRaw.length === 2 && !threadLoading) {\n      setMessageStatus(1, 'error');\n    }\n  }, [threadRaw.length, threadLoading, setMessageStatus]);\n  if (!dataProcessingAccepted) {\n    return <></>;\n  }\n  return <Template />;\n}",...GenerationFailureThread.parameters?.docs?.source}}},ThreadWithFailedGeneration.parameters={...ThreadWithFailedGeneration.parameters,docs:{...ThreadWithFailedGeneration.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    post: {\n      '/api/environments/:team_id/conversations/': (_, res, ctx) => res(ctx.text(failureChunk))\n    }\n  });\n  const {\n    setConversationId\n  } = useActions(maxLogic({\n    tabId: 'storybook'\n  }));\n  const threadLogic = maxThreadLogic({\n    conversationId: CONVERSATION_ID,\n    conversation: null,\n    tabId: 'storybook'\n  });\n  const {\n    askMax\n  } = useActions(threadLogic);\n  const {\n    dataProcessingAccepted\n  } = useValues(maxGlobalLogic);\n  useEffect(() => {\n    if (dataProcessingAccepted) {\n      setTimeout(() => {\n        setConversationId(CONVERSATION_ID);\n        askMax(humanMessage.content);\n      }, 0);\n    }\n  }, [dataProcessingAccepted, setConversationId, askMax]);\n  if (!dataProcessingAccepted) {\n    return <></>;\n  }\n  return <Template />;\n}",...ThreadWithFailedGeneration.parameters?.docs?.source}}},ThreadWithRateLimit.parameters={...ThreadWithRateLimit.parameters,docs:{...ThreadWithRateLimit.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    post: {\n      '/api/environments/:team_id/conversations/': (_, res, ctx) =>\n      // Retry-After header is present so we should be showing its value in the UI\n      res(ctx.text(chatResponseChunk), ctx.set({\n        'Retry-After': '3899'\n      }), ctx.status(429))\n    }\n  });\n  const {\n    setConversationId\n  } = useActions(maxLogic({\n    tabId: 'storybook'\n  }));\n  const threadLogic = maxThreadLogic({\n    conversationId: CONVERSATION_ID,\n    conversation: null,\n    tabId: 'storybook'\n  });\n  const {\n    askMax\n  } = useActions(threadLogic);\n  const {\n    dataProcessingAccepted\n  } = useValues(maxGlobalLogic);\n  useEffect(() => {\n    if (dataProcessingAccepted) {\n      setTimeout(() => {\n        setConversationId(CONVERSATION_ID);\n        askMax(humanMessage.content);\n      }, 0);\n    }\n  }, [dataProcessingAccepted, setConversationId, askMax]);\n  if (!dataProcessingAccepted) {\n    return <></>;\n  }\n  return <Template />;\n}",...ThreadWithRateLimit.parameters?.docs?.source}}},ThreadWithRateLimitNoRetryAfter.parameters={...ThreadWithRateLimitNoRetryAfter.parameters,docs:{...ThreadWithRateLimitNoRetryAfter.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    post: {\n      '/api/environments/:team_id/conversations/': (_, res, ctx) =>\n      // Testing rate limit error when the Retry-After header is MISSING\n      res(ctx.text(chatResponseChunk), ctx.status(429))\n    }\n  });\n  const {\n    setConversationId\n  } = useActions(maxLogic({\n    tabId: 'storybook'\n  }));\n  const threadLogic = maxThreadLogic({\n    conversationId: CONVERSATION_ID,\n    conversation: null,\n    tabId: 'storybook'\n  });\n  const {\n    askMax\n  } = useActions(threadLogic);\n  const {\n    dataProcessingAccepted\n  } = useValues(maxGlobalLogic);\n  useEffect(() => {\n    if (dataProcessingAccepted) {\n      setTimeout(() => {\n        setConversationId(CONVERSATION_ID);\n        askMax(humanMessage.content);\n      }, 0);\n    }\n  }, [dataProcessingAccepted, setConversationId, askMax]);\n  if (!dataProcessingAccepted) {\n    return <></>;\n  }\n  return <Template />;\n}",...ThreadWithRateLimitNoRetryAfter.parameters?.docs?.source}}},ThreadWithForm.parameters={...ThreadWithForm.parameters,docs:{...ThreadWithForm.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    post: {\n      '/api/environments/:team_id/conversations/': (_, res, ctx) => res(ctx.text(formChunk))\n    }\n  });\n  const {\n    setConversationId\n  } = useActions(maxLogic({\n    tabId: 'storybook'\n  }));\n  const threadLogic = maxThreadLogic({\n    conversationId: CONVERSATION_ID,\n    conversation: null,\n    tabId: 'storybook'\n  });\n  const {\n    askMax\n  } = useActions(threadLogic);\n  const {\n    dataProcessingAccepted\n  } = useValues(maxGlobalLogic);\n  useEffect(() => {\n    if (dataProcessingAccepted) {\n      setTimeout(() => {\n        setConversationId(CONVERSATION_ID);\n        askMax(humanMessage.content);\n      }, 0);\n    }\n  }, [dataProcessingAccepted, setConversationId, askMax]);\n  if (!dataProcessingAccepted) {\n    return <></>;\n  }\n  return <Template />;\n}",...ThreadWithForm.parameters?.docs?.source}}},ThreadWithConversationLoading.parameters={...ThreadWithConversationLoading.parameters,docs:{...ThreadWithConversationLoading.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    get: {\n      '/api/environments/:team_id/conversations/': (_req, _res, ctx) => [ctx.delay('infinite')]\n    }\n  });\n  const {\n    setConversationId\n  } = useActions(maxLogic({\n    tabId: 'storybook'\n  }));\n  useEffect(() => {\n    setConversationId(CONVERSATION_ID);\n  }, [setConversationId]);\n  return <Template />;\n}",...ThreadWithConversationLoading.parameters?.docs?.source}}},ThreadWithEmptyConversation.parameters={...ThreadWithEmptyConversation.parameters,docs:{...ThreadWithEmptyConversation.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    get: {\n      '/api/environments/:team_id/conversations/': () => [200, conversationList]\n    }\n  });\n  const {\n    setConversationId\n  } = useActions(maxLogic({\n    tabId: 'storybook'\n  }));\n  useEffect(() => {\n    setConversationId('empty');\n  }, [setConversationId]);\n  return <Template />;\n}",...ThreadWithEmptyConversation.parameters?.docs?.source}}},ThreadWithInProgressConversation.parameters={...ThreadWithInProgressConversation.parameters,docs:{...ThreadWithInProgressConversation.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    get: {\n      '/api/environments/:team_id/conversations/': () => [200, conversationList],\n      '/api/environments/:team_id/conversations/in_progress/': (_req, _res, ctx) => [ctx.delay('infinite')]\n    }\n  });\n  const {\n    setConversationId\n  } = useActions(maxLogic({\n    tabId: 'storybook'\n  }));\n  useEffect(() => {\n    setConversationId('in_progress');\n  }, [setConversationId]);\n  return <Template sidePanel />;\n}",...ThreadWithInProgressConversation.parameters?.docs?.source}}},WelcomeWithLatestConversations.parameters={...WelcomeWithLatestConversations.parameters,docs:{...WelcomeWithLatestConversations.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    get: {\n      '/api/environments/:team_id/conversations/': () => [200, conversationList]\n    }\n  });\n  return <Template sidePanel />;\n}",...WelcomeWithLatestConversations.parameters?.docs?.source}}},ChatHistory.parameters={...ChatHistory.parameters,docs:{...ChatHistory.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    get: {\n      '/api/environments/:team_id/conversations/': () => [200, conversationList]\n    }\n  });\n  const {\n    toggleConversationHistory\n  } = useActions(maxLogic({\n    tabId: 'storybook'\n  }));\n  useEffect(() => {\n    toggleConversationHistory(true);\n  }, [toggleConversationHistory]);\n  return <Template sidePanel />;\n}",...ChatHistory.parameters?.docs?.source}}},ChatHistoryEmpty.parameters={...ChatHistoryEmpty.parameters,docs:{...ChatHistoryEmpty.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    get: {\n      '/api/environments/:team_id/conversations/': () => [400]\n    }\n  });\n  const {\n    toggleConversationHistory\n  } = useActions(maxLogic({\n    tabId: 'storybook'\n  }));\n  useEffect(() => {\n    toggleConversationHistory(true);\n  }, [toggleConversationHistory]);\n  return <Template sidePanel />;\n}",...ChatHistoryEmpty.parameters?.docs?.source}}},ChatHistoryLoading.parameters={...ChatHistoryLoading.parameters,docs:{...ChatHistoryLoading.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    get: {\n      '/api/environments/:team_id/conversations/': (_req, _res, ctx) => [ctx.delay('infinite')]\n    }\n  });\n  const {\n    toggleConversationHistory\n  } = useActions(maxLogic({\n    tabId: 'storybook'\n  }));\n  useEffect(() => {\n    toggleConversationHistory(true);\n  }, [toggleConversationHistory]);\n  return <Template sidePanel />;\n}",...ChatHistoryLoading.parameters?.docs?.source}}},ThreadWithOpenedSuggestionsMobile.parameters={...ThreadWithOpenedSuggestionsMobile.parameters,docs:{...ThreadWithOpenedSuggestionsMobile.parameters?.docs,source:{originalSource:"() => {\n  const {\n    setActiveGroup\n  } = useActions(maxLogic({\n    tabId: 'storybook'\n  }));\n  useEffect(() => {\n    // The largest group is the set up group\n    if (QUESTION_SUGGESTIONS_DATA[3]) {\n      setActiveGroup(QUESTION_SUGGESTIONS_DATA[3]);\n    }\n  }, [setActiveGroup]);\n  return <Template sidePanel />;\n}",...ThreadWithOpenedSuggestionsMobile.parameters?.docs?.source}}},ThreadWithOpenedSuggestions.parameters={...ThreadWithOpenedSuggestions.parameters,docs:{...ThreadWithOpenedSuggestions.parameters?.docs,source:{originalSource:"() => {\n  const {\n    setActiveGroup\n  } = useActions(maxLogic({\n    tabId: 'storybook'\n  }));\n  useEffect(() => {\n    // The largest group is the set up group\n    if (QUESTION_SUGGESTIONS_DATA[3]) {\n      setActiveGroup(QUESTION_SUGGESTIONS_DATA[3]);\n    }\n  }, [setActiveGroup]);\n  return <Template sidePanel />;\n}",...ThreadWithOpenedSuggestions.parameters?.docs?.source}}},ThreadWithMultipleContextObjects.parameters={...ThreadWithMultipleContextObjects.parameters,docs:{...ThreadWithMultipleContextObjects.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    get: {\n      '/api/environments/:team_id/conversations/': () => [200, conversationList]\n    }\n  });\n  const {\n    addOrUpdateContextInsight\n  } = useActions(maxContextLogic);\n  useEffect(() => {\n    // Add multiple context insights\n    addOrUpdateContextInsight({\n      short_id: 'insight-1' as InsightShortId,\n      name: 'Weekly Active Users',\n      description: 'Track weekly active users over time',\n      query: {\n        kind: 'TrendsQuery',\n        series: [{\n          event: '$pageview'\n        }]\n      } as TrendsQuery\n    });\n    addOrUpdateContextInsight({\n      short_id: 'insight-2' as InsightShortId,\n      name: 'Conversion Funnel',\n      description: 'User signup to activation funnel',\n      query: {\n        kind: 'FunnelsQuery',\n        series: [{\n          event: 'sign up'\n        }, {\n          event: 'first action'\n        }]\n      } as FunnelsQuery\n    });\n  }, [addOrUpdateContextInsight]);\n  return <Template sidePanel />;\n}",...ThreadWithMultipleContextObjects.parameters?.docs?.source}}},ThreadScrollsToBottomOnNewMessages.parameters={...ThreadScrollsToBottomOnNewMessages.parameters,docs:{...ThreadScrollsToBottomOnNewMessages.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    get: {\n      '/api/environments/:team_id/conversations/': () => [200, conversationList]\n    },\n    post: {\n      '/api/environments/:team_id/conversations/': (_, res, ctx) => res(ctx.delay(100), ctx.text(longResponseChunk))\n    }\n  });\n  const {\n    conversation\n  } = useValues(maxLogic({\n    tabId: 'storybook'\n  }));\n  const {\n    setConversationId\n  } = useActions(maxLogic({\n    tabId: 'storybook'\n  }));\n  const logic = maxThreadLogic({\n    conversationId: 'poem',\n    conversation,\n    tabId: 'storybook'\n  });\n  const {\n    threadRaw\n  } = useValues(logic);\n  const {\n    askMax\n  } = useActions(logic);\n  useEffect(() => {\n    setConversationId('poem');\n  }, [setConversationId]);\n  const messagesSet = threadRaw.length > 0;\n  useEffect(() => {\n    if (messagesSet) {\n      askMax('This message must be on the top of the container');\n    }\n  }, [messagesSet, askMax]);\n  return <div className=\"h-fit max-h-screen overflow-y-auto SidePanel3000__content\">\n            <Template />\n        </div>;\n}",...ThreadScrollsToBottomOnNewMessages.parameters?.docs?.source}}},ChatWithUIContext.parameters={...ChatWithUIContext.parameters,docs:{...ChatWithUIContext.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    post: {\n      '/api/environments/:team_id/conversations/': (_, res, ctx) => res(ctx.text(chatResponseWithEventContext))\n    },\n    get: {\n      '/api/environments/:team_id/conversations/': () => [200, conversationList],\n      [`/api/environments/:team_id/conversations/${CONVERSATION_ID}/`]: () => [200, {\n        id: CONVERSATION_ID,\n        status: 'idle',\n        title: 'Event Context Test',\n        created_at: '2025-04-29T17:44:21.654307Z',\n        updated_at: '2025-04-29T17:44:29.184791Z',\n        messages: []\n      }]\n    }\n  });\n  const {\n    contextEvents\n  } = useValues(maxContextLogic);\n  const {\n    addOrUpdateContextEvent\n  } = useActions(maxContextLogic);\n  const {\n    setConversationId\n  } = useActions(maxLogic({\n    tabId: 'storybook'\n  }));\n  const threadLogic = maxThreadLogic({\n    conversationId: CONVERSATION_ID,\n    conversation: null,\n    tabId: 'storybook'\n  });\n  const {\n    askMax\n  } = useActions(threadLogic);\n  const {\n    dataProcessingAccepted\n  } = useValues(maxGlobalLogic);\n  useEffect(() => {\n    // Add an event to the context\n    if (dataProcessingAccepted) {\n      addOrUpdateContextEvent({\n        id: 'test-event-1',\n        name: '$pageview',\n        description: 'Page view event',\n        tags: []\n      });\n    }\n  }, [addOrUpdateContextEvent, dataProcessingAccepted]);\n  useEffect(() => {\n    // After event is added, start a new conversation\n    if (dataProcessingAccepted && contextEvents.length > 0) {\n      setTimeout(() => {\n        // This simulates starting a new chat which changes the URL\n        setConversationId(CONVERSATION_ID);\n        askMax('Tell me about the $pageview event');\n      }, 100);\n    }\n  }, [contextEvents.length, setConversationId, askMax, dataProcessingAccepted]);\n  useEffect(() => {\n    // Verify context is still present after conversation starts\n    if (contextEvents.length > 0) {\n      console.info('Event context preserved:', contextEvents);\n    }\n  }, [contextEvents]);\n  if (!dataProcessingAccepted) {\n    return <></>;\n  }\n  return <Template />;\n}",...ChatWithUIContext.parameters?.docs?.source}}},MaxInstanceWithContextualTools.parameters={...MaxInstanceWithContextualTools.parameters,docs:{...MaxInstanceWithContextualTools.parameters?.docs,source:{originalSource:"() => {\n  const {\n    registerTool\n  } = useActions(maxGlobalLogic);\n  useEffect(() => {\n    // Register various contextual tools for MaxInstance\n    registerTool({\n      identifier: 'query_insights' as ToolRegistration['identifier'],\n      name: 'Query insights',\n      description: 'Max can query insights and their properties',\n      context: {\n        available_insights: ['pageview_trends', 'user_retention', 'conversion_rates'],\n        active_filters: {\n          date_from: '-7d',\n          properties: [{\n            key: 'browser',\n            value: 'Chrome'\n          }]\n        },\n        user_permissions: ['read_insights', 'create_insights']\n      },\n      callback: toolOutput => {\n        console.info('Querying insights:', toolOutput);\n      }\n    });\n    registerTool({\n      identifier: 'manage_cohorts' as ToolRegistration['identifier'],\n      name: 'Manage cohorts',\n      description: 'Max can manage cohorts and their properties',\n      context: {\n        existing_cohorts: [{\n          id: 1,\n          name: 'Power Users',\n          size: 1250\n        }, {\n          id: 2,\n          name: 'New Signups',\n          size: 3400\n        }],\n        cohort_types: ['behavioral', 'demographic', 'custom']\n      },\n      callback: toolOutput => {\n        console.info('Managing cohorts:', toolOutput);\n      }\n    });\n    registerTool({\n      identifier: 'feature_flags' as ToolRegistration['identifier'],\n      name: 'Feature flags',\n      description: 'Max can manage feature flags and their properties',\n      context: {\n        active_flags: ['new-dashboard', 'beta-feature', 'experiment-checkout'],\n        flag_stats: {\n          total: 15,\n          active: 8,\n          inactive: 7\n        },\n        rollout_percentages: {\n          'new-dashboard': 25,\n          'beta-feature': 50\n        }\n      },\n      callback: toolOutput => {\n        console.info('Feature flag action:', toolOutput);\n      }\n    });\n  }, [registerTool]);\n  return <Template />;\n}",...MaxInstanceWithContextualTools.parameters?.docs?.source}}},NotebookUpdateComponent.parameters={...NotebookUpdateComponent.parameters,docs:{...NotebookUpdateComponent.parameters?.docs,source:{originalSource:"() => {\n  const notebookMessage: NotebookUpdateMessage = {\n    type: AssistantMessageType.Notebook,\n    notebook_id: 'nb_123456',\n    content: {\n      type: 'doc',\n      content: [{\n        type: 'paragraph',\n        content: [{\n          type: 'text',\n          text: 'Analysis notebook has been updated with new insights'\n        }]\n      }]\n    },\n    id: 'notebook-update-message'\n  };\n  useStorybookMocks({\n    post: {\n      '/api/environments/:team_id/conversations/': (_, res, ctx) => res(ctx.text(generateChunk(['event: conversation', `data: ${JSON.stringify({\n        id: CONVERSATION_ID\n      })}`, 'event: message', `data: ${JSON.stringify({\n        ...humanMessage,\n        content: 'Update my analysis notebook'\n      })}`, 'event: message', `data: ${JSON.stringify(notebookMessage)}`])))\n    }\n  });\n  const {\n    setConversationId\n  } = useActions(maxLogic({\n    tabId: 'storybook'\n  }));\n  const threadLogic = maxThreadLogic({\n    conversationId: CONVERSATION_ID,\n    conversation: null,\n    tabId: 'storybook'\n  });\n  const {\n    askMax\n  } = useActions(threadLogic);\n  const {\n    dataProcessingAccepted\n  } = useValues(maxGlobalLogic);\n  useEffect(() => {\n    if (dataProcessingAccepted) {\n      setTimeout(() => {\n        setConversationId(CONVERSATION_ID);\n        askMax('Update my analysis notebook');\n      }, 0);\n    }\n  }, [dataProcessingAccepted, setConversationId, askMax]);\n  if (!dataProcessingAccepted) {\n    return <></>;\n  }\n  return <Template />;\n}",...NotebookUpdateComponent.parameters?.docs?.source}}},PlanningComponent.parameters={...PlanningComponent.parameters,docs:{...PlanningComponent.parameters?.docs,source:{originalSource:"() => {\n  // Planning is now derived from AssistantMessage with todo_write tool call\n  const planningMessage: AssistantMessage = {\n    type: AssistantMessageType.Assistant,\n    content: \"I'll create a comprehensive analysis plan for you.\",\n    id: 'planning-msg-1',\n    tool_calls: [{\n      id: 'todo_1',\n      name: 'todo_write',\n      type: 'tool_call',\n      args: {\n        todos: [{\n          content: 'Analyze user engagement metrics',\n          status: 'completed',\n          activeForm: 'Analyzing user engagement metrics'\n        }, {\n          content: 'Create conversion funnel visualization',\n          status: 'completed',\n          activeForm: 'Creating conversion funnel visualization'\n        }, {\n          content: 'Generate retention cohort analysis',\n          status: 'in_progress',\n          activeForm: 'Generating retention cohort analysis'\n        }, {\n          content: 'Compile comprehensive report',\n          status: 'pending',\n          activeForm: 'Compiling comprehensive report'\n        }, {\n          content: 'Export data to dashboard',\n          status: 'pending',\n          activeForm: 'Exporting data to dashboard'\n        }]\n      }\n    }]\n  };\n  useStorybookMocks({\n    post: {\n      '/api/environments/:team_id/conversations/': (_, res, ctx) => res(ctx.text(generateChunk(['event: conversation', `data: ${JSON.stringify({\n        id: CONVERSATION_ID\n      })}`, 'event: message', `data: ${JSON.stringify({\n        ...humanMessage,\n        content: 'Create a comprehensive analysis plan'\n      })}`, 'event: message', `data: ${JSON.stringify(planningMessage)}`])))\n    }\n  });\n  const {\n    setConversationId\n  } = useActions(maxLogic({\n    tabId: 'storybook'\n  }));\n  const threadLogic = maxThreadLogic({\n    conversationId: CONVERSATION_ID,\n    conversation: null,\n    tabId: 'storybook'\n  });\n  const {\n    askMax\n  } = useActions(threadLogic);\n  const {\n    dataProcessingAccepted\n  } = useValues(maxGlobalLogic);\n  useEffect(() => {\n    if (dataProcessingAccepted) {\n      setTimeout(() => {\n        setConversationId(CONVERSATION_ID);\n        askMax('Create a comprehensive analysis plan');\n      }, 0);\n    }\n  }, [dataProcessingAccepted, setConversationId, askMax]);\n  if (!dataProcessingAccepted) {\n    return <></>;\n  }\n  return <Template />;\n}",...PlanningComponent.parameters?.docs?.source}}},ReasoningComponent.parameters={...ReasoningComponent.parameters,docs:{...ReasoningComponent.parameters?.docs,source:{originalSource:"() => {\n  // Reasoning is now derived from AssistantMessage with meta.thinking\n  const reasoningMessage: AssistantMessage = {\n    type: AssistantMessageType.Assistant,\n    content: '',\n    id: 'reasoning-msg-1',\n    meta: {\n      thinking: [{\n        type: 'thinking',\n        thinking: '*Analyzing user behavior patterns...*'\n      }]\n    }\n  };\n  useStorybookMocks({\n    post: {\n      '/api/environments/:team_id/conversations/': (_, res, ctx) => res(ctx.text(generateChunk(['event: conversation', `data: ${JSON.stringify({\n        id: CONVERSATION_ID\n      })}`, 'event: message', `data: ${JSON.stringify({\n        ...humanMessage,\n        content: 'Analyze user engagement'\n      })}`, 'event: message', `data: ${JSON.stringify(reasoningMessage)}`])))\n    }\n  });\n  const {\n    setConversationId\n  } = useActions(maxLogic({\n    tabId: 'storybook'\n  }));\n  const threadLogic = maxThreadLogic({\n    conversationId: CONVERSATION_ID,\n    conversation: null,\n    tabId: 'storybook'\n  });\n  const {\n    askMax\n  } = useActions(threadLogic);\n  const {\n    dataProcessingAccepted\n  } = useValues(maxGlobalLogic);\n  useEffect(() => {\n    if (dataProcessingAccepted) {\n      setTimeout(() => {\n        setConversationId(CONVERSATION_ID);\n        askMax('Analyze user engagement');\n      }, 0);\n    }\n  }, [dataProcessingAccepted, setConversationId, askMax]);\n  if (!dataProcessingAccepted) {\n    return <></>;\n  }\n  return <Template />;\n}",...ReasoningComponent.parameters?.docs?.source}}},TaskExecutionComponent.parameters={...TaskExecutionComponent.parameters,docs:{...TaskExecutionComponent.parameters?.docs,source:{originalSource:"() => {\n  // Task execution is now derived from AssistantMessage with regular tool calls\n  const taskExecutionMessage: AssistantMessage = {\n    type: AssistantMessageType.Assistant,\n    content: 'Executing analysis tasks...',\n    id: 'task-exec-msg-1',\n    tool_calls: [{\n      id: 'task_1',\n      name: 'create_and_query_insight',\n      type: 'tool_call',\n      args: {}\n    }, {\n      id: 'task_2',\n      name: 'create_and_query_insight',\n      type: 'tool_call',\n      args: {\n        commentary: 'Identifying peak usage times and user segments'\n      }\n    }, {\n      id: 'task_3',\n      name: 'search',\n      type: 'tool_call',\n      args: {\n        kind: 'insights'\n      }\n    }, {\n      id: 'task_4',\n      name: 'search',\n      type: 'tool_call',\n      args: {\n        kind: 'docs'\n      }\n    }, {\n      id: 'task_5',\n      name: 'create_and_query_insight',\n      type: 'tool_call',\n      args: {}\n    }],\n    meta: {\n      thinking: [{\n        thinking: 'Analyzing user engagement metrics...'\n      }]\n    }\n  };\n\n  // Tool call completion messages for the first two tasks\n  const toolCallCompletion1 = {\n    type: AssistantMessageType.ToolCall,\n    tool_call_id: 'task_1',\n    content: 'Successfully loaded user data for the last 30 days',\n    id: 'tool-completion-1'\n  };\n  const toolCallCompletion2 = {\n    type: AssistantMessageType.ToolCall,\n    tool_call_id: 'task_2',\n    content: 'Engagement pattern analysis completed',\n    id: 'tool-completion-2'\n  };\n  const updateMessages = [{\n    tool_call_id: 'task_3',\n    content: 'Fetching last 30 days of user activity',\n    id: 'task-exec-msg-1-1'\n  }, {\n    tool_call_id: 'task_3',\n    content: 'Data loaded successfully',\n    id: 'task-exec-msg-1-1'\n  }, {\n    tool_call_id: 'task_4',\n    content: 'Processing funnel metrics across key paths',\n    id: 'task-exec-msg-1-1'\n  }, {\n    tool_call_id: 'task_5',\n    content: 'Exploring data...',\n    id: 'task-exec-msg-1-1'\n  }];\n  useStorybookMocks({\n    post: {\n      '/api/environments/:team_id/conversations/': (_, res, ctx) => res(ctx.text(generateChunk(['event: conversation', `data: ${JSON.stringify({\n        id: 'in_progress'\n      })}`, 'event: message', `data: ${JSON.stringify({\n        ...humanMessage,\n        content: 'Execute analysis tasks'\n      })}`, 'event: message', `data: ${JSON.stringify(taskExecutionMessage)}`, 'event: message', `data: ${JSON.stringify(toolCallCompletion1)}`, 'event: message', `data: ${JSON.stringify(toolCallCompletion2)}`, 'event: update', `data: ${JSON.stringify(updateMessages[0])}`, 'event: update', `data: ${JSON.stringify(updateMessages[1])}`, 'event: update', `data: ${JSON.stringify(updateMessages[2])}`, 'event: update', `data: ${JSON.stringify(updateMessages[3])}`])))\n    },\n    get: {\n      '/api/environments/:team_id/conversations/in_progress/': (_req, _res, ctx) => [ctx.delay('infinite')]\n    }\n  });\n  const {\n    setConversationId\n  } = useActions(maxLogic({\n    tabId: 'storybook'\n  }));\n  const threadLogic: ReturnType<typeof maxThreadLogic> = maxThreadLogic({\n    conversationId: 'in_progress',\n    conversation: null,\n    tabId: 'storybook'\n  });\n  const {\n    askMax\n  } = useActions(threadLogic);\n  const {\n    dataProcessingAccepted\n  } = useValues(maxGlobalLogic);\n  useEffect(() => {\n    if (dataProcessingAccepted) {\n      setTimeout(() => {\n        askMax('Execute analysis tasks');\n        setConversationId('in_progress');\n      }, 0);\n    }\n  }, [dataProcessingAccepted, setConversationId, askMax]);\n  if (!dataProcessingAccepted) {\n    return <></>;\n  }\n  return <Template />;\n}",...TaskExecutionComponent.parameters?.docs?.source}}},TaskExecutionWithFailure.parameters={...TaskExecutionWithFailure.parameters,docs:{...TaskExecutionWithFailure.parameters?.docs,source:{originalSource:"() => {\n  // Task execution with failure - tool calls with failed status\n  const taskExecutionMessage: AssistantMessage = {\n    type: AssistantMessageType.Assistant,\n    content: 'Executing analysis with some failures...',\n    id: 'task-exec-fail-msg-1',\n    tool_calls: [{\n      id: 'task_1',\n      name: 'search',\n      type: 'tool_call',\n      args: {\n        kind: 'insights'\n      }\n    }, {\n      id: 'task_2',\n      name: 'search',\n      type: 'tool_call',\n      args: {\n        kind: 'insights'\n      }\n    }, {\n      id: 'task_3',\n      name: 'create_and_query_insight',\n      type: 'tool_call',\n      args: {}\n    }, {\n      id: 'task_4',\n      name: 'create_and_query_insight',\n      type: 'tool_call',\n      args: {}\n    }, {\n      id: 'task_5',\n      name: 'create_and_query_insight',\n      type: 'tool_call',\n      args: {}\n    }]\n  };\n\n  // Tool call completion messages - task 1 and 2 complete, task 3 fails\n  const toolCallCompletion1 = {\n    type: AssistantMessageType.ToolCall,\n    tool_call_id: 'task_1',\n    content: 'Successfully loaded user data',\n    id: 'tool-completion-fail-1'\n  };\n  const toolCallCompletion2 = {\n    type: AssistantMessageType.ToolCall,\n    tool_call_id: 'task_2',\n    content: 'Engagement patterns analyzed',\n    id: 'tool-completion-fail-2'\n  };\n  const toolCallCompletion3 = {\n    type: AssistantMessageType.ToolCall,\n    tool_call_id: 'task_3',\n    content: 'Failed to calculate conversion rates due to insufficient data',\n    id: 'tool-completion-fail-3'\n  };\n  useStorybookMocks({\n    post: {\n      '/api/environments/:team_id/conversations/': (_, res, ctx) => res(ctx.text(generateChunk(['event: conversation', `data: ${JSON.stringify({\n        id: CONVERSATION_ID\n      })}`, 'event: message', `data: ${JSON.stringify({\n        ...humanMessage,\n        content: 'Execute analysis with some failures'\n      })}`, 'event: message', `data: ${JSON.stringify(taskExecutionMessage)}`, 'event: message', `data: ${JSON.stringify(toolCallCompletion1)}`, 'event: message', `data: ${JSON.stringify(toolCallCompletion2)}`, 'event: message', `data: ${JSON.stringify(toolCallCompletion3)}`])))\n    }\n  });\n  const {\n    setConversationId\n  } = useActions(maxLogic({\n    tabId: 'storybook'\n  }));\n  const threadLogic = maxThreadLogic({\n    conversationId: CONVERSATION_ID,\n    conversation: null,\n    tabId: 'storybook'\n  });\n  const {\n    askMax\n  } = useActions(threadLogic);\n  const {\n    dataProcessingAccepted\n  } = useValues(maxGlobalLogic);\n  useEffect(() => {\n    if (dataProcessingAccepted) {\n      setTimeout(() => {\n        setConversationId(CONVERSATION_ID);\n        askMax('Execute analysis with some failures');\n      }, 0);\n    }\n  }, [dataProcessingAccepted, setConversationId, askMax]);\n  if (!dataProcessingAccepted) {\n    return <></>;\n  }\n  return <Template />;\n}",...TaskExecutionWithFailure.parameters?.docs?.source}}},MultiVisualizationInThread.parameters={...MultiVisualizationInThread.parameters,docs:{...MultiVisualizationInThread.parameters?.docs,source:{originalSource:"() => {\n  // Mock the queries endpoint to return dummy data\n  useStorybookMocks({\n    post: {\n      '/api/environments/:team_id/query/': () => [200, {\n        results: [[100, 120, 130, 140, 150]],\n        columns: ['count'],\n        types: ['integer'],\n        hogql: 'SELECT count() FROM events'\n      }],\n      '/api/environments/:team_id/conversations/': (_, res, ctx) => {\n        const humanMsg = {\n          type: AssistantMessageType.Human,\n          content: 'Analyze our product metrics comprehensively',\n          id: 'human-multi-viz'\n        };\n        const multiVizMessage: MultiVisualizationMessage = {\n          type: AssistantMessageType.MultiVisualization,\n          id: 'multi-viz-1',\n          visualizations: [{\n            query: 'Daily Active Users',\n            plan: 'Track user engagement over the past 30 days',\n            answer: {\n              kind: 'TrendsQuery',\n              series: [{\n                event: '$pageview',\n                name: 'Pageviews'\n              }],\n              dateRange: {\n                date_from: '-30d'\n              }\n            } as any\n          }, {\n            query: 'User Conversion Funnel',\n            plan: 'Analyze conversion from signup to purchase',\n            answer: {\n              kind: 'FunnelsQuery',\n              series: [{\n                event: 'user signed up'\n              }, {\n                event: 'viewed product'\n              }, {\n                event: 'completed purchase'\n              }]\n            } as any\n          }, {\n            query: 'Feature Adoption',\n            plan: 'Measure feature usage rates',\n            answer: {\n              kind: 'TrendsQuery',\n              series: [{\n                event: 'feature_used',\n                name: 'Feature Usage'\n              }],\n              breakdownFilter: {\n                breakdown: 'feature_name',\n                breakdown_type: 'event'\n              }\n            } as any\n          }],\n          commentary: `I've analyzed your product metrics across three key dimensions:\n\n1. **User Engagement**: Daily active users show a positive trend with 25% growth\n2. **Conversion Funnel**: 40% drop-off at payment step needs attention\n3. **Feature Adoption**: New dashboard feature has 65% adoption rate\n\n### Recommendations\n- Optimize the payment flow to reduce friction\n- Continue current engagement strategies\n- Apply dashboard rollout strategy to future features`\n        };\n        return res(ctx.text(generateChunk(['event: conversation', `data: ${JSON.stringify({\n          id: CONVERSATION_ID\n        })}`, 'event: message', `data: ${JSON.stringify({\n          ...humanMsg,\n          content: 'Analyze our product metrics comprehensively'\n        })}`, 'event: message', `data: ${JSON.stringify(multiVizMessage)}`])));\n      }\n    }\n  });\n  const {\n    setConversationId\n  } = useActions(maxLogic({\n    tabId: 'storybook'\n  }));\n  const threadLogic = maxThreadLogic({\n    conversationId: CONVERSATION_ID,\n    conversation: null,\n    tabId: 'storybook'\n  });\n  const {\n    askMax\n  } = useActions(threadLogic);\n  const {\n    dataProcessingAccepted\n  } = useValues(maxGlobalLogic);\n  useEffect(() => {\n    if (dataProcessingAccepted) {\n      setTimeout(() => {\n        setConversationId(CONVERSATION_ID);\n        askMax('Analyze our product metrics comprehensively');\n      }, 0);\n    }\n  }, [dataProcessingAccepted, setConversationId, askMax]);\n  if (!dataProcessingAccepted) {\n    return <></>;\n  }\n  return <Template />;\n}",...MultiVisualizationInThread.parameters?.docs?.source}}};let __namedExportsOrder=["Welcome","WelcomeFeaturePreviewAutoEnrolled","Thread","EmptyThreadLoading","GenerationFailureThread","ThreadWithFailedGeneration","ThreadWithRateLimit","ThreadWithRateLimitNoRetryAfter","ThreadWithForm","ThreadWithConversationLoading","ThreadWithEmptyConversation","ThreadWithInProgressConversation","WelcomeWithLatestConversations","ChatHistory","ChatHistoryEmpty","ChatHistoryLoading","ThreadWithOpenedSuggestionsMobile","ThreadWithOpenedSuggestions","ThreadWithMultipleContextObjects","ThreadScrollsToBottomOnNewMessages","ChatWithUIContext","MaxInstanceWithContextualTools","NotebookUpdateComponent","PlanningComponent","ReasoningComponent","TaskExecutionComponent","TaskExecutionWithFailure","MultiVisualizationInThread"]}}]);
//# sourceMappingURL=scenes-max-Max-stories.c30baa0c.iframe.bundle.js.map