"use strict";(self.webpackChunkposthog=self.webpackChunkposthog||[]).push([[99387],{"./frontend/src/lib/components/PropertyIcon.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Browser_:()=>Browser_,Country_:()=>Country_,Default_:()=>Default_,DeviceType_:()=>DeviceType_,OS_:()=>OS_,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var lib_components_PropertyIcon__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./frontend/src/lib/components/PropertyIcon.tsx"),lib_lemon_ui_LemonTable__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./frontend/src/lib/lemon-ui/LemonTable/index.ts"),scenes_insights_views_WorldMap__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./frontend/src/scenes/insights/views/WorldMap/index.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");let meta={title:"Lemon UI/Icons/Property Icon",component:lib_components_PropertyIcon__WEBPACK_IMPORTED_MODULE_0__.V,tags:["autodocs","test-skip"]},__WEBPACK_DEFAULT_EXPORT__=meta,Template=args=>{if(args.value)return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(lib_components_PropertyIcon__WEBPACK_IMPORTED_MODULE_0__.V,{...args});let data=[...Object.keys("$geoip_country_code"===args.property?scenes_insights_views_WorldMap__WEBPACK_IMPORTED_MODULE_2__.XJ:lib_components_PropertyIcon__WEBPACK_IMPORTED_MODULE_0__.U[args.property]).map(value=>({value})),{value:"(unknown value)"},{value:void 0}];return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("code",{className:"font-bold",children:args.property}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(lib_lemon_ui_LemonTable__WEBPACK_IMPORTED_MODULE_1__.g,{className:"mt-4",dataSource:data,columns:[{title:"Value",key:"value",dataIndex:"value",render:function RenderValue(value){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("code",{children:value})}},{title:"Icon",key:"icon",render:function RenderIcon(_,_ref){let{value}=_ref;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(lib_components_PropertyIcon__WEBPACK_IMPORTED_MODULE_0__.V,{property:args.property,value:value})}}]})]})},Default_=Template.bind({});Default_.args={property:"$browser",value:"Chrome"};let Browser_=Template.bind({});Browser_.args={property:"$browser"};let DeviceType_=Template.bind({});DeviceType_.args={property:"$device_type"};let OS_=Template.bind({});OS_.args={property:"$os"};let Country_=Template.bind({});Country_.args={property:"$geoip_country_code"},Default_.parameters={...Default_.parameters,docs:{...Default_.parameters?.docs,source:{originalSource:"args => {\n  if (args.value) {\n    return <PropertyIcon {...args} />;\n  }\n  const data = [...Object.keys(args.property === '$geoip_country_code' ? countryCodeToName : PROPERTIES_ICON_MAP[args.property]).map(value => ({\n    value\n  })), {\n    value: '(unknown value)'\n  }, {\n    value: undefined\n  }];\n  return <>\n            <code className=\"font-bold\">{args.property}</code>\n            <LemonTable className=\"mt-4\" dataSource={data} columns={[{\n      title: 'Value',\n      key: 'value',\n      dataIndex: 'value',\n      render: function RenderValue(value) {\n        return <code>{(value as string)}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      render: function RenderIcon(_, {\n        value\n      }) {\n        return <PropertyIcon property={args.property} value={value} />;\n      }\n    }]} />\n        </>;\n}",...Default_.parameters?.docs?.source}}},Browser_.parameters={...Browser_.parameters,docs:{...Browser_.parameters?.docs,source:{originalSource:"args => {\n  if (args.value) {\n    return <PropertyIcon {...args} />;\n  }\n  const data = [...Object.keys(args.property === '$geoip_country_code' ? countryCodeToName : PROPERTIES_ICON_MAP[args.property]).map(value => ({\n    value\n  })), {\n    value: '(unknown value)'\n  }, {\n    value: undefined\n  }];\n  return <>\n            <code className=\"font-bold\">{args.property}</code>\n            <LemonTable className=\"mt-4\" dataSource={data} columns={[{\n      title: 'Value',\n      key: 'value',\n      dataIndex: 'value',\n      render: function RenderValue(value) {\n        return <code>{(value as string)}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      render: function RenderIcon(_, {\n        value\n      }) {\n        return <PropertyIcon property={args.property} value={value} />;\n      }\n    }]} />\n        </>;\n}",...Browser_.parameters?.docs?.source}}},DeviceType_.parameters={...DeviceType_.parameters,docs:{...DeviceType_.parameters?.docs,source:{originalSource:"args => {\n  if (args.value) {\n    return <PropertyIcon {...args} />;\n  }\n  const data = [...Object.keys(args.property === '$geoip_country_code' ? countryCodeToName : PROPERTIES_ICON_MAP[args.property]).map(value => ({\n    value\n  })), {\n    value: '(unknown value)'\n  }, {\n    value: undefined\n  }];\n  return <>\n            <code className=\"font-bold\">{args.property}</code>\n            <LemonTable className=\"mt-4\" dataSource={data} columns={[{\n      title: 'Value',\n      key: 'value',\n      dataIndex: 'value',\n      render: function RenderValue(value) {\n        return <code>{(value as string)}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      render: function RenderIcon(_, {\n        value\n      }) {\n        return <PropertyIcon property={args.property} value={value} />;\n      }\n    }]} />\n        </>;\n}",...DeviceType_.parameters?.docs?.source}}},OS_.parameters={...OS_.parameters,docs:{...OS_.parameters?.docs,source:{originalSource:"args => {\n  if (args.value) {\n    return <PropertyIcon {...args} />;\n  }\n  const data = [...Object.keys(args.property === '$geoip_country_code' ? countryCodeToName : PROPERTIES_ICON_MAP[args.property]).map(value => ({\n    value\n  })), {\n    value: '(unknown value)'\n  }, {\n    value: undefined\n  }];\n  return <>\n            <code className=\"font-bold\">{args.property}</code>\n            <LemonTable className=\"mt-4\" dataSource={data} columns={[{\n      title: 'Value',\n      key: 'value',\n      dataIndex: 'value',\n      render: function RenderValue(value) {\n        return <code>{(value as string)}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      render: function RenderIcon(_, {\n        value\n      }) {\n        return <PropertyIcon property={args.property} value={value} />;\n      }\n    }]} />\n        </>;\n}",...OS_.parameters?.docs?.source}}},Country_.parameters={...Country_.parameters,docs:{...Country_.parameters?.docs,source:{originalSource:"args => {\n  if (args.value) {\n    return <PropertyIcon {...args} />;\n  }\n  const data = [...Object.keys(args.property === '$geoip_country_code' ? countryCodeToName : PROPERTIES_ICON_MAP[args.property]).map(value => ({\n    value\n  })), {\n    value: '(unknown value)'\n  }, {\n    value: undefined\n  }];\n  return <>\n            <code className=\"font-bold\">{args.property}</code>\n            <LemonTable className=\"mt-4\" dataSource={data} columns={[{\n      title: 'Value',\n      key: 'value',\n      dataIndex: 'value',\n      render: function RenderValue(value) {\n        return <code>{(value as string)}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      render: function RenderIcon(_, {\n        value\n      }) {\n        return <PropertyIcon property={args.property} value={value} />;\n      }\n    }]} />\n        </>;\n}",...Country_.parameters?.docs?.source}}};let __namedExportsOrder=["Default_","Browser_","DeviceType_","OS_","Country_"]}}]);