"use strict";(self.webpackChunk_posthog_storybook=self.webpackChunk_posthog_storybook||[]).push([[96062],{"../../frontend/src/lib/components/EventSelect/EventSelect.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{EventSelect_:()=>EventSelect_,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),_mocks_browser__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../frontend/src/mocks/browser.tsx"),_EventSelect__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../frontend/src/lib/components/EventSelect/EventSelect.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");let eventDefinitions=[{id:"017cdbec-c38f-0000-1479-bc7b9e2b6c77",name:"$autocapture",description:""},{id:"017ce199-a10e-0000-6783-7167743302f4",name:"$capture_failed_request",description:""},{id:"017cdbee-0c77-0000-ecf1-bd5a9e253b92",name:"$capture_metrics",description:""}],__WEBPACK_DEFAULT_EXPORT__={title:"Filters",decorators:[(0,_mocks_browser__WEBPACK_IMPORTED_MODULE_1__.x8)({get:{"/api/projects/:team_id":{id:2},"/api/projects/:team_id/event_definitions":{count:eventDefinitions.length,next:null,previous:null,results:eventDefinitions}}})],parameters:{}};function EventSelect_(){let[selectedEvents,setSelectedEvents]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_EventSelect__WEBPACK_IMPORTED_MODULE_2__._,{selectedEvents:selectedEvents,onChange:setSelectedEvents,addElement:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("button",{children:"add events"})})}EventSelect_.parameters={...EventSelect_.parameters,docs:{...EventSelect_.parameters?.docs,source:{originalSource:"function EventSelect_(): JSX.Element {\n  const [selectedEvents, setSelectedEvents] = useState<string[]>([]);\n  return <EventSelect selectedEvents={selectedEvents} onChange={setSelectedEvents} addElement={<button>add events</button>} />;\n}",...EventSelect_.parameters?.docs?.source}}};let __namedExportsOrder=["EventSelect_"]}}]);