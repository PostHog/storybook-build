"use strict";(self.webpackChunkposthog=self.webpackChunkposthog||[]).push([[8334],{"./frontend/src/lib/lemon-ui/LemonSegmentedButton/LemonSegmentedButton.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,FullWidth:()=>FullWidth,Small:()=>Small,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),_icons__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./frontend/src/lib/lemon-ui/icons/index.ts"),_LemonSegmentedButton__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./frontend/src/lib/lemon-ui/LemonSegmentedButton/LemonSegmentedButton.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Lemon UI/Lemon Segmented Button",component:_LemonSegmentedButton__WEBPACK_IMPORTED_MODULE_2__.P,argTypes:{options:{control:{type:"object"}},value:{control:{disable:!0}},onChange:{control:{disable:!0}}},args:{options:[{value:"calendar",label:"Calendar",icon:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_icons__WEBPACK_IMPORTED_MODULE_1__.jt6,{})},{value:"calculator",label:"Calculator",icon:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_icons__WEBPACK_IMPORTED_MODULE_1__.X8Q,{})},{value:"banana",label:"Banana",icon:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_icons__WEBPACK_IMPORTED_MODULE_1__.cw9,{}),disabledReason:"Bananas are not allowed on these premises."},{value:"settings",label:"Settings",icon:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_icons__WEBPACK_IMPORTED_MODULE_1__.iCC,{})}]},tags:["autodocs"]},Template=props=>{const[value,setValue]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(props.options[1]?.value);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_LemonSegmentedButton__WEBPACK_IMPORTED_MODULE_2__.P,{...props,value,onChange:newValue=>setValue(newValue)})},Default=Template.bind({});Default.args={};const FullWidth=Template.bind({});FullWidth.args={fullWidth:!0};const Small=Template.bind({});Small.args={size:"small"},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"(props: Omit<LemonSegmentedButtonProps<any>, 'value' | 'onChange'>) => {\n  const [value, setValue] = useState(props.options[1]?.value);\n  return <LemonSegmentedButton {...props} value={value} onChange={newValue => setValue(newValue)} />;\n}",...Default.parameters?.docs?.source}}},FullWidth.parameters={...FullWidth.parameters,docs:{...FullWidth.parameters?.docs,source:{originalSource:"(props: Omit<LemonSegmentedButtonProps<any>, 'value' | 'onChange'>) => {\n  const [value, setValue] = useState(props.options[1]?.value);\n  return <LemonSegmentedButton {...props} value={value} onChange={newValue => setValue(newValue)} />;\n}",...FullWidth.parameters?.docs?.source}}},Small.parameters={...Small.parameters,docs:{...Small.parameters?.docs,source:{originalSource:"(props: Omit<LemonSegmentedButtonProps<any>, 'value' | 'onChange'>) => {\n  const [value, setValue] = useState(props.options[1]?.value);\n  return <LemonSegmentedButton {...props} value={value} onChange={newValue => setValue(newValue)} />;\n}",...Small.parameters?.docs?.source}}};const __namedExportsOrder=["Default","FullWidth","Small"]}}]);