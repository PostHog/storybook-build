(window.webpackJsonp=window.webpackJsonp||[]).push([[252],{6147:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"InsightRouter",(function(){return InsightRouter})),__webpack_require__.d(__webpack_exports__,"scene",(function(){return scene}));var skeleton=__webpack_require__(1194),card=__webpack_require__(5665),row=__webpack_require__(358),col=__webpack_require__(232),index_esm=__webpack_require__(1),NotFound=__webpack_require__(1689),react=__webpack_require__(0),react_default=__webpack_require__.n(react),defineProperty=(__webpack_require__(39),__webpack_require__(42),__webpack_require__(65),__webpack_require__(37),__webpack_require__(81),__webpack_require__(153),__webpack_require__(44),__webpack_require__(8)),defineProperty_default=__webpack_require__.n(defineProperty),regenerator=__webpack_require__(5),regenerator_default=__webpack_require__.n(regenerator),asyncToGenerator=(__webpack_require__(66),__webpack_require__(12)),asyncToGenerator_default=__webpack_require__.n(asyncToGenerator),api=__webpack_require__(21),teamLogic=__webpack_require__(29),eventUsageLogic=__webpack_require__(34),lib=__webpack_require__(20),cleanFilters=__webpack_require__(140),utils=__webpack_require__(11),adjectives=["furry","ferocious","dangerous","poisonous","tame","agile","clever","aggressive","tiny","domestic","wild","herbivorous","carnivorous","adorable","aggressive","agile","beautiful","bossy","candid","carnivorous","clever","cold","colorful","cuddly","curious","cute","dangerous","deadly","domestic","dominant","energetic","fast","feisty","ferocious","fierce","fluffy","friendly","furry","fuzzy","grumpy","hairy","heavy","herbivorous","jealous","large","lazy","loud","lovable","loving","malicious","maternal","mean","messy","nocturnal","noisy","nosy","picky","playful","poisonous","quick","rough","sassy","scaly","short","shy","slimy","slow","small","smart","smelly","soft","spikey","stinky","strong","stubborn","submissive","tall","tame","tenacious","territorial","tiny","vicious","warm","wild"],nouns=["aardvark","albatross","alligator","alpaca","ant","anteater","antelope","ape","armadillo","donkey","baboon","badger","barracuda","bat","bear","beaver","bee","bison","boar","buffalo","butterfly","camel","capybara","caribou","cassowary","cat","caterpillar","cattle","chamois","cheetah","chicken","chimpanzee","chinchilla","chough","clam","cobra","cockroach","cod","cormorant","coyote","crab","crane","crocodile","crow","curlew","deer","dinosaur","dog","dogfish","dolphin","dotterel","dove","dragonfly","duck","dugong","dunlin","eagle","echidna","eel","eland","elephant","elk","emu","falcon","ferret","finch","firefox","fish","flamingo","fly","fox","frog","gaur","gazelle","gerbil","giraffe","gnat","gnu","goat","goldfinch","goldfish","goose","gorilla","goshawk","grasshopper","grouse","guanaco","gull","hamster","hare","hawk","hedgehog","heron","herring","hippopotamus","hornet","horse","human","hummingbird","hyena","ibex","ibis","jackal","jaguar","jay","jellyfish","kangaroo","kingfisher","koala","kookabura","kouprey","kudu","lapwing","lark","lemur","leopard","lion","llama","lobster","locust","loris","louse","lyrebird","magpie","mallard","manatee","mandrill","mantis","marten","meerkat","mink","mole","mongoose","monkey","moose","mosquito","mouse","mule","narwhal","newt","nightingale","octopus","okapi","opossum","oryx","ostrich","otter","owl","oyster","panther","parrot","partridge","peafowl","pelican","penguin","pheasant","pig","pigeon","pony","porcupine","porpoise","quail","quelea","quetzal","rabbit","raccoon","rail","ram","rat","raven","reindeer","rhinoceros","rook","salamander","salmon","sandpiper","sardine","scorpion","seahorse","seal","shark","sheep","shrew","skunk","snail","snake","sparrow","spider","spoonbill","squid","squirrel","starling","stingray","stinkbug","stork","swallow","swan","tapir","tarsier","termite","tiger","toad","trout","turkey","turtle","viper","vulture","wallaby","walrus","wasp","weasel","whale","wildcat","wolf","wolverine","wombat","woodcock","woodpecker","worm","wren","yak","zebra"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){defineProperty_default()(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}var insightRouterLogic=Object(index_esm.kea)({path:["scenes","insights","insightRouterLogic"],actions:{loadInsight:function loadInsight(id){return{id:id}},setError:!0,createInsight:function createInsight(insight){return{insight:insight}}},reducers:{error:[!1,{setError:function setError(){return!0}}]},listeners:function listeners(_ref){var _createInsight,_loadInsight,actions=_ref.actions;return{loadInsight:(_loadInsight=asyncToGenerator_default()(regenerator_default.a.mark((function _callee(_ref2){var id,response,item;return regenerator_default.a.wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:return id=_ref2.id,_context.next=3,api.a.get("api/projects/".concat(teamLogic.a.values.currentTeamId,"/insights/?short_id=").concat(id));case 3:(response=_context.sent).results.length?(item=response.results[0],eventUsageLogic.e.actions.reportInsightShortUrlVisited(!0,item.filters.insight||null),lib.router.actions.replace(Object(lib.combineUrl)("/insights",item.filters,{fromItem:item.id,fromItemName:item.name,fromDashboard:item.dashboard,id:item.short_id}).url)):(eventUsageLogic.e.actions.reportInsightShortUrlVisited(!1,null),actions.setError());case 5:case"end":return _context.stop()}}),_callee)}))),function loadInsight(_x){return _loadInsight.apply(this,arguments)}),createInsight:(_createInsight=asyncToGenerator_default()(regenerator_default.a.mark((function _callee2(_ref3,breakpoint){var insight,newInsight,createdInsight;return regenerator_default.a.wrap((function _callee2$(_context2){for(;;)switch(_context2.prev=_context2.next){case 0:return insight=_ref3.insight,newInsight=_objectSpread({name:"".concat(Object(utils.h)(Object(utils.ib)(adjectives))," ").concat(Object(utils.h)(Object(utils.ib)(nouns))),description:"",tags:[],filters:{},result:null},insight),_context2.next=4,api.a.create("api/projects/".concat(teamLogic.a.values.currentTeamId,"/insights"),newInsight);case 4:createdInsight=_context2.sent,breakpoint(),lib.router.actions.replace("/insights",createdInsight.filters,_objectSpread(_objectSpread({},lib.router.values.hashParams),{},{edit:!0,fromItem:createdInsight.id}));case 7:case"end":return _context2.stop()}}),_callee2)}))),function createInsight(_x2,_x3){return _createInsight.apply(this,arguments)})}},urlToAction:function urlToAction(_ref4){var actions=_ref4.actions;return{"/i/:id":function iId(_ref5){var id=_ref5.id;id&&actions.loadInsight(id)},"/insights/new":function insightsNew(_,searchParams){actions.createInsight({filters:Object(cleanFilters.a)(searchParams)})}}}});function InsightRouter(){var error=Object(index_esm.useValues)(insightRouterLogic).error;return react_default.a.createElement(react_default.a.Fragment,null,error?react_default.a.createElement(NotFound.a,{object:"insight"}):react_default.a.createElement(react_default.a.Fragment,null,react_default.a.createElement(skeleton.a,{active:!0,paragraph:{rows:0}}),react_default.a.createElement(card.a,null,react_default.a.createElement(row.a,{gutter:16},react_default.a.createElement(col.a,{md:18},react_default.a.createElement(skeleton.a,{active:!0})),react_default.a.createElement(col.a,{md:6,style:{textAlign:"center"}},react_default.a.createElement(skeleton.a,{active:!0,paragraph:{rows:0}}),react_default.a.createElement(skeleton.a,{active:!0,paragraph:{rows:0}}),react_default.a.createElement(skeleton.a,{active:!0,paragraph:{rows:0}})))),react_default.a.createElement(card.a,{style:{minHeight:600,marginTop:16}})))}var scene={component:InsightRouter,logic:insightRouterLogic}}}]);