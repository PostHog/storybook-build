{"version":3,"file":"45949.dce31a18.iframe.bundle.js","mappings":";AAsGA;AACA;AACA;AACA;AC9EA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@posthog/frontend/./frontend/src/scenes/experiments/MetricsView/DeltaChart.tsx","webpack://@posthog/frontend/./frontend/src/scenes/experiments/ExperimentCodeSnippets.tsx"],"sourcesContent":["import {\n    IconActivity,\n    IconArrowRight,\n    IconClock,\n    IconFunnels,\n    IconGraph,\n    IconMinus,\n    IconPencil,\n    IconTrending,\n} from '@posthog/icons'\nimport { LemonBanner, LemonButton, LemonModal, LemonTag, LemonTagType, Tooltip } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { LemonProgress } from 'lib/lemon-ui/LemonProgress'\nimport { humanFriendlyNumber } from 'lib/utils'\nimport { useEffect, useRef, useState } from 'react'\n\nimport { themeLogic } from '~/layout/navigation-3000/themeLogic'\nimport { InsightType, TrendExperimentVariant } from '~/types'\n\nimport { experimentLogic } from '../experimentLogic'\nimport { ExploreButton, ResultsQuery, VariantTag } from '../ExperimentView/components'\nimport { SignificanceText, WinningVariantText } from '../ExperimentView/Overview'\nimport { SummaryTable } from '../ExperimentView/SummaryTable'\nimport { NoResultEmptyState } from './NoResultEmptyState'\n\nfunction formatTickValue(value: number): string {\n    if (value === 0) {\n        return '0%'\n    }\n\n    // Determine number of decimal places needed\n    const absValue = Math.abs(value)\n    let decimals = 0\n\n    if (absValue < 0.01) {\n        decimals = 3\n    } else if (absValue < 0.1) {\n        decimals = 2\n    } else if (absValue < 1) {\n        decimals = 1\n    } else {\n        decimals = 0\n    }\n\n    return `${(value * 100).toFixed(decimals)}%`\n}\nconst getMetricTitle = (metric: any, metricType: InsightType): JSX.Element => {\n    if (metric.name) {\n        return <span className=\"truncate\">{metric.name}</span>\n    }\n\n    if (metricType === InsightType.TRENDS && metric.count_query?.series?.[0]?.name) {\n        return <span className=\"truncate\">{metric.count_query.series[0].name}</span>\n    }\n\n    if (metricType === InsightType.FUNNELS && metric.funnels_query?.series) {\n        const series = metric.funnels_query.series\n        if (series.length > 0) {\n            const firstStep = series[0]?.name\n            const lastStep = series[series.length - 1]?.name\n\n            return (\n                <span className=\"inline-flex items-center gap-1 min-w-0\">\n                    <IconFunnels className=\"text-secondary flex-shrink-0\" fontSize=\"14\" />\n                    <span className=\"truncate\">{firstStep}</span>\n                    <IconArrowRight className=\"text-secondary flex-shrink-0\" fontSize=\"14\" />\n                    <span className=\"truncate\">{lastStep}</span>\n                </span>\n            )\n        }\n    }\n\n    return <span className=\"text-secondary truncate\">Untitled metric</span>\n}\n\nfunction generateViolinPath(x1: number, x2: number, y: number, height: number): string {\n    // Create points for the violin curve\n    const points: [number, number][] = []\n    const steps = 20\n    const maxWidth = height / 2 // Use half the height as the maximum width to maintain proportions\n\n    // Generate top curve points\n    for (let i = 0; i <= steps; i++) {\n        const t = i / steps\n        const x = x1 + (x2 - x1) * t\n        // Using a normal distribution approximation\n        const width = Math.exp(-Math.pow((t - 0.5) * 3, 2)) * maxWidth\n        points.push([x, y + height / 2 - width])\n    }\n\n    // Generate bottom curve points (mirror of top)\n    for (let i = steps; i >= 0; i--) {\n        const t = i / steps\n        const x = x1 + (x2 - x1) * t\n        const width = Math.exp(-Math.pow((t - 0.5) * 3, 2)) * maxWidth\n        points.push([x, y + height / 2 + width])\n    }\n\n    // Create SVG path\n    return `\n        M ${points[0][0]} ${points[0][1]}\n        ${points.map((point) => `L ${point[0]} ${point[1]}`).join(' ')}\n        Z\n    `\n}\n\nexport function DeltaChart({\n    isSecondary,\n    result,\n    error,\n    variants,\n    metricType,\n    metricIndex,\n    isFirstMetric,\n    metric,\n    tickValues,\n    chartBound,\n}: {\n    isSecondary: boolean\n    result: any\n    error: any\n    variants: any[]\n    metricType: InsightType\n    metricIndex: number\n    isFirstMetric: boolean\n    metric: any\n    tickValues: number[]\n    chartBound: number\n}): JSX.Element {\n    const {\n        credibleIntervalForVariant,\n        conversionRateForVariant,\n        experimentId,\n        experiment,\n        countDataForVariant,\n        exposureCountDataForVariant,\n        metricResultsLoading,\n        secondaryMetricResultsLoading,\n        featureFlags,\n        primaryMetricsLengthWithSharedMetrics,\n    } = useValues(experimentLogic)\n\n    const {\n        openPrimaryMetricModal,\n        openSecondaryMetricModal,\n        openPrimarySharedMetricModal,\n        openSecondarySharedMetricModal,\n        openVariantDeltaTimeseriesModal,\n    } = useActions(experimentLogic)\n    const [tooltipData, setTooltipData] = useState<{ x: number; y: number; variant: string } | null>(null)\n    const [emptyStateTooltipVisible, setEmptyStateTooltipVisible] = useState(true)\n    const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 })\n    const [isModalOpen, setIsModalOpen] = useState(false)\n\n    const getScaleAddition = (variantCount: number): number => {\n        if (variantCount < 3) {\n            return 6\n        }\n        if (variantCount < 4) {\n            return 3\n        }\n        if (variantCount < 5) {\n            return 1\n        }\n        return 0\n    }\n\n    const resultsLoading = isSecondary ? secondaryMetricResultsLoading : metricResultsLoading\n\n    const BAR_HEIGHT = 10 + getScaleAddition(variants.length)\n    const BAR_PADDING = 10 + getScaleAddition(variants.length)\n    const TICK_PANEL_HEIGHT = 20\n    const VIEW_BOX_WIDTH = 800\n    const HORIZONTAL_PADDING = 20\n    const CONVERSION_RATE_RECT_WIDTH = 2\n    const TICK_FONT_SIZE = 9\n    const CHART_MAX_WIDTH = 1000\n\n    const { isDarkModeOn } = useValues(themeLogic)\n    const COLORS = {\n        TICK_TEXT_COLOR: 'var(--text-tertiary)',\n        BOUNDARY_LINES: 'var(--border-primary)',\n        ZERO_LINE: 'var(--border-bold)',\n        BAR_NEGATIVE: isDarkModeOn ? '#c32f45' : '#f84257',\n        BAR_POSITIVE: isDarkModeOn ? '#12a461' : '#36cd6f',\n        BAR_DEFAULT: isDarkModeOn ? 'rgb(121 121 121)' : 'rgb(217 217 217)',\n        BAR_CONTROL: isDarkModeOn ? 'rgba(217, 217, 217, 0.2)' : 'rgba(217, 217, 217, 0.4)',\n        BAR_MIDDLE_POINT: 'black',\n        BAR_MIDDLE_POINT_CONTROL: 'rgba(0, 0, 0, 0.4)',\n    }\n\n    // Update chart height calculation to include only one BAR_PADDING for each space between bars\n    const chartHeight = BAR_PADDING + (BAR_HEIGHT + BAR_PADDING) * variants.length\n\n    const valueToX = (value: number): number => {\n        // Scale the value to fit within the padded area\n        const percentage = (value / chartBound + 1) / 2\n        return HORIZONTAL_PADDING + percentage * (VIEW_BOX_WIDTH - 2 * HORIZONTAL_PADDING)\n    }\n\n    const metricTitlePanelWidth = '20%'\n\n    const ticksSvgRef = useRef<SVGSVGElement>(null)\n    const chartSvgRef = useRef<SVGSVGElement>(null)\n    // :TRICKY: We need to track SVG heights dynamically because\n    // we're fitting regular divs to match SVG viewports. SVGs scale\n    // based on their viewBox and the viewport size, making it challenging\n    // to match their effective rendered heights with regular div elements.\n    const [ticksSvgHeight, setTicksSvgHeight] = useState<number>(0)\n    const [chartSvgHeight, setChartSvgHeight] = useState<number>(0)\n\n    useEffect(() => {\n        const ticksSvg = ticksSvgRef.current\n        const chartSvg = chartSvgRef.current\n\n        // eslint-disable-next-line compat/compat\n        const resizeObserver = new ResizeObserver((entries) => {\n            for (const entry of entries) {\n                if (entry.target === ticksSvg) {\n                    setTicksSvgHeight(entry.contentRect.height)\n                } else if (entry.target === chartSvg) {\n                    setChartSvgHeight(entry.contentRect.height)\n                }\n            }\n        })\n\n        if (ticksSvg) {\n            resizeObserver.observe(ticksSvg)\n        }\n        if (chartSvg) {\n            resizeObserver.observe(chartSvg)\n        }\n\n        return () => {\n            resizeObserver.disconnect()\n        }\n    }, [result])\n\n    return (\n        <div className=\"rounded bg-[var(--bg-table)]\">\n            {/* Metric title panel */}\n            {/* eslint-disable-next-line react/forbid-dom-props */}\n            <div style={{ width: metricTitlePanelWidth, verticalAlign: 'top', display: 'inline-block' }}>\n                {isFirstMetric && (\n                    <svg\n                        // eslint-disable-next-line react/forbid-dom-props\n                        style={{ height: `${ticksSvgHeight}px` }}\n                    />\n                )}\n                {isFirstMetric && <div className=\"w-full border-t border-border\" />}\n                <div\n                    // eslint-disable-next-line react/forbid-dom-props\n                    style={{ height: `${chartSvgHeight}px`, borderRight: `1px solid ${COLORS.BOUNDARY_LINES}` }}\n                    className=\"p-2 overflow-auto\"\n                >\n                    <div className=\"text-xs font-semibold whitespace-nowrap overflow-hidden\">\n                        <div className=\"space-y-1\">\n                            <div className=\"flex items-center gap-2\">\n                                <div className=\"cursor-default text-xs font-semibold whitespace-nowrap overflow-hidden text-ellipsis flex-grow flex items-center\">\n                                    <span className=\"mr-1\">{metricIndex + 1}.</span>\n                                    {getMetricTitle(metric, metricType)}\n                                </div>\n                                <LemonButton\n                                    className=\"flex-shrink-0\"\n                                    type=\"secondary\"\n                                    size=\"xsmall\"\n                                    icon={<IconPencil fontSize=\"12\" />}\n                                    onClick={() => {\n                                        if (metric.isSharedMetric) {\n                                            if (isSecondary) {\n                                                openSecondarySharedMetricModal(metric.sharedMetricId)\n                                            } else {\n                                                openPrimarySharedMetricModal(metric.sharedMetricId)\n                                            }\n                                            return\n                                        }\n                                        isSecondary\n                                            ? openSecondaryMetricModal(metricIndex)\n                                            : openPrimaryMetricModal(metricIndex)\n                                    }}\n                                />\n                            </div>\n                            <div className=\"space-x-1\">\n                                <LemonTag type=\"muted\" size=\"small\">\n                                    {metric.kind === 'ExperimentFunnelsQuery' ? 'Funnel' : 'Trend'}\n                                </LemonTag>\n                                {metric.isSharedMetric && (\n                                    <LemonTag type=\"option\" size=\"small\">\n                                        Shared\n                                    </LemonTag>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            {/* SVGs container */}\n            <div\n                // eslint-disable-next-line react/forbid-dom-props\n                style={{\n                    width: `calc(100% - ${metricTitlePanelWidth})`,\n                    verticalAlign: 'top',\n                    display: 'inline-block',\n                    minWidth: '780px',\n                }}\n            >\n                {/* Ticks */}\n                {isFirstMetric && (\n                    <div className=\"flex justify-center\">\n                        <svg\n                            ref={ticksSvgRef}\n                            viewBox={`0 0 ${VIEW_BOX_WIDTH} ${TICK_PANEL_HEIGHT}`}\n                            preserveAspectRatio=\"xMidYMid meet\"\n                            className={result ? 'ml-12' : undefined}\n                            // eslint-disable-next-line react/forbid-dom-props\n                            style={{ minHeight: `${TICK_PANEL_HEIGHT}px`, maxWidth: `${CHART_MAX_WIDTH}px` }}\n                        >\n                            {tickValues.map((value, index) => {\n                                const x = valueToX(value)\n                                return (\n                                    <g key={index}>\n                                        <text\n                                            x={x}\n                                            y={TICK_PANEL_HEIGHT / 2}\n                                            textAnchor=\"middle\"\n                                            dominantBaseline=\"middle\"\n                                            fontSize={TICK_FONT_SIZE}\n                                            fill={COLORS.TICK_TEXT_COLOR}\n                                            fontWeight=\"600\"\n                                        >\n                                            {formatTickValue(value)}\n                                        </text>\n                                    </g>\n                                )\n                            })}\n                        </svg>\n                    </div>\n                )}\n                {isFirstMetric && <div className=\"w-full border-t border-border\" />}\n                {/* Chart */}\n                {result ? (\n                    <div className=\"relative\">\n                        {/* Chart is z-index 100, so we need to be above it */}\n                        {/* eslint-disable-next-line react/forbid-dom-props */}\n                        <div className=\"absolute top-2 left-2\" style={{ zIndex: 102 }}>\n                            <SignificanceHighlight metricIndex={metricIndex} isSecondary={isSecondary} />\n                        </div>\n                        {(isSecondary || (!isSecondary && primaryMetricsLengthWithSharedMetrics > 1)) && (\n                            <div\n                                className=\"absolute bottom-2 left-2 flex justify-center bg-[var(--bg-table)]\"\n                                // Chart is z-index 100, so we need to be above it\n                                // eslint-disable-next-line react/forbid-dom-props\n                                style={{ zIndex: 101 }}\n                            >\n                                <LemonButton\n                                    type=\"secondary\"\n                                    size=\"xsmall\"\n                                    icon={<IconGraph />}\n                                    onClick={() => setIsModalOpen(true)}\n                                >\n                                    Details\n                                </LemonButton>\n                            </div>\n                        )}\n                        <div className=\"flex justify-center\">\n                            <svg\n                                ref={chartSvgRef}\n                                viewBox={`0 0 ${VIEW_BOX_WIDTH} ${chartHeight}`}\n                                preserveAspectRatio=\"xMidYMid meet\"\n                                className=\"ml-12\"\n                                // eslint-disable-next-line react/forbid-dom-props\n                                style={{ minHeight: `${chartHeight}px`, maxWidth: `${CHART_MAX_WIDTH}px` }}\n                            >\n                                {/* Vertical grid lines */}\n                                {tickValues.map((value, index) => {\n                                    const x = valueToX(value)\n                                    return (\n                                        <line\n                                            key={index}\n                                            x1={x}\n                                            y1={0}\n                                            x2={x}\n                                            y2={chartSvgHeight + 20}\n                                            stroke={value === 0 ? COLORS.ZERO_LINE : COLORS.BOUNDARY_LINES}\n                                            strokeWidth={value === 0 ? 1 : 0.5}\n                                        />\n                                    )\n                                })}\n\n                                {variants.map((variant, index) => {\n                                    const interval = credibleIntervalForVariant(result, variant.key, metricType)\n                                    const [lower, upper] = interval ? [interval[0] / 100, interval[1] / 100] : [0, 0]\n\n                                    let delta: number\n                                    if (metricType === InsightType.TRENDS) {\n                                        const controlVariant = result.variants.find(\n                                            (v: TrendExperimentVariant) => v.key === 'control'\n                                        ) as TrendExperimentVariant\n\n                                        const variantData = result.variants.find(\n                                            (v: TrendExperimentVariant) => v.key === variant.key\n                                        ) as TrendExperimentVariant\n\n                                        if (\n                                            !variantData?.count ||\n                                            !variantData?.absolute_exposure ||\n                                            !controlVariant?.count ||\n                                            !controlVariant?.absolute_exposure\n                                        ) {\n                                            delta = 0\n                                        } else {\n                                            const controlMean = controlVariant.count / controlVariant.absolute_exposure\n                                            const variantMean = variantData.count / variantData.absolute_exposure\n                                            delta = (variantMean - controlMean) / controlMean\n                                        }\n                                    } else {\n                                        const variantRate = conversionRateForVariant(result, variant.key)\n                                        const controlRate = conversionRateForVariant(result, 'control')\n                                        delta =\n                                            variantRate && controlRate ? (variantRate - controlRate) / controlRate : 0\n                                    }\n\n                                    const y = BAR_PADDING + (BAR_HEIGHT + BAR_PADDING) * index\n                                    const x1 = valueToX(lower)\n                                    const x2 = valueToX(upper)\n                                    const deltaX = valueToX(delta)\n\n                                    return (\n                                        <g\n                                            key={variant.key}\n                                            onMouseEnter={(e) => {\n                                                const rect = e.currentTarget.getBoundingClientRect()\n                                                setTooltipData({\n                                                    x: rect.left + rect.width / 2,\n                                                    y: rect.top - 10,\n                                                    variant: variant.key,\n                                                })\n                                            }}\n                                            onMouseLeave={() => setTooltipData(null)}\n                                            onClick={() => {\n                                                if (featureFlags[FEATURE_FLAGS.EXPERIMENT_INTERVAL_TIMESERIES]) {\n                                                    openVariantDeltaTimeseriesModal()\n                                                }\n                                            }}\n                                            className={\n                                                featureFlags[FEATURE_FLAGS.EXPERIMENT_INTERVAL_TIMESERIES]\n                                                    ? 'cursor-pointer'\n                                                    : ''\n                                            }\n                                        >\n                                            {/* Add variant name using VariantTag */}\n                                            <foreignObject\n                                                x={x1 - 8} // Keep same positioning as the text element\n                                                y={y + BAR_HEIGHT / 2 - 10}\n                                                width=\"90\"\n                                                height=\"16\"\n                                                transform=\"translate(-90, 0)\" // Move left to accommodate tag width\n                                            >\n                                                <VariantTag\n                                                    className=\"justify-end mt-0.5\"\n                                                    experimentId={experimentId}\n                                                    variantKey={variant.key}\n                                                    fontSize={10}\n                                                    muted\n                                                />\n                                            </foreignObject>\n\n                                            {variant.key === 'control' ? (\n                                                // Control variant - dashed violin\n                                                <path\n                                                    d={generateViolinPath(x1, x2, y, BAR_HEIGHT)}\n                                                    fill={COLORS.BAR_CONTROL}\n                                                    stroke={COLORS.BOUNDARY_LINES}\n                                                    strokeWidth={1}\n                                                    strokeDasharray=\"2,2\"\n                                                />\n                                            ) : (\n                                                // Test variants - single violin with gradient fill\n                                                <>\n                                                    <defs>\n                                                        <linearGradient\n                                                            id={`gradient-${metricIndex}-${variant.key}-${\n                                                                isSecondary ? 'secondary' : 'primary'\n                                                            }`}\n                                                            x1=\"0\"\n                                                            x2=\"1\"\n                                                            y1=\"0\"\n                                                            y2=\"0\"\n                                                        >\n                                                            {lower < 0 && upper > 0 ? (\n                                                                <>\n                                                                    <stop offset=\"0%\" stopColor={COLORS.BAR_NEGATIVE} />\n                                                                    <stop\n                                                                        offset={`${(-lower / (upper - lower)) * 100}%`}\n                                                                        stopColor={COLORS.BAR_NEGATIVE}\n                                                                    />\n                                                                    <stop\n                                                                        offset={`${(-lower / (upper - lower)) * 100}%`}\n                                                                        stopColor={COLORS.BAR_POSITIVE}\n                                                                    />\n                                                                    <stop\n                                                                        offset=\"100%\"\n                                                                        stopColor={COLORS.BAR_POSITIVE}\n                                                                    />\n                                                                </>\n                                                            ) : (\n                                                                <stop\n                                                                    offset=\"100%\"\n                                                                    stopColor={\n                                                                        upper <= 0\n                                                                            ? COLORS.BAR_NEGATIVE\n                                                                            : COLORS.BAR_POSITIVE\n                                                                    }\n                                                                />\n                                                            )}\n                                                        </linearGradient>\n                                                    </defs>\n                                                    <path\n                                                        d={generateViolinPath(x1, x2, y, BAR_HEIGHT)}\n                                                        fill={`url(#gradient-${metricIndex}-${variant.key}-${\n                                                            isSecondary ? 'secondary' : 'primary'\n                                                        })`}\n                                                    />\n                                                </>\n                                            )}\n                                            {/* Delta marker */}\n                                            <g transform={`translate(${deltaX}, 0)`}>\n                                                <line\n                                                    x1={0}\n                                                    y1={y}\n                                                    x2={0}\n                                                    y2={y + BAR_HEIGHT}\n                                                    stroke={\n                                                        variant.key === 'control'\n                                                            ? COLORS.BAR_MIDDLE_POINT_CONTROL\n                                                            : COLORS.BAR_MIDDLE_POINT\n                                                    }\n                                                    strokeWidth={CONVERSION_RATE_RECT_WIDTH}\n                                                    vectorEffect=\"non-scaling-stroke\"\n                                                    shapeRendering=\"crispEdges\"\n                                                />\n                                            </g>\n                                        </g>\n                                    )\n                                })}\n                            </svg>\n                        </div>\n                    </div>\n                ) : resultsLoading ? (\n                    <svg\n                        ref={chartSvgRef}\n                        viewBox={`0 0 ${VIEW_BOX_WIDTH} ${chartHeight}`}\n                        preserveAspectRatio=\"xMidYMid meet\"\n                    >\n                        <foreignObject\n                            x={VIEW_BOX_WIDTH / 2 - 100} // Center the 200px wide container\n                            y={chartHeight / 2 - 10} // Roughly center vertically\n                            width=\"200\"\n                            height=\"20\"\n                        >\n                            <div\n                                className=\"flex items-center justify-center text-secondary cursor-default\"\n                                // eslint-disable-next-line react/forbid-dom-props\n                                style={{ fontSize: '10px', fontWeight: 400 }}\n                            >\n                                <span>Results loading&hellip;</span>\n                            </div>\n                        </foreignObject>\n                    </svg>\n                ) : (\n                    <svg\n                        ref={chartSvgRef}\n                        viewBox={`0 0 ${VIEW_BOX_WIDTH} ${chartHeight}`}\n                        preserveAspectRatio=\"xMidYMid meet\"\n                    >\n                        {!experiment.start_date ? (\n                            <foreignObject x=\"0\" y={chartHeight / 2 - 10} width={VIEW_BOX_WIDTH} height=\"20\">\n                                <div\n                                    className=\"flex items-center ml-2 xl:ml-0 xl:justify-center text-secondary cursor-default\"\n                                    // eslint-disable-next-line react/forbid-dom-props\n                                    style={{ fontSize: '10px', fontWeight: 400 }}\n                                >\n                                    <LemonTag size=\"small\" className=\"mr-2\">\n                                        <IconClock fontSize=\"1em\" />\n                                    </LemonTag>\n                                    <span>Waiting for experiment to start&hellip;</span>\n                                </div>\n                            </foreignObject>\n                        ) : (\n                            <foreignObject\n                                x={0}\n                                y={chartHeight / 2 - 10}\n                                width={VIEW_BOX_WIDTH}\n                                height=\"20\"\n                                onMouseEnter={(e) => {\n                                    const rect = e.currentTarget.getBoundingClientRect()\n                                    setTooltipPosition({\n                                        x: rect.left + rect.width / 2,\n                                        y: rect.top,\n                                    })\n                                    setEmptyStateTooltipVisible(true)\n                                }}\n                                onMouseLeave={() => setEmptyStateTooltipVisible(false)}\n                            >\n                                <div\n                                    className=\"flex items-center ml-2 xl:ml-0 xl:justify-center text-secondary cursor-default\"\n                                    // eslint-disable-next-line react/forbid-dom-props\n                                    style={{ fontSize: '10px', fontWeight: 400 }}\n                                >\n                                    {error?.hasDiagnostics ? (\n                                        <LemonTag size=\"small\" type=\"highlight\" className=\"mr-2\">\n                                            <IconActivity className=\"mr-1\" fontSize=\"1em\" />\n                                            <span className=\"font-semibold\">\n                                                {(() => {\n                                                    try {\n                                                        return Object.values(error.detail).filter((v) => v === false)\n                                                            .length\n                                                    } catch {\n                                                        return '0'\n                                                    }\n                                                })()}\n                                            </span>\n                                            /\n                                            <span className=\"font-semibold\">\n                                                {metricType === InsightType.TRENDS ? '3' : '2'}\n                                            </span>\n                                        </LemonTag>\n                                    ) : (\n                                        <LemonTag size=\"small\" type=\"danger\" className=\"mr-1\">\n                                            Error\n                                        </LemonTag>\n                                    )}\n                                    <span>Results not yet available</span>\n                                </div>\n                            </foreignObject>\n                        )}\n                    </svg>\n                )}\n\n                {/* Variant result tooltip */}\n                {tooltipData && (\n                    <div\n                        // eslint-disable-next-line react/forbid-dom-props\n                        style={{\n                            position: 'fixed',\n                            left: tooltipData.x,\n                            top: tooltipData.y,\n                            transform: 'translate(-50%, -100%)',\n                            backgroundColor: 'var(--bg-surface-primary)',\n                            border: '1px solid var(--border-primary)',\n                            padding: '8px 12px',\n                            borderRadius: '6px',\n                            fontSize: '13px',\n                            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)',\n                            pointerEvents: 'none',\n                            zIndex: 100,\n                            minWidth: '300px',\n                        }}\n                    >\n                        <div className=\"flex flex-col gap-1\">\n                            <VariantTag experimentId={experimentId} variantKey={tooltipData.variant} />\n                            <div className=\"inline-flex\">\n                                <span className=\"text-secondary font-semibold mb-1\">Win probability:</span>\n                                {result?.probability?.[tooltipData.variant] !== undefined ? (\n                                    <span className=\"flex items-center justify-between flex-1 pl-6\">\n                                        <LemonProgress\n                                            className=\"w-3/4 mr-4\"\n                                            percent={result.probability[tooltipData.variant] * 100}\n                                        />\n                                        <span className=\"font-semibold\">\n                                            {(result.probability[tooltipData.variant] * 100).toFixed(2)}%\n                                        </span>\n                                    </span>\n                                ) : (\n                                    '—'\n                                )}\n                            </div>\n                            {metricType === InsightType.TRENDS ? (\n                                <>\n                                    <div className=\"flex justify-between items-center\">\n                                        <span className=\"text-secondary font-semibold\">\n                                            {metricType === InsightType.TRENDS &&\n                                            result.exposure_query?.series?.[0]?.math\n                                                ? 'Total'\n                                                : 'Count'}\n                                            :\n                                        </span>\n                                        <span className=\"font-semibold\">\n                                            {(() => {\n                                                const count = countDataForVariant(result, tooltipData.variant)\n                                                return count !== null ? humanFriendlyNumber(count) : '—'\n                                            })()}\n                                        </span>\n                                    </div>\n                                    <div className=\"flex justify-between items-center\">\n                                        <span className=\"text-secondary font-semibold\">Exposure:</span>\n                                        <span className=\"font-semibold\">\n                                            {(() => {\n                                                const exposure = exposureCountDataForVariant(\n                                                    result,\n                                                    tooltipData.variant\n                                                )\n                                                return exposure !== null ? humanFriendlyNumber(exposure) : '—'\n                                            })()}\n                                        </span>\n                                    </div>\n                                    <div className=\"flex justify-between items-center\">\n                                        <span className=\"text-secondary font-semibold\">Mean:</span>\n                                        <span className=\"font-semibold\">\n                                            {(() => {\n                                                const variant = result.variants.find(\n                                                    (v: TrendExperimentVariant) => v.key === tooltipData.variant\n                                                )\n                                                return variant?.count && variant?.absolute_exposure\n                                                    ? (variant.count / variant.absolute_exposure).toFixed(2)\n                                                    : '—'\n                                            })()}\n                                        </span>\n                                    </div>\n                                </>\n                            ) : (\n                                <div className=\"flex justify-between items-center\">\n                                    <span className=\"text-secondary font-semibold\">Conversion rate:</span>\n                                    <span className=\"font-semibold\">\n                                        {conversionRateForVariant(result, tooltipData.variant)?.toFixed(2)}%\n                                    </span>\n                                </div>\n                            )}\n                            <div className=\"flex justify-between items-center\">\n                                <span className=\"text-secondary font-semibold\">Delta:</span>\n                                <span className=\"font-semibold\">\n                                    {tooltipData.variant === 'control' ? (\n                                        <em className=\"text-secondary\">Baseline</em>\n                                    ) : (\n                                        (() => {\n                                            if (metricType === InsightType.TRENDS) {\n                                                const controlVariant = result.variants.find(\n                                                    (v: TrendExperimentVariant) => v.key === 'control'\n                                                )\n                                                const variant = result.variants.find(\n                                                    (v: TrendExperimentVariant) => v.key === tooltipData.variant\n                                                )\n\n                                                if (\n                                                    !variant?.count ||\n                                                    !variant?.absolute_exposure ||\n                                                    !controlVariant?.count ||\n                                                    !controlVariant?.absolute_exposure\n                                                ) {\n                                                    return '—'\n                                                }\n\n                                                const controlMean =\n                                                    controlVariant.count / controlVariant.absolute_exposure\n                                                const variantMean = variant.count / variant.absolute_exposure\n                                                const delta = (variantMean - controlMean) / controlMean\n                                                return delta ? (\n                                                    <span className={delta > 0 ? 'text-success' : 'text-danger'}>\n                                                        {`${delta > 0 ? '+' : ''}${(delta * 100).toFixed(2)}%`}\n                                                    </span>\n                                                ) : (\n                                                    '—'\n                                                )\n                                            }\n\n                                            const variantRate = conversionRateForVariant(result, tooltipData.variant)\n                                            const controlRate = conversionRateForVariant(result, 'control')\n                                            const delta =\n                                                variantRate && controlRate\n                                                    ? (variantRate - controlRate) / controlRate\n                                                    : 0\n                                            return delta ? (\n                                                <span className={delta > 0 ? 'text-success' : 'text-danger'}>\n                                                    {`${delta > 0 ? '+' : ''}${(delta * 100).toFixed(2)}%`}\n                                                </span>\n                                            ) : (\n                                                '—'\n                                            )\n                                        })()\n                                    )}\n                                </span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                                <span className=\"text-secondary font-semibold\">Credible interval:</span>\n                                <span className=\"font-semibold\">\n                                    {(() => {\n                                        const interval = credibleIntervalForVariant(\n                                            result,\n                                            tooltipData.variant,\n                                            metricType\n                                        )\n                                        const [lower, upper] = interval\n                                            ? [interval[0] / 100, interval[1] / 100]\n                                            : [0, 0]\n                                        return `[${lower > 0 ? '+' : ''}${(lower * 100).toFixed(2)}%, ${\n                                            upper > 0 ? '+' : ''\n                                        }${(upper * 100).toFixed(2)}%]`\n                                    })()}\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                )}\n\n                {/* Empty state tooltip */}\n                {emptyStateTooltipVisible && (\n                    <div\n                        // eslint-disable-next-line react/forbid-dom-props\n                        style={{\n                            position: 'fixed',\n                            left: tooltipPosition.x,\n                            top: tooltipPosition.y,\n                            transform: 'translate(-50%, -100%)',\n                            backgroundColor: 'var(--bg-surface-primary)',\n                            border: '1px solid var(--border-primary)',\n                            padding: '8px 12px',\n                            borderRadius: '6px',\n                            fontSize: '13px',\n                            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)',\n                            zIndex: 100,\n                            minWidth: '200px',\n                        }}\n                        onMouseEnter={() => setEmptyStateTooltipVisible(true)}\n                        onMouseLeave={() => setEmptyStateTooltipVisible(false)}\n                    >\n                        <NoResultEmptyState error={error} metric={metric} />\n                    </div>\n                )}\n            </div>\n\n            <LemonModal\n                isOpen={isModalOpen}\n                onClose={() => setIsModalOpen(false)}\n                width={1200}\n                title={`Metric results: ${metric.name || 'Untitled metric'}`}\n                footer={\n                    <LemonButton\n                        form=\"secondary-metric-modal-form\"\n                        type=\"secondary\"\n                        onClick={() => setIsModalOpen(false)}\n                    >\n                        Close\n                    </LemonButton>\n                }\n            >\n                {/* TODO: Only show explore button if the metric is a trends or funnels query. Not supported yet with new query runner */}\n                {result && (result.kind === 'ExperimentTrendsQuery' || result.kind === 'ExperimentFunnelsQuery') && (\n                    <div className=\"flex justify-end\">\n                        <ExploreButton result={result} />\n                    </div>\n                )}\n                <LemonBanner type={result?.significant ? 'success' : 'info'} className=\"mb-4\">\n                    <div className=\"items-center inline-flex flex-wrap\">\n                        <WinningVariantText result={result} experimentId={experimentId} />\n                        <SignificanceText metricIndex={metricIndex} />\n                    </div>\n                </LemonBanner>\n                <SummaryTable metric={metric} metricIndex={metricIndex} isSecondary={isSecondary} />\n                {/* TODO: Only show results query if the metric is a trends or funnels query. Not supported yet with new query runner */}\n                {result && (result.kind === 'ExperimentTrendsQuery' || result.kind === 'ExperimentFunnelsQuery') && (\n                    <ResultsQuery result={result} showTable={true} />\n                )}\n            </LemonModal>\n        </div>\n    )\n}\n\nfunction SignificanceHighlight({\n    metricIndex = 0,\n    isSecondary = false,\n    className = '',\n}: {\n    metricIndex?: number\n    isSecondary?: boolean\n    className?: string\n}): JSX.Element {\n    const { isPrimaryMetricSignificant, isSecondaryMetricSignificant, significanceDetails } = useValues(experimentLogic)\n    const isSignificant = isSecondary\n        ? isSecondaryMetricSignificant(metricIndex)\n        : isPrimaryMetricSignificant(metricIndex)\n    const result: { color: LemonTagType; label: string } = isSignificant\n        ? { color: 'success', label: 'Significant' }\n        : { color: 'primary', label: 'Not significant' }\n\n    const inner = isSignificant ? (\n        <div className=\"bg-success-highlight text-success-light px-1.5 py-0.5 flex items-center gap-1 rounded border border-success-light\">\n            <IconTrending fontSize={20} fontWeight={600} />\n            <span className=\"text-xs font-semibold\">{result.label}</span>\n        </div>\n    ) : (\n        <div className=\"bg-warning-highlight text-warning-dark px-1.5 py-0.5 flex items-center gap-1 rounded border border-warning\">\n            <IconMinus fontSize={20} fontWeight={600} />\n            <span className=\"text-xs font-semibold\">{result.label}</span>\n        </div>\n    )\n\n    const details = significanceDetails(metricIndex)\n\n    return details ? (\n        <Tooltip title={details}>\n            <div\n                className={clsx({\n                    'cursor-default': true,\n                    'bg-[var(--bg-table)]': true,\n                    [className]: true,\n                })}\n            >\n                {inner}\n            </div>\n        </Tooltip>\n    ) : (\n        <div className={clsx({ 'bg-[var(--bg-table)]': true, [className]: true })}>{inner}</div>\n    )\n}\n","import { Link } from '@posthog/lemon-ui'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\n\nfunction ServerSideWarning(): JSX.Element {\n    return (\n        <div className=\"warning\">\n            <p>\n                <b>Warning:</b> Server side experiment metrics require you to manually send the feature flag\n                information.{' '}\n                <Link to=\"https://posthog.com/tutorials/experiments#step-2-sending-the-right-events\" target=\"_blank\">\n                    See this tutorial for more information.\n                </Link>\n            </p>\n        </div>\n    )\n}\n\ninterface SnippetProps {\n    flagKey: string\n    variant: string\n}\n\nexport function AndroidSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.Kotlin} wrap>\n                {`if (PostHog.getFeatureFlag(\"${flagKey}\") == \"${variant}\") {\n    // do something\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function IOSSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.Swift} wrap>\n                {`if (PostHogSDK.shared.getFeatureFlag(\"${flagKey}\") as? String == \"${variant}\") {\n    // do something\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function NodeJSSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.JavaScript} wrap>\n                {`const experimentFlagValue = await client.getFeatureFlag('${flagKey}', 'user distinct id')\n\nif (experimentFlagValue === '${variant}' ) {\n    // Do something differently for this user\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n            <ServerSideWarning />\n        </>\n    )\n}\n\nexport function JSSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <div>\n            <CodeSnippet language={Language.JavaScript} wrap>\n                {`if (posthog.getFeatureFlag('${flagKey}') === '${variant}') {\n    // Do something differently for this user\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n            <div className=\"mt-4 mb-1\">\n                <b>Test that it works</b>\n            </div>\n            <CodeSnippet language={Language.JavaScript} wrap>\n                {`posthog.featureFlags.overrideFeatureFlags({ flags: {'${flagKey}': '${variant}'} })`}\n            </CodeSnippet>\n        </div>\n    )\n}\n\nexport function ReactSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.JavaScript} wrap>\n                {`// You can either use the useFeatureFlagVariantKey hook,\n// or you can use the feature flags component - https://posthog.com/docs/libraries/react#feature-flags-react-component\n\n// Method one: using the useFeatureFlagVariantKey hook\nimport { useFeatureFlagVariantKey } from 'posthog-js/react'\n\nfunction App() {\n    const variant = useFeatureFlagVariantKey('${flagKey}')\n    if (variant === '${variant}') {\n        // do something\n    }\n}\n\n// Method two: using the feature flags component\nimport { PostHogFeature } from 'posthog-js/react'\n\nfunction App() {\n    return (\n        <PostHogFeature flag='${flagKey}' match='${variant}'>\n            <div>\n                {/* the component to show */}\n            </div>\n        </PostHogFeature>\n    )\n}\n\n// You can also test your code by overriding the feature flag:\nposthog.featureFlags.overrideFeatureFlags({ flags: {'${flagKey}': '${variant}'} })`}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function RNSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.JavaScript} wrap>\n                {`if (posthog.getFeatureFlag('${flagKey}') === '${variant}') {\n    // Do something differently for this user\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function PHPSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.PHP} wrap>\n                {`if (PostHog::getFeatureFlag('${flagKey}', 'user distinct id') == '${variant}') {\n    // Do something differently for this user\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n            <ServerSideWarning />\n        </>\n    )\n}\n\nexport function GolangSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.Go} wrap>\n                {`experimentFlagValue, err := client.GetFeatureFlag(\n                    FeatureFlagPayload{\n                        Key:        '${flagKey}',\n                        DistinctId: \"distinct-id\",\n                    })\n\nif (experimentFlagValue == '${variant}' ) {\n    // Do something differently for this user\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n            <ServerSideWarning />\n        </>\n    )\n}\n\nexport function FlutterSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    const clientSuffix = 'await Posthog().'\n    const flagFunction = 'getFeatureFlag'\n    const variantSuffix = ` == '${variant}'`\n\n    return (\n        <>\n            <CodeSnippet language={Language.Dart} wrap>\n                {`if (${clientSuffix}${flagFunction}('${flagKey}')${variantSuffix}) {\n  // Do something differently for this user\n} else {\n  // It's a good idea to let control variant always be the default behaviour,\n  // so if something goes wrong with flag evaluation, you don't break your app.\n}\n            `}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function RubySnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.Ruby} wrap>\n                {`experimentFlagValue = posthog.get_feature_flag('${flagKey}', 'user distinct id')\n\n\nif experimentFlagValue == '${variant}'\n    # Do something differently for this user\nelse\n    # It's a good idea to let control variant always be the default behaviour,\n    # so if something goes wrong with flag evaluation, you don't break your app.\nend\n`}\n            </CodeSnippet>\n            <ServerSideWarning />\n        </>\n    )\n}\n\nexport function PythonSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.Python} wrap>\n                {`experiment_flag_value = posthog.get_feature_flag(\"${flagKey}\", \"user_distinct_id\"):\n\nif experiment_flag_value == '${variant}':\n    # Do something differently for this user\nelse:\n    # It's a good idea to let control variant always be the default behaviour,\n    # so if something goes wrong with flag evaluation, you don't break your app.\n`}\n            </CodeSnippet>\n            <ServerSideWarning />\n        </>\n    )\n}\n"],"names":[],"sourceRoot":""}