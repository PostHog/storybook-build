{"version":3,"file":"scenes-max-Max-stories.a8823b13.iframe.bundle.js","mappings":";AAoCA;AAAA;AAAA","sources":["webpack://@posthog/storybook/../../frontend/src/scenes/max/__mocks__/chatResponse.mocks.ts"],"sourcesContent":["import {\n    AssistantGenerationStatusEvent,\n    AssistantGenerationStatusType,\n    AssistantMessage,\n    AssistantMessageType,\n    HumanMessage,\n    ReasoningMessage,\n} from '~/queries/schema/schema-assistant-messages'\n\nimport { MaxContextType } from '../maxTypes'\nimport failureMessage from './failureMessage.json'\nimport summaryMessage from './summaryMessage.json'\nimport visualizationMessage from './visualizationMessage.json'\n\n// The session ID is hard-coded here, as it's used for randomizing the welcome headline\nexport const CONVERSATION_ID = 'b1b4b3b4-1b3b-4b3b-1b3b4b3b4b3b'\n\nexport const humanMessage: HumanMessage = {\n    type: AssistantMessageType.Human,\n    content: 'What are my most popular pages?',\n    id: 'human-1',\n}\n\nconst reasoningMessage1: ReasoningMessage = {\n    type: AssistantMessageType.Reasoning,\n    content: 'Picking relevant events and properties',\n    id: 'reasoning-1',\n}\n\nconst reasoningMessage2: ReasoningMessage = {\n    type: AssistantMessageType.Reasoning,\n    content: 'Generating trends',\n    id: 'reasoning-2',\n}\n\nfunction generateChunk(events: string[]): string {\n    return events.map((event) => (event.startsWith('event:') ? `${event}\\n` : `${event}\\n\\n`)).join('')\n}\n\nexport const chatResponseChunk = generateChunk([\n    'event: conversation',\n    `data: ${JSON.stringify({ id: CONVERSATION_ID })}`,\n    'event: message',\n    `data: ${JSON.stringify(humanMessage)}`,\n    'event: message',\n    `data: ${JSON.stringify(reasoningMessage1)}`,\n    'event: message',\n    `data: ${JSON.stringify(reasoningMessage2)}`,\n    'event: message',\n    `data: ${JSON.stringify(visualizationMessage)}`,\n    'event: message',\n    `data: ${JSON.stringify(summaryMessage)}`,\n])\n\nexport const chatMidwayResponseChunk = generateChunk([\n    'event: message',\n    `data: ${JSON.stringify(reasoningMessage1)}`,\n    'event: message',\n    `data: ${JSON.stringify(reasoningMessage2)}`,\n])\n\nconst generationFailure: AssistantGenerationStatusEvent = { type: AssistantGenerationStatusType.GenerationError }\nconst responseWithReasoningStepsOnly = {\n    ...visualizationMessage,\n    answer: null,\n}\n\nexport const generationFailureChunk = generateChunk([\n    'event: message',\n    `data: ${JSON.stringify(responseWithReasoningStepsOnly)}`,\n    'event: status',\n    `data: ${JSON.stringify(generationFailure)}`,\n])\n\nexport const failureChunk = generateChunk(['event: message', `data: ${JSON.stringify(failureMessage)}`])\n\nconst formMessage: AssistantMessage = {\n    type: AssistantMessageType.Assistant,\n    content: 'Does this look like a good summary of what your product does?',\n    id: 'assistant-1',\n    meta: {\n        form: {\n            options: [\n                {\n                    value: 'Yes, save this',\n                    variant: 'primary',\n                },\n                {\n                    value: 'No, not quite right',\n                },\n            ],\n        },\n    },\n}\n\nexport const formChunk = generateChunk(['event: message', `data: ${JSON.stringify(formMessage)}`])\n\nexport const longMessage: AssistantMessage = {\n    type: AssistantMessageType.Assistant,\n    content: 'This\\n\\nis\\n\\na\\n\\nlong\\n\\nmessage\\n\\nthat\\n\\nshould\\n\\nbe\\n\\nsplit\\n\\ninto\\n\\nmultiple\\n\\nlines',\n    id: 'assistant-2',\n}\n\nexport const longResponseChunk = generateChunk([\n    'event: message',\n    `data: ${JSON.stringify(humanMessage)}`,\n    'event: message',\n    `data: ${JSON.stringify(longMessage)}`,\n])\n\nconst humanMessageWithContext: HumanMessage = {\n    type: AssistantMessageType.Human,\n    content: 'Tell me about the $pageview event',\n    id: 'human-context',\n    ui_context: {\n        events: [\n            {\n                id: 'test-event-1',\n                name: '$pageview',\n                type: MaxContextType.EVENT,\n                description: 'Page view event',\n            },\n        ],\n    },\n}\n\nconst assistantResponseWithContext: AssistantMessage = {\n    type: AssistantMessageType.Assistant,\n    content:\n        'Based on the event context you provided, the $pageview event is a standard event that tracks when users view pages in your application. This event helps you understand user navigation patterns and page popularity. It typically captures properties like the page URL, referrer, and timestamp.',\n    id: 'assistant-context',\n}\n\nexport const chatResponseWithEventContext = generateChunk([\n    'event: conversation',\n    `data: ${JSON.stringify({ id: CONVERSATION_ID })}`,\n    'event: message',\n    `data: ${JSON.stringify(humanMessageWithContext)}`,\n    'event: message',\n    `data: ${JSON.stringify(assistantResponseWithContext)}`,\n])\n"],"names":[],"sourceRoot":""}