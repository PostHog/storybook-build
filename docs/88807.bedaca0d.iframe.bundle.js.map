{"version":3,"file":"88807.bedaca0d.iframe.bundle.js","mappings":";AAusources":["webpack://@posthog/storybook/../../products/endpoints/frontend/queries.tsx","webpack://@posthog/storybook/../../products/endpoints/frontend/endpointsUsageLogic.tsx"],"sourcesContent":["import { ChartAxis } from '~/queries/schema/schema-general'\n\nexport interface QueryConfig {\n    dateFrom: string\n    dateTo: string\n    requestNameBreakdownEnabled: boolean\n    requestNameFilter: string[]\n}\n\nconst createRequestNameFilterClause = (requestNameFilter: string[]): string => {\n    if (requestNameFilter.length === 0) {\n        return ''\n    }\n\n    const escapedNames = requestNameFilter.map((name) => `'${name.replace(/'/g, \"''\")}'`).join(', ')\n    return `and name in (${escapedNames})`\n}\n\nexport const createExpensiveQueriesColumns = (requestNameBreakdownEnabled: boolean): ChartAxis[] => {\n    const baseColumns = [\n        {\n            column: 'query_start_time',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'query',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'query_duration_ms',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'read_tb',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'cpu_sec',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'created_by',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n    ]\n\n    return requestNameBreakdownEnabled\n        ? [\n              ...baseColumns,\n              {\n                  column: 'name',\n                  settings: { formatting: { prefix: '', suffix: '' } },\n              },\n          ]\n        : baseColumns\n}\n\nexport const createLast20QueriesColumns = (requestNameBreakdownEnabled: boolean): ChartAxis[] => {\n    const baseColumns = [\n        {\n            column: 'finished_at',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'query_duration_ms',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'query',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'created_by',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n    ]\n\n    return requestNameBreakdownEnabled\n        ? [\n              ...baseColumns,\n              {\n                  column: 'name',\n                  settings: { formatting: { prefix: '', suffix: '' } },\n              },\n          ]\n        : baseColumns\n}\n\nexport const createFailedQueriesColumns = (): ChartAxis[] => {\n    return [\n        {\n            column: 'finished_at',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'query_id',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'query',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'endpoint',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'query_duration_ms',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'name',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'read_tb',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'human_readable_read_size',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'cpu_sec',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'memory_usage',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'status',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'exception_code',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'exception_name',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n    ]\n}\n\nexport const createApiQueriesCountQuery = ({\n    dateFrom,\n    dateTo,\n    requestNameBreakdownEnabled,\n    requestNameFilter,\n}: QueryConfig): string => `\n    select \n        event_date, \n        ${requestNameBreakdownEnabled ? 'name,' : ''} \n        count(1) as number_of_queries\n    from query_log\n    where is_personal_api_key_request \n        and event_date >= '${dateFrom}' \n        and event_date <= '${dateTo}'\n        ${createRequestNameFilterClause(requestNameFilter)}\n    group by event_date ${requestNameBreakdownEnabled ? ', name' : ''}\n    order by event_date asc ${requestNameBreakdownEnabled ? ', name asc' : ''}`\n\nexport const createApiReadTbQuery = ({\n    dateFrom,\n    dateTo,\n    requestNameBreakdownEnabled,\n    requestNameFilter,\n}: QueryConfig): string => `\n    select \n        event_date, \n        ${requestNameBreakdownEnabled ? 'name,' : ''}\n        sum(read_bytes)/1e12 as read_tb\n    from query_log\n    where \n        is_personal_api_key_request \n        and event_date >= '${dateFrom}' \n        and event_date <= '${dateTo}'\n        ${createRequestNameFilterClause(requestNameFilter)}\n    group by event_date ${requestNameBreakdownEnabled ? ', name' : ''}\n    order by event_date asc ${requestNameBreakdownEnabled ? ', name asc' : ''}`\n\nexport const createApiCpuSecondsQuery = ({\n    dateFrom,\n    dateTo,\n    requestNameBreakdownEnabled,\n    requestNameFilter,\n}: QueryConfig): string => `\n    select \n        event_date, \n        ${requestNameBreakdownEnabled ? 'name,' : ''}\n        sum(cpu_microseconds)/1e6 as cpu_sec\n    from query_log\n    where \n        is_personal_api_key_request \n        and event_date >= '${dateFrom}' \n        and event_date <= '${dateTo}'\n        ${createRequestNameFilterClause(requestNameFilter)}\n    group by event_date ${requestNameBreakdownEnabled ? ', name' : ''}\n    order by event_date asc ${requestNameBreakdownEnabled ? ', name asc' : ''}`\n\nexport const createApiQueriesPerKeyQuery = ({ dateFrom, dateTo }: QueryConfig): string => `\n    select \n        event_date, \n        api_key_label, \n        count(1) as total_queries\n    from query_log \n    where \n        event_date >= '${dateFrom}'\n        and event_date <= '${dateTo}'\n        and is_personal_api_key_request\n    group by event_date, api_key_label\n    order by event_date`\n\nexport const createLast20QueriesQuery = ({\n    dateFrom,\n    dateTo,\n    requestNameBreakdownEnabled,\n    requestNameFilter,\n}: QueryConfig): string => `\n    select \n        event_time as finished_at, \n        ${requestNameBreakdownEnabled ? 'name,' : ''}\n        query, \n        query_duration_ms, \n        api_key_label,\n        created_by \n    from query_log\n    where\n        is_personal_api_key_request\n        and event_date >= '${dateFrom}'\n        and event_date <= '${dateTo}'\n        ${createRequestNameFilterClause(requestNameFilter)}\n    order by event_time desc\n    limit 20`\n\nexport const createExpensiveQueriesQuery = ({\n    dateFrom,\n    dateTo,\n    requestNameBreakdownEnabled,\n    requestNameFilter,\n}: QueryConfig): string => `\n    select \n        query_start_time, \n        ${requestNameBreakdownEnabled ? 'name,' : ''}\n        query,\n        query_duration_ms,\n        api_key_label,\n        read_bytes / 1e12 as read_tb,\n        formatReadableSize(read_bytes) as human_readable_read_size,\n        cpu_microseconds / 1e6 as cpu_sec,\n        memory_usage,\n        created_by\n    from query_log\n    where \n        is_personal_api_key_request\n        and event_date >= '${dateFrom}'\n        and event_date <= '${dateTo}'\n        ${createRequestNameFilterClause(requestNameFilter)}\n    order by read_tb desc, event_time desc\n    limit 25`\n\nexport const createFailedQueriesQuery = ({ dateFrom, dateTo }: QueryConfig): string => `\n    select \n        event_time as finished_at,\n        query_id,\n        endpoint,\n        query, \n        query_duration_ms,\n        name,\n        read_bytes / 1e12 as read_tb,\n        formatReadableSize(read_bytes) as human_readable_read_size,\n        cpu_microseconds / 1e6 as cpu_sec,\n        memory_usage,\n        status,\n        exception_code, \n        exception_name,\n    from query_log \n    where \n        is_personal_api_key_request\n        and exception_code != 0 \n        and event_date >= '${dateFrom}'\n        and event_date <= '${dateTo}'\n    order by read_tb desc, event_time desc\n    limit 25`\n","import { actions, afterMount, connect, kea, key, path, props, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport { router } from 'kea-router'\n\nimport api from 'lib/api'\nimport { dayjs } from 'lib/dayjs'\nimport { tabAwareActionToUrl } from 'lib/logic/scenes/tabAwareActionToUrl'\nimport { tabAwareUrlToAction } from 'lib/logic/scenes/tabAwareUrlToAction'\nimport { dateStringToDayJs } from 'lib/utils'\nimport { sceneLogic } from 'scenes/sceneLogic'\nimport { urls } from 'scenes/urls'\n\nimport { NodeKind } from '~/queries/schema/schema-general'\nimport { hogql } from '~/queries/utils'\nimport { Breadcrumb, ChartDisplayType, InsightLogicProps } from '~/types'\n\nimport {\n    EndpointsUsageQueryTile,\n    EndpointsUsageTileId,\n    INITIAL_DATE_FROM,\n    INITIAL_DATE_TO,\n    INITIAL_REQUEST_NAME_BREAKDOWN_ENABLED,\n} from './common'\nimport type { endpointsUsageLogicType } from './endpointsUsageLogicType'\nimport {\n    createApiCpuSecondsQuery,\n    createApiQueriesCountQuery,\n    createApiQueriesPerKeyQuery,\n    createApiReadTbQuery,\n    createExpensiveQueriesColumns,\n    createExpensiveQueriesQuery,\n    createFailedQueriesColumns,\n    createFailedQueriesQuery,\n    createLast20QueriesColumns,\n    createLast20QueriesQuery,\n} from './queries'\n\nexport interface EndpointsUsageLogicProps {\n    tabId: string\n}\n\nexport const endpointsUsageLogic = kea<endpointsUsageLogicType>([\n    path(['products', 'endpoints', 'frontend', 'endpointsUsageLogic']),\n    props({} as EndpointsUsageLogicProps),\n    key((props) => props.tabId),\n    connect(() => ({\n        values: [sceneLogic, ['sceneKey']],\n    })),\n\n    actions({\n        setDates: (dateFrom: string | null, dateTo: string | null) => ({ dateFrom, dateTo }),\n        setRequestNameFilter: (requestNameFilter: string[]) => ({ requestNameFilter }),\n        setRequestNameBreakdownEnabled: (requestNameBreakdownEnabled: boolean) => ({ requestNameBreakdownEnabled }),\n        setSearch: (search: string) => ({ search }),\n    }),\n\n    reducers({\n        dateFilter: [\n            {\n                dateFrom: INITIAL_DATE_FROM,\n                dateTo: INITIAL_DATE_TO,\n            } as { dateFrom: string | null; dateTo: string | null },\n            {\n                setDates: (_, { dateFrom, dateTo }) => ({ dateFrom, dateTo }),\n            },\n        ],\n        requestNameFilter: [\n            [] as string[],\n            {\n                setRequestNameFilter: (_, { requestNameFilter }) => requestNameFilter,\n            },\n        ],\n        requestNameBreakdownEnabled: [\n            INITIAL_REQUEST_NAME_BREAKDOWN_ENABLED as boolean,\n            {\n                setRequestNameBreakdownEnabled: (_, { requestNameBreakdownEnabled }) => requestNameBreakdownEnabled,\n            },\n        ],\n        search: ['', { setSearch: (_, { search }) => search }],\n    }),\n\n    loaders({\n        requestNames: [\n            [] as string[],\n            {\n                loadRequestNames: async () => {\n                    const query = hogql`\n                        SELECT DISTINCT name\n                        FROM query_log\n                        WHERE is_personal_api_key_request\n                            AND name IS NOT NULL\n                            AND name != ''\n                        ORDER BY name ASC\n                    `\n\n                    const response = await api.queryHogQL(query, {\n                        refresh: 'force_blocking',\n                    })\n\n                    return response.results?.map((row: string[]) => row[0]) || []\n                },\n            },\n        ],\n    }),\n\n    selectors({\n        activeTab: [\n            (s) => [s.sceneKey],\n            (sceneKey: string) => {\n                if (sceneKey === 'endpointsUsage') {\n                    return 'usage'\n                }\n                return 'endpoints'\n            },\n        ],\n        tiles: [\n            (s) => [s.dateFilter, s.requestNameBreakdownEnabled, s.requestNameFilter, s.activeTab],\n            (dateFilter, requestNameBreakdownEnabled, requestNameFilter, activeTab): EndpointsUsageQueryTile[] => {\n                if (activeTab === 'endpoints') {\n                    return []\n                }\n\n                const dateFromDayjs = dateStringToDayJs(dateFilter.dateFrom)\n                const dateToDayjs = dateFilter.dateTo ? dateStringToDayJs(dateFilter.dateTo) : null\n\n                const dateFrom = dateFromDayjs\n                    ? dateFromDayjs.format('YYYY-MM-DD')\n                    : dayjs().subtract(7, 'day').format('YYYY-MM-DD')\n\n                const dateTo = dateToDayjs ? dateToDayjs.format('YYYY-MM-DD') : dayjs().format('YYYY-MM-DD')\n\n                const queryConfig = {\n                    dateFrom,\n                    dateTo,\n                    requestNameBreakdownEnabled,\n                    requestNameFilter,\n                }\n\n                const expensiveQueriesColumns = createExpensiveQueriesColumns(requestNameBreakdownEnabled)\n                const last20QueriesColumns = createLast20QueriesColumns(requestNameBreakdownEnabled)\n                const failedQueriesColumns = createFailedQueriesColumns()\n\n                const apiQueriesCountQuery = createApiQueriesCountQuery(queryConfig)\n                const apiReadTbQuery = createApiReadTbQuery(queryConfig)\n                const apiCpuSecondsQuery = createApiCpuSecondsQuery(queryConfig)\n                const apiQueriesPerKeyQuery = createApiQueriesPerKeyQuery(queryConfig)\n                const last20QueriesQuery = createLast20QueriesQuery(queryConfig)\n                const expensiveQueriesQuery = createExpensiveQueriesQuery(queryConfig)\n                const failedQueriesQuery = createFailedQueriesQuery(queryConfig)\n\n                return [\n                    {\n                        kind: 'query',\n                        tileId: EndpointsUsageTileId.API_QUERIES_COUNT,\n                        title: 'Number of API requests per day',\n                        layout: {\n                            colSpanClassName: 'md:col-span-2',\n                        },\n                        query: {\n                            kind: NodeKind.DataVisualizationNode,\n                            source: {\n                                kind: NodeKind.HogQLQuery,\n                                query: apiQueriesCountQuery,\n                            },\n                            display: ChartDisplayType.ActionsBar,\n                            chartSettings: {\n                                xAxis: { column: 'event_date' },\n                                yAxis: [\n                                    {\n                                        column: 'number_of_queries',\n                                        settings: { formatting: { prefix: '', suffix: '' } },\n                                    },\n                                ],\n                                showLegend: requestNameBreakdownEnabled ? true : false,\n                                seriesBreakdownColumn: requestNameBreakdownEnabled ? 'name' : null,\n                            },\n                        },\n                        insightProps: {\n                            dashboardItemId: 'embedded_analytics_api_queries',\n                            cachedInsight: null,\n                        } as InsightLogicProps,\n                        canOpenInsight: false,\n                        canOpenModal: false,\n                    },\n                    {\n                        kind: 'query',\n                        tileId: EndpointsUsageTileId.API_READ_TB,\n                        title: 'TB read by API requests per day',\n                        layout: {\n                            colSpanClassName: 'md:col-span-2',\n                        },\n                        query: {\n                            kind: NodeKind.DataVisualizationNode,\n                            source: {\n                                kind: NodeKind.HogQLQuery,\n                                query: apiReadTbQuery,\n                            },\n                            display: ChartDisplayType.ActionsBar,\n                            chartSettings: {\n                                xAxis: { column: 'event_date' },\n                                yAxis: [\n                                    {\n                                        column: 'read_tb',\n                                        settings: { formatting: { prefix: '', suffix: '' } },\n                                    },\n                                ],\n                                showLegend: requestNameBreakdownEnabled ? true : false,\n                                seriesBreakdownColumn: requestNameBreakdownEnabled ? 'name' : null,\n                            },\n                        },\n                        insightProps: {\n                            dashboardItemId: 'embedded_analytics_read_tb',\n                            cachedInsight: null,\n                        } as InsightLogicProps,\n                        canOpenInsight: false,\n                        canOpenModal: false,\n                    },\n                    {\n                        kind: 'query',\n                        tileId: EndpointsUsageTileId.API_CPU_SECONDS,\n                        title: 'CPU seconds used by API requests per day',\n                        layout: {\n                            colSpanClassName: 'md:col-span-2',\n                        },\n                        query: {\n                            kind: NodeKind.DataVisualizationNode,\n                            source: {\n                                kind: NodeKind.HogQLQuery,\n                                query: apiCpuSecondsQuery,\n                            },\n                            display: ChartDisplayType.ActionsLineGraph,\n                            chartSettings: {\n                                xAxis: { column: 'event_date' },\n                                yAxis: [\n                                    {\n                                        column: 'cpu_sec',\n                                        settings: { formatting: { prefix: '', suffix: '' } },\n                                    },\n                                ],\n                                showLegend: requestNameBreakdownEnabled ? true : false,\n                                seriesBreakdownColumn: requestNameBreakdownEnabled ? 'name' : null,\n                            },\n                        },\n                        insightProps: {\n                            dashboardItemId: 'embedded_analytics_cpu_sec',\n                            cachedInsight: null,\n                        } as InsightLogicProps,\n                        canOpenInsight: false,\n                        canOpenModal: false,\n                    },\n                    {\n                        kind: 'query',\n                        tileId: EndpointsUsageTileId.API_QUERIES_PER_KEY,\n                        title: 'Number of API requests by personal api key per day',\n                        layout: {\n                            colSpanClassName: 'md:col-span-2',\n                        },\n                        query: {\n                            kind: NodeKind.DataVisualizationNode,\n                            source: {\n                                kind: NodeKind.HogQLQuery,\n                                query: apiQueriesPerKeyQuery,\n                            },\n                            display: ChartDisplayType.ActionsLineGraph,\n                            chartSettings: {\n                                xAxis: { column: 'event_date' },\n                                yAxis: [\n                                    {\n                                        column: 'total_queries',\n                                        settings: { formatting: { prefix: '', suffix: '' } },\n                                    },\n                                ],\n                                showLegend: true,\n                                seriesBreakdownColumn: 'api_key_label',\n                            },\n                        },\n                        insightProps: {\n                            dashboardItemId: 'embedded_analytics_queries_per_key',\n                            cachedInsight: null,\n                        } as InsightLogicProps,\n                        canOpenInsight: false,\n                        canOpenModal: false,\n                    },\n                    {\n                        kind: 'query',\n                        tileId: EndpointsUsageTileId.API_LAST_20_QUERIES,\n                        title: 'Last 20 API requests',\n                        layout: {\n                            colSpanClassName: 'md:col-span-full',\n                        },\n                        query: {\n                            kind: NodeKind.DataVisualizationNode,\n                            source: {\n                                kind: NodeKind.HogQLQuery,\n                                query: last20QueriesQuery,\n                            },\n                            display: ChartDisplayType.ActionsTable,\n                            tableSettings: {\n                                columns: last20QueriesColumns,\n                                conditionalFormatting: [],\n                            },\n                        },\n                        insightProps: {\n                            dashboardItemId: 'embedded_analytics_last_20_queries',\n                            cachedInsight: null,\n                        } as InsightLogicProps,\n                        canOpenInsight: false,\n                        canOpenModal: false,\n                    },\n                    {\n                        kind: 'query',\n                        tileId: EndpointsUsageTileId.API_EXPENSIVE_QUERIES,\n                        title: '25 most expensive API request queries',\n                        layout: {\n                            colSpanClassName: 'md:col-span-full',\n                        },\n                        query: {\n                            kind: NodeKind.DataVisualizationNode,\n                            source: {\n                                kind: NodeKind.HogQLQuery,\n                                query: expensiveQueriesQuery,\n                            },\n                            display: ChartDisplayType.ActionsTable,\n                            tableSettings: {\n                                columns: expensiveQueriesColumns,\n                                conditionalFormatting: [],\n                            },\n                        },\n                        insightProps: {\n                            dashboardItemId: 'embedded_analytics_expensive_queries',\n                            cachedInsight: null,\n                        } as InsightLogicProps,\n                        canOpenInsight: false,\n                        canOpenModal: false,\n                    },\n                    {\n                        kind: 'query',\n                        tileId: EndpointsUsageTileId.API_FAILED_QUERIES,\n                        title: 'Recently failed API request queries',\n                        layout: {\n                            colSpanClassName: 'md:col-span-full',\n                        },\n                        query: {\n                            kind: NodeKind.DataVisualizationNode,\n                            source: {\n                                kind: NodeKind.HogQLQuery,\n                                query: failedQueriesQuery,\n                            },\n                            display: ChartDisplayType.ActionsTable,\n                            tableSettings: {\n                                columns: failedQueriesColumns,\n                                conditionalFormatting: [],\n                            },\n                        },\n                        insightProps: {\n                            dashboardItemId: 'embedded_analytics_failed_queries',\n                            cachedInsight: null,\n                        } as InsightLogicProps,\n                        canOpenInsight: false,\n                        canOpenModal: false,\n                    },\n                ]\n            },\n        ],\n\n        breadcrumbs: [\n            (s) => [s.activeTab],\n            (): Breadcrumb[] => [\n                {\n                    key: 'Endpoints',\n                    name: 'Endpoints',\n                    iconType: 'endpoints',\n                },\n            ],\n        ],\n    }),\n\n    afterMount(({ actions }) => {\n        actions.loadRequestNames()\n    }),\n\n    tabAwareActionToUrl(({ values }) => {\n        const actionToUrl = ({\n            dateFilter = values.dateFilter,\n            requestNameBreakdownEnabled = values.requestNameBreakdownEnabled,\n            requestNameFilter = values.requestNameFilter,\n        }): [string, Record<string, any> | undefined, string | undefined] | undefined => {\n            const { dateFrom, dateTo } = dateFilter\n            const searchParams = { ...router.values.searchParams }\n\n            if (values.activeTab == 'usage') {\n                if (dateFrom !== INITIAL_DATE_FROM) {\n                    searchParams.dateFrom = dateFrom\n                } else {\n                    delete searchParams.dateFrom\n                }\n\n                if (dateTo !== INITIAL_DATE_TO) {\n                    searchParams.dateTo = dateTo\n                } else {\n                    delete searchParams.dateTo\n                }\n\n                if (requestNameBreakdownEnabled !== INITIAL_REQUEST_NAME_BREAKDOWN_ENABLED) {\n                    searchParams.requestNameBreakdownEnabled = requestNameBreakdownEnabled\n                } else {\n                    delete searchParams.requestNameBreakdownEnabled\n                }\n\n                if (requestNameFilter.length > 0) {\n                    searchParams.requestNameFilter = requestNameFilter.join(',')\n                } else {\n                    delete searchParams.requestNameFilter\n                }\n            } else {\n                delete searchParams.dateFrom\n                delete searchParams.dateTo\n                delete searchParams.requestNameBreakdownEnabled\n                delete searchParams.requestNameFilter\n            }\n\n            return [router.values.location.pathname, searchParams, router.values.location.hash]\n        }\n\n        return {\n            setDates: actionToUrl,\n            setRequestNameBreakdownEnabled: actionToUrl,\n            setRequestNameFilter: actionToUrl,\n        }\n    }),\n\n    tabAwareUrlToAction(({ actions }) => ({\n        [urls.endpointsUsage()]: (_, searchParams) => {\n            const { dateFrom, dateTo, requestNameBreakdownEnabled, requestNameFilter } = searchParams\n            actions.setDates(dateFrom ?? INITIAL_DATE_FROM, dateTo ?? INITIAL_DATE_TO)\n            actions.setRequestNameBreakdownEnabled(\n                requestNameBreakdownEnabled ?? INITIAL_REQUEST_NAME_BREAKDOWN_ENABLED\n            )\n            actions.setRequestNameFilter(requestNameFilter ? requestNameFilter.split(',') : [])\n        },\n    })),\n])\n"],"names":[],"sourceRoot":""}