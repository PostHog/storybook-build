{"version":3,"file":"90590.9b62ba3a.iframe.bundle.js","mappings":";AAyVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC7RA;;;;;AAhDA;;AAsIA;;;;AAIA;;;;;AAKA;;;;;;AAqBA;;;;;AArJA;;AAYA;;;;;AAKA;;;;;AAyFA;;AA2EA;;;;;AAKA;;;;;;;AAlIA;AACA;;;;;;;;;;AAUA;;;;;;;;;AASA;;;;;AAeA;;;AAuEA;;;;;;AAMA","sources":["webpack://posthog/./frontend/src/scenes/experiments/MetricsView/DeltaChart.tsx","webpack://posthog/./frontend/src/scenes/experiments/ExperimentCodeSnippets.tsx"],"sourcesContent":["import { IconActivity, IconPencil } from '@posthog/icons'\nimport { LemonButton, LemonTag } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { humanFriendlyNumber } from 'lib/utils'\nimport { useEffect, useRef, useState } from 'react'\n\nimport { themeLogic } from '~/layout/navigation-3000/themeLogic'\nimport { InsightType, TrendExperimentVariant } from '~/types'\n\nimport { experimentLogic } from '../experimentLogic'\nimport { VariantTag } from '../ExperimentView/components'\nimport { NoResultEmptyState } from './NoResultEmptyState'\n\nfunction formatTickValue(value: number): string {\n    if (value === 0) {\n        return '0%'\n    }\n\n    // Determine number of decimal places needed\n    const absValue = Math.abs(value)\n    let decimals = 0\n\n    if (absValue < 0.01) {\n        decimals = 3\n    } else if (absValue < 0.1) {\n        decimals = 2\n    } else if (absValue < 1) {\n        decimals = 1\n    } else {\n        decimals = 0\n    }\n\n    return `${(value * 100).toFixed(decimals)}%`\n}\n\nexport function DeltaChart({\n    result,\n    error,\n    variants,\n    metricType,\n    metricIndex,\n    isFirstMetric,\n    metric,\n    tickValues,\n    chartBound,\n}: {\n    result: any\n    error: any\n    variants: any[]\n    metricType: InsightType\n    metricIndex: number\n    isFirstMetric: boolean\n    metric: any\n    tickValues: number[]\n    chartBound: number\n}): JSX.Element {\n    const {\n        credibleIntervalForVariant,\n        conversionRateForVariant,\n        experimentId,\n        countDataForVariant,\n        exposureCountDataForVariant,\n        metricResultsLoading,\n    } = useValues(experimentLogic)\n\n    const { experiment } = useValues(experimentLogic)\n    const { openPrimaryMetricModal } = useActions(experimentLogic)\n    const [tooltipData, setTooltipData] = useState<{ x: number; y: number; variant: string } | null>(null)\n    const [emptyStateTooltipVisible, setEmptyStateTooltipVisible] = useState(true)\n    const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 })\n\n    const BAR_HEIGHT = 8\n    const BAR_PADDING = 10\n    const TICK_PANEL_HEIGHT = 20\n    const VIEW_BOX_WIDTH = 800\n    const HORIZONTAL_PADDING = 20\n    const CONVERSION_RATE_RECT_WIDTH = 2\n    const TICK_FONT_SIZE = 9\n\n    const { isDarkModeOn } = useValues(themeLogic)\n    const COLORS = {\n        TICK_TEXT_COLOR: 'var(--text-secondary-3000)',\n        BOUNDARY_LINES: 'var(--border-3000)',\n        ZERO_LINE: 'var(--border-bold)',\n        BAR_NEGATIVE: isDarkModeOn ? 'rgb(206 66 54)' : '#F44435',\n        BAR_BEST: isDarkModeOn ? 'rgb(49 145 51)' : '#4DAF4F',\n        BAR_DEFAULT: isDarkModeOn ? 'rgb(121 121 121)' : 'rgb(217 217 217)',\n        BAR_CONTROL: isDarkModeOn ? 'rgba(217, 217, 217, 0.2)' : 'rgba(217, 217, 217, 0.4)',\n        BAR_MIDDLE_POINT: 'black',\n        BAR_MIDDLE_POINT_CONTROL: 'rgba(0, 0, 0, 0.4)',\n    }\n\n    // Update chart height calculation to include only one BAR_PADDING for each space between bars\n    const chartHeight = BAR_PADDING + (BAR_HEIGHT + BAR_PADDING) * variants.length\n\n    const valueToX = (value: number): number => {\n        // Scale the value to fit within the padded area\n        const percentage = (value / chartBound + 1) / 2\n        return HORIZONTAL_PADDING + percentage * (VIEW_BOX_WIDTH - 2 * HORIZONTAL_PADDING)\n    }\n\n    const metricTitlePanelWidth = '20%'\n    const variantsPanelWidth = '10%'\n\n    const ticksSvgRef = useRef<SVGSVGElement>(null)\n    const chartSvgRef = useRef<SVGSVGElement>(null)\n    // :TRICKY: We need to track SVG heights dynamically because\n    // we're fitting regular divs to match SVG viewports. SVGs scale\n    // based on their viewBox and the viewport size, making it challenging\n    // to match their effective rendered heights with regular div elements.\n    const [ticksSvgHeight, setTicksSvgHeight] = useState<number>(0)\n    const [chartSvgHeight, setChartSvgHeight] = useState<number>(0)\n\n    useEffect(() => {\n        const ticksSvg = ticksSvgRef.current\n        const chartSvg = chartSvgRef.current\n\n        // eslint-disable-next-line compat/compat\n        const resizeObserver = new ResizeObserver((entries) => {\n            for (const entry of entries) {\n                if (entry.target === ticksSvg) {\n                    setTicksSvgHeight(entry.contentRect.height)\n                } else if (entry.target === chartSvg) {\n                    setChartSvgHeight(entry.contentRect.height)\n                }\n            }\n        })\n\n        if (ticksSvg) {\n            resizeObserver.observe(ticksSvg)\n        }\n        if (chartSvg) {\n            resizeObserver.observe(chartSvg)\n        }\n\n        return () => {\n            resizeObserver.disconnect()\n        }\n    }, [])\n\n    return (\n        <div className=\"w-full rounded bg-[var(--bg-table)]\">\n            {/* Metric title panel */}\n            {/* eslint-disable-next-line react/forbid-dom-props */}\n            <div style={{ display: 'inline-block', width: metricTitlePanelWidth, verticalAlign: 'top' }}>\n                {isFirstMetric && (\n                    <svg\n                        // eslint-disable-next-line react/forbid-dom-props\n                        style={{ height: `${ticksSvgHeight}px` }}\n                    />\n                )}\n                {isFirstMetric && <div className=\"w-full border-t border-border\" />}\n                <div\n                    // eslint-disable-next-line react/forbid-dom-props\n                    style={{ height: `${chartSvgHeight}px`, borderRight: `1px solid ${COLORS.BOUNDARY_LINES}` }}\n                    className=\"p-1 overflow-auto\"\n                >\n                    <div className=\"text-xs font-semibold whitespace-nowrap overflow-hidden\">\n                        <div className=\"space-y-1 pl-1\">\n                            <div className=\"flex items-center gap-2\">\n                                <div className=\"cursor-default text-xs font-semibold whitespace-nowrap overflow-hidden text-ellipsis flex-grow\">\n                                    {metricIndex + 1}.{' '}\n                                    {metric.name || <span className=\"text-muted\">Untitled metric</span>}\n                                </div>\n                                <LemonButton\n                                    className=\"flex-shrink-0\"\n                                    type=\"secondary\"\n                                    size=\"xsmall\"\n                                    icon={<IconPencil fontSize=\"12\" />}\n                                    onClick={() => openPrimaryMetricModal(metricIndex)}\n                                />\n                            </div>\n                            <LemonTag type=\"muted\" size=\"small\">\n                                {metric.kind === 'ExperimentFunnelsQuery' ? 'Funnel' : 'Trend'}\n                            </LemonTag>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            {/* Variants panel */}\n            {/* eslint-disable-next-line react/forbid-dom-props */}\n            <div style={{ display: 'inline-block', width: variantsPanelWidth, verticalAlign: 'top' }}>\n                {isFirstMetric && (\n                    <svg\n                        // eslint-disable-next-line react/forbid-dom-props\n                        style={{ height: `${ticksSvgHeight}px` }}\n                    />\n                )}\n                {isFirstMetric && <div className=\"w-full border-t border-border\" />}\n                {/* eslint-disable-next-line react/forbid-dom-props */}\n                <div style={{ height: `${chartSvgHeight}px` }}>\n                    {variants.map((variant) => (\n                        <div\n                            key={variant.key}\n                            // eslint-disable-next-line react/forbid-dom-props\n                            style={{\n                                height: `${100 / variants.length}%`,\n                                display: 'flex',\n                                alignItems: 'center',\n                                paddingLeft: '10px',\n                            }}\n                        >\n                            <VariantTag experimentId={experimentId} variantKey={variant.key} fontSize={11} muted />\n                        </div>\n                    ))}\n                </div>\n            </div>\n\n            {/* SVGs container */}\n            <div\n                // eslint-disable-next-line react/forbid-dom-props\n                style={{\n                    display: 'inline-block',\n                    width: `calc(100% - ${metricTitlePanelWidth} - ${variantsPanelWidth})`,\n                    verticalAlign: 'top',\n                }}\n            >\n                {/* Ticks */}\n                {isFirstMetric && (\n                    <svg\n                        ref={ticksSvgRef}\n                        viewBox={`0 0 ${VIEW_BOX_WIDTH} ${TICK_PANEL_HEIGHT}`}\n                        preserveAspectRatio=\"xMidYMid meet\"\n                    >\n                        {tickValues.map((value, index) => {\n                            const x = valueToX(value)\n                            return (\n                                <g key={index}>\n                                    <text\n                                        x={x}\n                                        y={TICK_PANEL_HEIGHT / 2}\n                                        textAnchor=\"middle\"\n                                        dominantBaseline=\"middle\"\n                                        fontSize={TICK_FONT_SIZE}\n                                        fill={COLORS.TICK_TEXT_COLOR}\n                                        fontWeight=\"600\"\n                                    >\n                                        {formatTickValue(value)}\n                                    </text>\n                                </g>\n                            )\n                        })}\n                    </svg>\n                )}\n                {isFirstMetric && <div className=\"w-full border-t border-border\" />}\n                {/* Chart */}\n                {result ? (\n                    <svg\n                        ref={chartSvgRef}\n                        viewBox={`0 0 ${VIEW_BOX_WIDTH} ${chartHeight}`}\n                        preserveAspectRatio=\"xMidYMid meet\"\n                    >\n                        {/* Vertical grid lines */}\n                        {tickValues.map((value, index) => {\n                            const x = valueToX(value)\n                            return (\n                                <line\n                                    key={index}\n                                    x1={x}\n                                    y1={0}\n                                    x2={x}\n                                    y2={chartSvgHeight + 20}\n                                    stroke={value === 0 ? COLORS.ZERO_LINE : COLORS.BOUNDARY_LINES}\n                                    strokeWidth={value === 0 ? 1 : 0.5}\n                                />\n                            )\n                        })}\n\n                        {variants.map((variant, index) => {\n                            const interval = credibleIntervalForVariant(result, variant.key, metricType)\n                            const [lower, upper] = interval ? [interval[0] / 100, interval[1] / 100] : [0, 0]\n\n                            let delta: number\n                            if (metricType === InsightType.TRENDS) {\n                                const controlVariant = result.variants.find(\n                                    (v: TrendExperimentVariant) => v.key === 'control'\n                                ) as TrendExperimentVariant\n\n                                const variantData = result.variants.find(\n                                    (v: TrendExperimentVariant) => v.key === variant.key\n                                ) as TrendExperimentVariant\n\n                                if (\n                                    !variantData?.count ||\n                                    !variantData?.absolute_exposure ||\n                                    !controlVariant?.count ||\n                                    !controlVariant?.absolute_exposure\n                                ) {\n                                    delta = 0\n                                } else {\n                                    const controlMean = controlVariant.count / controlVariant.absolute_exposure\n                                    const variantMean = variantData.count / variantData.absolute_exposure\n                                    delta = (variantMean - controlMean) / controlMean\n                                }\n                            } else {\n                                const variantRate = conversionRateForVariant(result, variant.key)\n                                const controlRate = conversionRateForVariant(result, 'control')\n                                delta = variantRate && controlRate ? (variantRate - controlRate) / controlRate : 0\n                            }\n\n                            const y = BAR_PADDING + (BAR_HEIGHT + BAR_PADDING) * index\n                            const x1 = valueToX(lower)\n                            const x2 = valueToX(upper)\n                            const deltaX = valueToX(delta)\n\n                            return (\n                                <g\n                                    key={variant.key}\n                                    onMouseEnter={(e) => {\n                                        const rect = e.currentTarget.getBoundingClientRect()\n                                        setTooltipData({\n                                            x: rect.left + rect.width / 2,\n                                            y: rect.top - 10,\n                                            variant: variant.key,\n                                        })\n                                    }}\n                                    onMouseLeave={() => setTooltipData(null)}\n                                >\n                                    {variant.key === 'control' ? (\n                                        // Control variant - single gray bar\n                                        <>\n                                            <rect x={x1} y={y} width={x2 - x1} height={BAR_HEIGHT} fill=\"transparent\" />\n                                            <rect\n                                                x={x1}\n                                                y={y}\n                                                width={x2 - x1}\n                                                height={BAR_HEIGHT}\n                                                fill={COLORS.BAR_CONTROL}\n                                                stroke={COLORS.BOUNDARY_LINES}\n                                                strokeWidth={1}\n                                                strokeDasharray=\"2,2\"\n                                                rx={4}\n                                                ry={4}\n                                            />\n                                        </>\n                                    ) : (\n                                        // Test variants - split into positive and negative sections if needed\n                                        <>\n                                            <rect x={x1} y={y} width={x2 - x1} height={BAR_HEIGHT} fill=\"transparent\" />\n                                            {lower < 0 && upper > 0 ? (\n                                                // Bar spans across zero - need to split\n                                                <>\n                                                    <path\n                                                        d={`\n                                                            M ${x1 + 4} ${y}\n                                                            H ${valueToX(0)}\n                                                            V ${y + BAR_HEIGHT}\n                                                            H ${x1 + 4}\n                                                            Q ${x1} ${y + BAR_HEIGHT} ${x1} ${y + BAR_HEIGHT - 4}\n                                                            V ${y + 4}\n                                                            Q ${x1} ${y} ${x1 + 4} ${y}\n                                                        `}\n                                                        fill={COLORS.BAR_NEGATIVE}\n                                                    />\n                                                    <path\n                                                        d={`\n                                                            M ${valueToX(0)} ${y}\n                                                            H ${x2 - 4}\n                                                            Q ${x2} ${y} ${x2} ${y + 4}\n                                                            V ${y + BAR_HEIGHT - 4}\n                                                            Q ${x2} ${y + BAR_HEIGHT} ${x2 - 4} ${y + BAR_HEIGHT}\n                                                            H ${valueToX(0)}\n                                                            V ${y}\n                                                        `}\n                                                        fill={COLORS.BAR_BEST}\n                                                    />\n                                                </>\n                                            ) : (\n                                                // Bar is entirely positive or negative\n                                                <rect\n                                                    x={x1}\n                                                    y={y}\n                                                    width={x2 - x1}\n                                                    height={BAR_HEIGHT}\n                                                    fill={upper <= 0 ? COLORS.BAR_NEGATIVE : COLORS.BAR_BEST}\n                                                    rx={4}\n                                                    ry={4}\n                                                />\n                                            )}\n                                        </>\n                                    )}\n                                    {/* Delta marker */}\n                                    <rect\n                                        x={deltaX - CONVERSION_RATE_RECT_WIDTH / 2}\n                                        y={y}\n                                        width={CONVERSION_RATE_RECT_WIDTH}\n                                        height={BAR_HEIGHT}\n                                        fill={\n                                            variant.key === 'control'\n                                                ? COLORS.BAR_MIDDLE_POINT_CONTROL\n                                                : COLORS.BAR_MIDDLE_POINT\n                                        }\n                                    />\n                                </g>\n                            )\n                        })}\n                    </svg>\n                ) : metricResultsLoading ? (\n                    <svg\n                        ref={chartSvgRef}\n                        viewBox={`0 0 ${VIEW_BOX_WIDTH} ${chartHeight}`}\n                        preserveAspectRatio=\"xMidYMid meet\"\n                    >\n                        <foreignObject\n                            x={VIEW_BOX_WIDTH / 2 - 100} // Center the 200px wide container\n                            y={chartHeight / 2 - 10} // Roughly center vertically\n                            width=\"200\"\n                            height=\"20\"\n                            onMouseEnter={(e) => {\n                                const rect = e.currentTarget.getBoundingClientRect()\n                                setTooltipPosition({\n                                    x: rect.left + rect.width / 2,\n                                    y: rect.top,\n                                })\n                                setEmptyStateTooltipVisible(true)\n                            }}\n                            onMouseLeave={() => setEmptyStateTooltipVisible(false)}\n                        >\n                            <div\n                                className=\"flex items-center justify-center text-muted cursor-default\"\n                                // eslint-disable-next-line react/forbid-dom-props\n                                style={{ fontSize: '10px', fontWeight: 400 }}\n                            >\n                                <span>Results loading&hellip;</span>\n                            </div>\n                        </foreignObject>\n                    </svg>\n                ) : (\n                    <svg\n                        ref={chartSvgRef}\n                        viewBox={`0 0 ${VIEW_BOX_WIDTH} ${chartHeight}`}\n                        preserveAspectRatio=\"xMidYMid meet\"\n                    >\n                        {!experiment.start_date ? (\n                            <foreignObject\n                                x={VIEW_BOX_WIDTH / 2 - 100}\n                                y={chartHeight / 2 - 10}\n                                width=\"250\"\n                                height=\"20\"\n                            >\n                                <div\n                                    className=\"flex items-center justify-center text-muted cursor-default\"\n                                    // eslint-disable-next-line react/forbid-dom-props\n                                    style={{ fontSize: '10px', fontWeight: 400 }}\n                                >\n                                    <span>Waiting for experiment to start&hellip;</span>\n                                </div>\n                            </foreignObject>\n                        ) : (\n                            <foreignObject\n                                x={VIEW_BOX_WIDTH / 2 - 100}\n                                y={chartHeight / 2 - 10}\n                                width=\"250\"\n                                height=\"20\"\n                                onMouseEnter={(e) => {\n                                    const rect = e.currentTarget.getBoundingClientRect()\n                                    setTooltipPosition({\n                                        x: rect.left + rect.width / 2,\n                                        y: rect.top,\n                                    })\n                                    setEmptyStateTooltipVisible(true)\n                                }}\n                                onMouseLeave={() => setEmptyStateTooltipVisible(false)}\n                            >\n                                <div\n                                    className=\"flex items-center justify-center text-muted cursor-default\"\n                                    // eslint-disable-next-line react/forbid-dom-props\n                                    style={{ fontSize: '10px', fontWeight: 400 }}\n                                >\n                                    {error?.hasDiagnostics ? (\n                                        <LemonTag size=\"small\" type=\"highlight\" className=\"mr-2\">\n                                            <IconActivity className=\"mr-1\" fontSize=\"1em\" />\n                                            <span className=\"font-semibold\">\n                                                {(() => {\n                                                    try {\n                                                        const detail = JSON.parse(error.detail)\n                                                        return Object.values(detail).filter((v) => v === false).length\n                                                    } catch {\n                                                        return '0'\n                                                    }\n                                                })()}\n                                            </span>\n                                            /<span className=\"font-semibold\">4</span>\n                                        </LemonTag>\n                                    ) : (\n                                        <LemonTag size=\"small\" type=\"danger\" className=\"mr-1\">\n                                            Error\n                                        </LemonTag>\n                                    )}\n                                    <span>Results not yet available</span>\n                                </div>\n                            </foreignObject>\n                        )}\n                    </svg>\n                )}\n\n                {/* Variant result tooltip */}\n                {tooltipData && (\n                    <div\n                        // eslint-disable-next-line react/forbid-dom-props\n                        style={{\n                            position: 'fixed',\n                            left: tooltipData.x,\n                            top: tooltipData.y,\n                            transform: 'translate(-50%, -100%)',\n                            backgroundColor: 'var(--bg-light)',\n                            border: '1px solid var(--border)',\n                            padding: '8px 12px',\n                            borderRadius: '6px',\n                            fontSize: '13px',\n                            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)',\n                            pointerEvents: 'none',\n                            zIndex: 100,\n                            minWidth: '300px',\n                        }}\n                    >\n                        <div className=\"flex flex-col gap-1\">\n                            <VariantTag experimentId={experimentId} variantKey={tooltipData.variant} />\n                            {metricType === InsightType.TRENDS ? (\n                                <>\n                                    <div className=\"flex justify-between items-center\">\n                                        <span className=\"text-muted font-semibold\">Count:</span>\n                                        <span className=\"font-semibold\">\n                                            {(() => {\n                                                const count = countDataForVariant(result, tooltipData.variant)\n                                                return count !== null ? humanFriendlyNumber(count) : '—'\n                                            })()}\n                                        </span>\n                                    </div>\n                                    <div className=\"flex justify-between items-center\">\n                                        <span className=\"text-muted font-semibold\">Exposure:</span>\n                                        <span className=\"font-semibold\">\n                                            {(() => {\n                                                const exposure = exposureCountDataForVariant(\n                                                    result,\n                                                    tooltipData.variant\n                                                )\n                                                return exposure !== null ? humanFriendlyNumber(exposure) : '—'\n                                            })()}\n                                        </span>\n                                    </div>\n                                    <div className=\"flex justify-between items-center\">\n                                        <span className=\"text-muted font-semibold\">Mean:</span>\n                                        <span className=\"font-semibold\">\n                                            {(() => {\n                                                const variant = result.variants.find(\n                                                    (v: TrendExperimentVariant) => v.key === tooltipData.variant\n                                                )\n                                                return variant?.count && variant?.absolute_exposure\n                                                    ? (variant.count / variant.absolute_exposure).toFixed(2)\n                                                    : '—'\n                                            })()}\n                                        </span>\n                                    </div>\n                                </>\n                            ) : (\n                                <div className=\"flex justify-between items-center\">\n                                    <span className=\"text-muted font-semibold\">Conversion rate:</span>\n                                    <span className=\"font-semibold\">\n                                        {conversionRateForVariant(result, tooltipData.variant)?.toFixed(2)}%\n                                    </span>\n                                </div>\n                            )}\n                            <div className=\"flex justify-between items-center\">\n                                <span className=\"text-muted font-semibold\">Delta:</span>\n                                <span className=\"font-semibold\">\n                                    {tooltipData.variant === 'control' ? (\n                                        <em className=\"text-muted\">Baseline</em>\n                                    ) : (\n                                        (() => {\n                                            if (metricType === InsightType.TRENDS) {\n                                                const controlVariant = result.variants.find(\n                                                    (v: TrendExperimentVariant) => v.key === 'control'\n                                                )\n                                                const variant = result.variants.find(\n                                                    (v: TrendExperimentVariant) => v.key === tooltipData.variant\n                                                )\n\n                                                if (\n                                                    !variant?.count ||\n                                                    !variant?.absolute_exposure ||\n                                                    !controlVariant?.count ||\n                                                    !controlVariant?.absolute_exposure\n                                                ) {\n                                                    return '—'\n                                                }\n\n                                                const controlMean =\n                                                    controlVariant.count / controlVariant.absolute_exposure\n                                                const variantMean = variant.count / variant.absolute_exposure\n                                                const delta = (variantMean - controlMean) / controlMean\n                                                return delta ? (\n                                                    <span className={delta > 0 ? 'text-success' : 'text-danger'}>\n                                                        {`${delta > 0 ? '+' : ''}${(delta * 100).toFixed(2)}%`}\n                                                    </span>\n                                                ) : (\n                                                    '—'\n                                                )\n                                            }\n\n                                            const variantRate = conversionRateForVariant(result, tooltipData.variant)\n                                            const controlRate = conversionRateForVariant(result, 'control')\n                                            const delta =\n                                                variantRate && controlRate\n                                                    ? (variantRate - controlRate) / controlRate\n                                                    : 0\n                                            return delta ? (\n                                                <span className={delta > 0 ? 'text-success' : 'text-danger'}>\n                                                    {`${delta > 0 ? '+' : ''}${(delta * 100).toFixed(2)}%`}\n                                                </span>\n                                            ) : (\n                                                '—'\n                                            )\n                                        })()\n                                    )}\n                                </span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                                <span className=\"text-muted font-semibold\">Credible interval:</span>\n                                <span className=\"font-semibold\">\n                                    {(() => {\n                                        const interval = credibleIntervalForVariant(\n                                            result,\n                                            tooltipData.variant,\n                                            metricType\n                                        )\n                                        const [lower, upper] = interval\n                                            ? [interval[0] / 100, interval[1] / 100]\n                                            : [0, 0]\n                                        return `[${lower > 0 ? '+' : ''}${(lower * 100).toFixed(2)}%, ${\n                                            upper > 0 ? '+' : ''\n                                        }${(upper * 100).toFixed(2)}%]`\n                                    })()}\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                )}\n\n                {/* Empty state tooltip */}\n                {emptyStateTooltipVisible && (\n                    <div\n                        // eslint-disable-next-line react/forbid-dom-props\n                        style={{\n                            position: 'fixed',\n                            left: tooltipPosition.x,\n                            top: tooltipPosition.y,\n                            transform: 'translate(-50%, -100%)',\n                            backgroundColor: 'var(--bg-light)',\n                            border: '1px solid var(--border)',\n                            padding: '8px 12px',\n                            borderRadius: '6px',\n                            fontSize: '13px',\n                            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)',\n                            pointerEvents: 'none',\n                            zIndex: 100,\n                            minWidth: '200px',\n                        }}\n                    >\n                        <NoResultEmptyState error={error} />\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n}\n","import { Link } from '@posthog/lemon-ui'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\n\nfunction ServerSideWarning(): JSX.Element {\n    return (\n        <div className=\"warning\">\n            <p>\n                <b>Warning:</b> Server side experiment metrics require you to manually send the feature flag\n                information.{' '}\n                <Link to=\"https://posthog.com/tutorials/experiments#step-2-sending-the-right-events\" target=\"_blank\">\n                    See this tutorial for more information.\n                </Link>\n            </p>\n        </div>\n    )\n}\n\ninterface SnippetProps {\n    flagKey: string\n    variant: string\n}\n\nexport function AndroidSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.Kotlin} wrap>\n                {`if (PostHog.getFeatureFlag(\"${flagKey}\") == \"${variant}\") {\n    // do something\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function IOSSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.Swift} wrap>\n                {`if (PostHogSDK.shared.getFeatureFlag(\"${flagKey}\") as? String == \"${variant}\") {\n    // do something\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function NodeJSSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.JavaScript} wrap>\n                {`const experimentFlagValue = await client.getFeatureFlag('${flagKey}', 'user distinct id')\n\nif (experimentFlagValue === '${variant}' ) {\n    // Do something differently for this user\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n            <ServerSideWarning />\n        </>\n    )\n}\n\nexport function JSSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <div>\n            <CodeSnippet language={Language.JavaScript} wrap>\n                {`if (posthog.getFeatureFlag('${flagKey}') === '${variant}') {\n    // Do something differently for this user\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n            <div className=\"mt-4 mb-1\">\n                <b>Test that it works</b>\n            </div>\n            <CodeSnippet language={Language.JavaScript} wrap>\n                {`posthog.featureFlags.override({'${flagKey}': '${variant}'})`}\n            </CodeSnippet>\n        </div>\n    )\n}\n\nexport function ReactSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.JavaScript} wrap>\n                {`// You can either use the useFeatureFlagVariantKey hook,\n// or you can use the feature flags component - https://posthog.com/docs/libraries/react#feature-flags-react-component\n\n// Method one: using the useFeatureFlagVariantKey hook\nimport { useFeatureFlagVariantKey } from 'posthog-js/react'\n\nfunction App() {\n    const variant = useFeatureFlagVariantKey('${flagKey}')\n    if (variant === '${variant}') {\n        // do something\n    }\n}\n\n// Method two: using the feature flags component\nimport { PostHogFeature } from 'posthog-js/react'\n\nfunction App() {\n    return (\n        <PostHogFeature flag='${flagKey}' match='${variant}'>\n            <div>\n                {/* the component to show */}\n            </div>\n        </PostHogFeature>\n    )\n}\n\n// You can also test your code by overriding the feature flag:\nposthog.featureFlags.override({'${flagKey}': '${variant}'})`}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function RNSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.JavaScript} wrap>\n                {`if (posthog.getFeatureFlag('${flagKey}') === '${variant}') {\n    // Do something differently for this user\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function PHPSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.PHP} wrap>\n                {`if (PostHog::getFeatureFlag('${flagKey}', 'user distinct id') == '${variant}') {\n    // Do something differently for this user\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n            <ServerSideWarning />\n        </>\n    )\n}\n\nexport function GolangSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.Go} wrap>\n                {`experimentFlagValue, err := client.GetFeatureFlag(\n                    FeatureFlagPayload{\n                        Key:        '${flagKey}',\n                        DistinctId: \"distinct-id\",\n                    })\n\nif (experimentFlagValue == '${variant}' ) {\n    // Do something differently for this user\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n            <ServerSideWarning />\n        </>\n    )\n}\n\nexport function FlutterSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    const clientSuffix = 'await Posthog().'\n    const flagFunction = 'getFeatureFlag'\n    const variantSuffix = ` == '${variant}'`\n\n    return (\n        <>\n            <CodeSnippet language={Language.Dart} wrap>\n                {`if (${clientSuffix}${flagFunction}('${flagKey}')${variantSuffix}) {\n  // Do something differently for this user\n} else {\n  // It's a good idea to let control variant always be the default behaviour,\n  // so if something goes wrong with flag evaluation, you don't break your app.\n}\n            `}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function RubySnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.Ruby} wrap>\n                {`experimentFlagValue = posthog.get_feature_flag('${flagKey}', 'user distinct id')\n\n\nif experimentFlagValue == '${variant}'\n    # Do something differently for this user\nelse\n    # It's a good idea to let control variant always be the default behaviour,\n    # so if something goes wrong with flag evaluation, you don't break your app.\nend\n`}\n            </CodeSnippet>\n            <ServerSideWarning />\n        </>\n    )\n}\n\nexport function PythonSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.Python} wrap>\n                {`experiment_flag_value = posthog.get_feature_flag(\"${flagKey}\", \"user_distinct_id\"):\n\nif experiment_flag_value == '${variant}':\n    # Do something differently for this user\nelse:\n    # It's a good idea to let control variant always be the default behaviour,\n    # so if something goes wrong with flag evaluation, you don't break your app.\n`}\n            </CodeSnippet>\n            <ServerSideWarning />\n        </>\n    )\n}\n"],"names":[],"sourceRoot":""}