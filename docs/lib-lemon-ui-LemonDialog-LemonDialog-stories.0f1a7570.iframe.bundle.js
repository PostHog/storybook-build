"use strict";(self.webpackChunkposthog=self.webpackChunkposthog||[]).push([[39513],{"./frontend/src/lib/lemon-ui/LemonDialog/LemonDialog.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Customised:()=>Customised,Form:()=>Form,Minimal:()=>Minimal,Template:()=>Template,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _posthog_lemon_ui__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./frontend/@posthog/lemon-ui/src/index.ts"),lib_lemon_ui_LemonButton__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./frontend/src/lib/lemon-ui/LemonButton/index.ts"),_LemonField__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./frontend/src/lib/lemon-ui/LemonField/index.ts"),_LemonDialog__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./frontend/src/lib/lemon-ui/LemonDialog/LemonDialog.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");let meta={title:"Lemon UI/Lemon Dialog",component:_LemonDialog__WEBPACK_IMPORTED_MODULE_3__.d,args:{title:"Do you want to do the thing?",description:"This is a simple paragraph that illustrates describing a decision the user is going to take. Dialogs typically ask a single question and provide 1-3 actions for responding. ",primaryButton:{children:"Primary",onClick:()=>alert("Primary Clicked!")},secondaryButton:{children:"Secondary",onClick:()=>alert("Secondary Clicked!")},tertiaryButton:{children:"Tertiary",onClick:()=>alert("Tertiary Clicked!")}},parameters:{docs:{description:{component:`
[Related Figma area](https://www.figma.com/file/Y9G24U4r04nEjIDGIEGuKI/PostHog-Design-System-One?node-id=3139%3A1388)
                
Dialogs are blocking prompts that force a user decision or action. 
When a dialog presents a desctructive choice, the actions should align with that destructive / warning color palette options.

Dialogs are opened imperatively (i.e. calling \`LemonDialog.open()\`) whereas Modals are used declaratively.
            `}}},tags:["autodocs"]},__WEBPACK_DEFAULT_EXPORT__=meta,Template=props=>{let onClick=()=>{_LemonDialog__WEBPACK_IMPORTED_MODULE_3__.d.open(props)};return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)("div",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)("div",{className:"bg-border p-4",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_LemonDialog__WEBPACK_IMPORTED_MODULE_3__.d,{...props,inline:!0})}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(lib_lemon_ui_LemonButton__WEBPACK_IMPORTED_MODULE_1__.J,{type:"primary",onClick:()=>onClick(),className:"mx-auto mt-2",children:"Open as modal"})]})},Minimal=Template.bind({});Minimal.args={title:"Notice",description:void 0,primaryButton:void 0,secondaryButton:void 0,tertiaryButton:void 0};let Customised=Template.bind({});Customised.args={title:"Are you sure you want to delete “FakeOrganization”?",description:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment,{children:["This action cannot be undone. If you opt to delete the organization and its corresponding events, the events will not be immediately removed. Instead these events will be deleted on a set schedule during non-peak usage times. ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_posthog_lemon_ui__WEBPACK_IMPORTED_MODULE_0__.rU,{to:"https://posthog.com",children:"Learn more"})]}),primaryButton:{children:"Delete organization",status:"danger",onClick:()=>alert("Organization Deleted!")},secondaryButton:{children:"Cancel",onClick:()=>alert("Cancelled!")},tertiaryButton:{children:"Delete organization and all corresponding events",status:"danger",onClick:()=>alert("Organization and all events deleted!")}};let Form=props=>{let onClick=()=>{_LemonDialog__WEBPACK_IMPORTED_MODULE_3__.d.openForm(props)};return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)("div",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)("div",{className:"bg-default p-4",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_LemonDialog__WEBPACK_IMPORTED_MODULE_3__.k,{...props,inline:!0})}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(lib_lemon_ui_LemonButton__WEBPACK_IMPORTED_MODULE_1__.J,{type:"primary",onClick:()=>onClick(),className:"mx-auto mt-2",children:"Open as modal"})]})};Form.args={title:"This is a test",initialValues:{name:"one"},description:void 0,tertiaryButton:void 0,content:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_LemonField__WEBPACK_IMPORTED_MODULE_2__.D,{name:"name",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_posthog_lemon_ui__WEBPACK_IMPORTED_MODULE_0__.DF,{placeholder:"Please enter the new name",autoFocus:!0})})},Form.storyName="Category - Elements",Template.parameters={...Template.parameters,docs:{...Template.parameters?.docs,source:{originalSource:'(props: LemonDialogProps) => {\n  const onClick = (): void => {\n    LemonDialog.open(props);\n  };\n  return <div>\n            <div className="bg-border p-4">\n                <LemonDialog {...props} inline />\n            </div>\n            <LemonButton type="primary" onClick={() => onClick()} className="mx-auto mt-2">\n                Open as modal\n            </LemonButton>\n        </div>;\n}',...Template.parameters?.docs?.source}}},Minimal.parameters={...Minimal.parameters,docs:{...Minimal.parameters?.docs,source:{originalSource:'(props: LemonDialogProps) => {\n  const onClick = (): void => {\n    LemonDialog.open(props);\n  };\n  return <div>\n            <div className="bg-border p-4">\n                <LemonDialog {...props} inline />\n            </div>\n            <LemonButton type="primary" onClick={() => onClick()} className="mx-auto mt-2">\n                Open as modal\n            </LemonButton>\n        </div>;\n}',...Minimal.parameters?.docs?.source}}},Customised.parameters={...Customised.parameters,docs:{...Customised.parameters?.docs,source:{originalSource:'(props: LemonDialogProps) => {\n  const onClick = (): void => {\n    LemonDialog.open(props);\n  };\n  return <div>\n            <div className="bg-border p-4">\n                <LemonDialog {...props} inline />\n            </div>\n            <LemonButton type="primary" onClick={() => onClick()} className="mx-auto mt-2">\n                Open as modal\n            </LemonButton>\n        </div>;\n}',...Customised.parameters?.docs?.source}}},Form.parameters={...Form.parameters,docs:{...Form.parameters?.docs,source:{originalSource:'(props: LemonFormDialogProps): JSX.Element => {\n  const onClick = (): void => {\n    LemonDialog.openForm(props);\n  };\n  return <div>\n            <div className="bg-default p-4">\n                <LemonFormDialog {...props} inline />\n            </div>\n            <LemonButton type="primary" onClick={() => onClick()} className="mx-auto mt-2">\n                Open as modal\n            </LemonButton>\n        </div>;\n}',...Form.parameters?.docs?.source}}};let __namedExportsOrder=["Template","Minimal","Customised","Form"]}}]);
//# sourceMappingURL=lib-lemon-ui-LemonDialog-LemonDialog-stories.0f1a7570.iframe.bundle.js.map