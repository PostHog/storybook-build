{"version":3,"file":"28399.201a27dc.iframe.bundle.js","mappings":";AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@posthog/storybook/../../products/endpoints/frontend/EndpointCodeExamples.tsx"],"sourcesContent":["import { useActions, useValues } from 'kea'\n\nimport { LemonSelect } from '@posthog/lemon-ui'\n\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\n\nimport { SceneSection } from '~/layout/scenes/components/SceneSection'\n\nimport { CodeExampleTab, endpointLogic } from './endpointLogic'\n\ninterface EndpointCodeExamplesProps {\n    tabId: string\n}\n\nfunction generateVariablesJson(variables: Record<string, any>): string {\n    const entries = Object.entries(variables)\n    if (entries.length === 0) {\n        return '      // No variables defined'\n    }\n\n    return entries\n        .map(([key, value], index) => {\n            const isLast = index === entries.length - 1\n            const comma = isLast ? '' : ','\n            return `      \"${key}\": ${JSON.stringify(value.value)}${comma}`\n        })\n        .join('\\n')\n}\n\nfunction getEndpointUrl(endpointPath: string): string {\n    return `${window.location.origin}${endpointPath}`\n}\n\nfunction generateTerminalExample(endpointPath: string, variables: Record<string, any>): string {\n    return `curl -X POST ${getEndpointUrl(endpointPath)} \\\\\n  -H \"Authorization: Bearer $POSTHOG_PERSONAL_API_KEY\" \\\\\n  -H \"Content-Type: application/json\" \\\\\n  -d '{\n    \"variables_values\": {\n${generateVariablesJson(variables)}\n    }\n  }'`\n}\n\nfunction generatePythonExample(endpointPath: string, variables: Record<string, any>): string {\n    return `import requests\nimport json\n\nurl = \"${getEndpointUrl(endpointPath)}\"\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer {POSTHOG_PERSONAL_API_KEY}'\n}\n\npayload = {\n    \"variables_values\": {\n${generateVariablesJson(variables)}\n    }\n}\n\nresponse = requests.post(url, headers=headers, data=json.dumps(payload))\nprint(response.json())`\n}\n\nfunction generateNodeExample(endpointPath: string, variables: Record<string, any>): string {\n    return `const fetch = require('node-fetch');\n\nconst url = '${getEndpointUrl(endpointPath)}';\n\nconst headers = {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer {POSTHOG_PERSONAL_API_KEY}'\n};\n\nconst payload = {\n    \"variables_values\": {\n${generateVariablesJson(variables)}\n    }\n};\n\nfetch(url, {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify(payload)\n})\n.then(response => response.json())\n.then(data => console.log(data))\n.catch(error => console.error('Error:', error));`\n}\n\nexport function EndpointCodeExamples({ tabId }: EndpointCodeExamplesProps): JSX.Element {\n    const { setActiveCodeExampleTab } = useActions(endpointLogic({ tabId }))\n    const { activeCodeExampleTab, endpoint } = useValues(endpointLogic({ tabId }))\n\n    if (!endpoint) {\n        return <></>\n    }\n\n    const variables = endpoint.parameters || {}\n\n    const getCodeExample = (tab: CodeExampleTab): string => {\n        switch (tab) {\n            case 'terminal':\n                return generateTerminalExample(endpoint.endpoint_path, variables)\n            case 'python':\n                return generatePythonExample(endpoint.endpoint_path, variables)\n            case 'nodejs':\n                return generateNodeExample(endpoint.endpoint_path, variables)\n            default:\n                return generateTerminalExample(endpoint.endpoint_path, variables)\n        }\n    }\n\n    const getLanguage = (tab: CodeExampleTab): Language => {\n        switch (tab) {\n            case 'terminal':\n                return Language.Bash\n            case 'python':\n                return Language.Python\n            case 'nodejs':\n                return Language.JavaScript\n            default:\n                return Language.Bash\n        }\n    }\n\n    return (\n        <SceneSection title=\"How to call this endpoint\">\n            <div className=\"flex flex-col gap-4\">\n                <div>\n                    <LemonSelect\n                        options={[\n                            { value: 'terminal', label: 'Terminal' },\n                            { value: 'python', label: 'Python' },\n                            { value: 'nodejs', label: 'Node.js' },\n                        ]}\n                        onChange={(val) => {\n                            if (val) {\n                                setActiveCodeExampleTab(val as CodeExampleTab)\n                            }\n                        }}\n                        value={activeCodeExampleTab}\n                    />\n                </div>\n                <div>\n                    <CodeSnippet language={getLanguage(activeCodeExampleTab)} wrap={true}>\n                        {getCodeExample(activeCodeExampleTab)}\n                    </CodeSnippet>\n                </div>\n            </div>\n        </SceneSection>\n    )\n}\n"],"names":[],"sourceRoot":""}