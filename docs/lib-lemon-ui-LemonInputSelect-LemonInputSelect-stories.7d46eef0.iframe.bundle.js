"use strict";(self.webpackChunk_posthog_storybook=self.webpackChunk_posthog_storybook||[]).push([[10223],{"../../frontend/src/lib/lemon-ui/LemonInputSelect/LemonInputSelect.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CountModeAllSelected:()=>CountModeAllSelected,CountModeNoneSelected:()=>CountModeNoneSelected,CountModePartiallySelected:()=>CountModePartiallySelected,CountModeWithSelectClear:()=>CountModeWithSelectClear,Default:()=>Default,Disabled:()=>Disabled,EmptyLoading:()=>EmptyLoading,Loading:()=>Loading,MultipleSelect:()=>MultipleSelect,MultipleSelectWithCustom:()=>MultipleSelectWithCustom,NoOptions:()=>NoOptions,PrefilledManyValues:()=>PrefilledManyValues,SingleOptionWithCustom:()=>SingleOptionWithCustom,TypedValuesBackwardsCompatibility:()=>TypedValuesBackwardsCompatibility,TypedValuesBooleanExample:()=>TypedValuesBooleanExample,WithClearOnly:()=>WithClearOnly,WithSelectAllAndClear:()=>WithSelectAllAndClear,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var lib_utils__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../frontend/src/lib/utils.tsx"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),_ProfilePicture__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../frontend/src/lib/lemon-ui/ProfilePicture/index.ts"),_LemonInputSelect__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../../frontend/src/lib/lemon-ui/LemonInputSelect/LemonInputSelect.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");let names=["ben","marius","paul","tiina","tim","james","neil","tom","annika","thomas","eric","yakko","manoel","leon","lottie","charles"],__WEBPACK_DEFAULT_EXPORT__={title:"Lemon UI/Lemon Input Select",component:_LemonInputSelect__WEBPACK_IMPORTED_MODULE_3__.n,args:{options:names.map((x,i)=>({key:`user-${i}`,labelComponent:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)("span",{className:"flex gap-2 items-center",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_ProfilePicture__WEBPACK_IMPORTED_MODULE_2__.Y,{user:{first_name:x,email:`${x}@posthog.com`},size:"sm"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)("span",{children:[(0,lib_utils__WEBPACK_IMPORTED_MODULE_0__.fm)(x)," ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)("b",{children:`<${x}@posthog.com>`})]})]}),label:`${(0,lib_utils__WEBPACK_IMPORTED_MODULE_0__.fm)(x)} <${x}@posthog.com>`}))},tags:["autodocs"]},Default={args:{placeholder:"Pick one email",mode:"single"}},MultipleSelect={args:{placeholder:"Pick email addresses",mode:"multiple"}},MultipleSelectWithCustom={args:{placeholder:"Enter URLs",mode:"multiple",allowCustomValues:!0,options:[{key:"http://posthog.com/docs",label:"http://posthog.com/docs"},{key:"http://posthog.com/pricing",label:"http://posthog.com/pricing"},{key:"http://posthog.com/products",label:"http://posthog.com/products"}]}},Disabled={args:{mode:"single",placeholder:"Disabled...",disabled:!0}},Loading={args:{mode:"single",placeholder:"Loading with options...",loading:!0},parameters:{testOptions:{waitForLoadersToDisappear:!1}}},EmptyLoading={args:{mode:"single",placeholder:"Loading without options...",options:[],loading:!0},parameters:{testOptions:{waitForLoadersToDisappear:!1}}},NoOptions={args:{mode:"multiple",allowCustomValues:!0,placeholder:"No options...",options:[]}},SingleOptionWithCustom={args:{mode:"single",allowCustomValues:!0,placeholder:"Only one option allowed but can be custom"}},PrefilledManyValues={args:{mode:"multiple",allowCustomValues:!0,value:names.map((_,i)=>`user-${i}`)}},WithSelectAllAndClear={args:{mode:"multiple",bulkActions:"select-and-clear-all"}},WithClearOnly={args:{mode:"multiple",bulkActions:"clear-all"}},CountModeAllSelected={args:{mode:"multiple",displayMode:"count",value:names.map((_,i)=>`user-${i}`)}},CountModePartiallySelected={args:{mode:"multiple",displayMode:"count",value:names.slice(0,10).map((_,i)=>`user-${i}`)}},CountModeNoneSelected={args:{mode:"multiple",displayMode:"count",value:[]}},CountModeWithSelectClear={args:{mode:"multiple",displayMode:"count",bulkActions:"select-and-clear-all",value:names.slice(0,5).map((_,i)=>`user-${i}`)}},TypedValuesBooleanExample={render:()=>{let[value,setValue]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)("div",{className:"space-y-4",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_LemonInputSelect__WEBPACK_IMPORTED_MODULE_3__.n,{mode:"multiple",placeholder:"Select boolean or string values",options:[{key:"bool-true",label:"Boolean True",value:!0},{key:"bool-false",label:"Boolean False",value:!1},{key:"some-variant",label:"String Variant",value:"some-variant"},{key:"string-true",label:'String "true"',value:"true"}],value:value,onChange:newValue=>{setValue(newValue)},className:"w-140"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)("div",{className:"bg-accent-highlight-secondary p-3 rounded",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)("strong",{children:"Selected values:"})," ",JSON.stringify(value)," ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)("br",{}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)("strong",{children:"Types:"})," [",value.map(v=>typeof v).join(", "),"]",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)("br",{}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)("em",{children:"Check browser console for onChange logs!"})]})]})},parameters:{docs:{description:{story:'Demonstrates typed values support with boolean and string types. Notice how the onChange callback receives the original typed values (true, false, "some-variant") rather than just strings. Check the browser console and the display below to see the typed values!'}}}},TypedValuesBackwardsCompatibility={render:()=>{let[value,setValue]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)("div",{className:"space-y-4",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_LemonInputSelect__WEBPACK_IMPORTED_MODULE_3__.n,{mode:"multiple",placeholder:"Select string options (backwards compatible)",options:[{key:"option1",label:"Option 1"},{key:"option2",label:"Option 2"},{key:"option3",label:"Option 3"}],value:value,onChange:newValue=>{setValue(newValue)},className:"w-140"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)("div",{className:"bg-accent-highlight-secondary p-3 rounded",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)("strong",{children:"Selected values:"})," ",JSON.stringify(value)," ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)("br",{}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)("strong",{children:"Types:"})," [",value.map(v=>typeof v).join(", "),"]",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)("br",{}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)("em",{children:"Works exactly as before - no breaking changes! Check browser console for onChange logs!"})]})]})},parameters:{docs:{description:{story:"Shows backwards compatibility - existing string-only usage continues to work exactly as before. All values are strings and the component behaves identically to the previous version."}}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  args: {\n    placeholder: 'Pick one email',\n    mode: 'single'\n  }\n}",...Default.parameters?.docs?.source}}},MultipleSelect.parameters={...MultipleSelect.parameters,docs:{...MultipleSelect.parameters?.docs,source:{originalSource:"{\n  args: {\n    placeholder: 'Pick email addresses',\n    mode: 'multiple'\n  }\n}",...MultipleSelect.parameters?.docs?.source}}},MultipleSelectWithCustom.parameters={...MultipleSelectWithCustom.parameters,docs:{...MultipleSelectWithCustom.parameters?.docs,source:{originalSource:"{\n  args: {\n    placeholder: 'Enter URLs',\n    mode: 'multiple',\n    allowCustomValues: true,\n    options: [{\n      key: 'http://posthog.com/docs',\n      label: 'http://posthog.com/docs'\n    }, {\n      key: 'http://posthog.com/pricing',\n      label: 'http://posthog.com/pricing'\n    }, {\n      key: 'http://posthog.com/products',\n      label: 'http://posthog.com/products'\n    }]\n  }\n}",...MultipleSelectWithCustom.parameters?.docs?.source}}},Disabled.parameters={...Disabled.parameters,docs:{...Disabled.parameters?.docs,source:{originalSource:"{\n  args: {\n    mode: 'single',\n    placeholder: 'Disabled...',\n    disabled: true\n  }\n}",...Disabled.parameters?.docs?.source}}},Loading.parameters={...Loading.parameters,docs:{...Loading.parameters?.docs,source:{originalSource:"{\n  args: {\n    mode: 'single',\n    placeholder: 'Loading with options...',\n    loading: true\n  },\n  parameters: {\n    testOptions: {\n      waitForLoadersToDisappear: false\n    }\n  }\n}",...Loading.parameters?.docs?.source}}},EmptyLoading.parameters={...EmptyLoading.parameters,docs:{...EmptyLoading.parameters?.docs,source:{originalSource:"{\n  args: {\n    mode: 'single',\n    placeholder: 'Loading without options...',\n    options: [],\n    loading: true\n  },\n  parameters: {\n    testOptions: {\n      waitForLoadersToDisappear: false\n    }\n  }\n}",...EmptyLoading.parameters?.docs?.source}}},NoOptions.parameters={...NoOptions.parameters,docs:{...NoOptions.parameters?.docs,source:{originalSource:"{\n  args: {\n    mode: 'multiple',\n    allowCustomValues: true,\n    placeholder: 'No options...',\n    options: []\n  }\n}",...NoOptions.parameters?.docs?.source}}},SingleOptionWithCustom.parameters={...SingleOptionWithCustom.parameters,docs:{...SingleOptionWithCustom.parameters?.docs,source:{originalSource:"{\n  args: {\n    mode: 'single',\n    allowCustomValues: true,\n    placeholder: 'Only one option allowed but can be custom'\n  }\n}",...SingleOptionWithCustom.parameters?.docs?.source}}},PrefilledManyValues.parameters={...PrefilledManyValues.parameters,docs:{...PrefilledManyValues.parameters?.docs,source:{originalSource:"{\n  args: {\n    mode: 'multiple',\n    allowCustomValues: true,\n    value: names.map((_, i) => `user-${i}`)\n  }\n}",...PrefilledManyValues.parameters?.docs?.source}}},WithSelectAllAndClear.parameters={...WithSelectAllAndClear.parameters,docs:{...WithSelectAllAndClear.parameters?.docs,source:{originalSource:"{\n  args: {\n    mode: 'multiple',\n    bulkActions: 'select-and-clear-all'\n  }\n}",...WithSelectAllAndClear.parameters?.docs?.source}}},WithClearOnly.parameters={...WithClearOnly.parameters,docs:{...WithClearOnly.parameters?.docs,source:{originalSource:"{\n  args: {\n    mode: 'multiple',\n    bulkActions: 'clear-all'\n  }\n}",...WithClearOnly.parameters?.docs?.source}}},CountModeAllSelected.parameters={...CountModeAllSelected.parameters,docs:{...CountModeAllSelected.parameters?.docs,source:{originalSource:"{\n  args: {\n    mode: 'multiple',\n    displayMode: 'count',\n    value: names.map((_, i) => `user-${i}`)\n  }\n}",...CountModeAllSelected.parameters?.docs?.source}}},CountModePartiallySelected.parameters={...CountModePartiallySelected.parameters,docs:{...CountModePartiallySelected.parameters?.docs,source:{originalSource:"{\n  args: {\n    mode: 'multiple',\n    displayMode: 'count',\n    value: names.slice(0, 10).map((_, i) => `user-${i}`)\n  }\n}",...CountModePartiallySelected.parameters?.docs?.source}}},CountModeNoneSelected.parameters={...CountModeNoneSelected.parameters,docs:{...CountModeNoneSelected.parameters?.docs,source:{originalSource:"{\n  args: {\n    mode: 'multiple',\n    displayMode: 'count',\n    value: []\n  }\n}",...CountModeNoneSelected.parameters?.docs?.source}}},CountModeWithSelectClear.parameters={...CountModeWithSelectClear.parameters,docs:{...CountModeWithSelectClear.parameters?.docs,source:{originalSource:"{\n  args: {\n    mode: 'multiple',\n    displayMode: 'count',\n    bulkActions: 'select-and-clear-all',\n    value: names.slice(0, 5).map((_, i) => `user-${i}`)\n  }\n}",...CountModeWithSelectClear.parameters?.docs?.source}}},TypedValuesBooleanExample.parameters={...TypedValuesBooleanExample.parameters,docs:{...TypedValuesBooleanExample.parameters?.docs,source:{originalSource:"{\n  render: () => {\n    const [value, setValue] = useState<(boolean | string)[]>([]);\n    const handleChange = (newValue: (boolean | string)[]): void => {\n      setValue(newValue);\n    };\n    return <div className=\"space-y-4\">\n                <LemonInputSelect<boolean | string> mode=\"multiple\" placeholder=\"Select boolean or string values\" options={[{\n        key: 'bool-true',\n        label: 'Boolean True',\n        value: true\n      }, {\n        key: 'bool-false',\n        label: 'Boolean False',\n        value: false\n      }, {\n        key: 'some-variant',\n        label: 'String Variant',\n        value: 'some-variant'\n      }, {\n        key: 'string-true',\n        label: 'String \"true\"',\n        value: 'true'\n      }]} value={value} onChange={handleChange} className=\"w-140\" />\n                <div className=\"bg-accent-highlight-secondary p-3 rounded\">\n                    <strong>Selected values:</strong> {JSON.stringify(value)} <br />\n                    <strong>Types:</strong> [{value.map(v => typeof v).join(', ')}]\n                    <br />\n                    <em>Check browser console for onChange logs!</em>\n                </div>\n            </div>;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Demonstrates typed values support with boolean and string types. Notice how the onChange callback receives the original typed values (true, false, \"some-variant\") rather than just strings. Check the browser console and the display below to see the typed values!'\n      }\n    }\n  }\n}",...TypedValuesBooleanExample.parameters?.docs?.source}}},TypedValuesBackwardsCompatibility.parameters={...TypedValuesBackwardsCompatibility.parameters,docs:{...TypedValuesBackwardsCompatibility.parameters?.docs,source:{originalSource:"{\n  render: () => {\n    const [value, setValue] = useState<string[]>([]);\n    const handleChange = (newValue: string[]): void => {\n      setValue(newValue);\n    };\n    return <div className=\"space-y-4\">\n                <LemonInputSelect mode=\"multiple\" placeholder=\"Select string options (backwards compatible)\" options={[{\n        key: 'option1',\n        label: 'Option 1'\n      }, {\n        key: 'option2',\n        label: 'Option 2'\n      }, {\n        key: 'option3',\n        label: 'Option 3'\n      }]} value={value} onChange={handleChange} className=\"w-140\" />\n                <div className=\"bg-accent-highlight-secondary p-3 rounded\">\n                    <strong>Selected values:</strong> {JSON.stringify(value)} <br />\n                    <strong>Types:</strong> [{value.map(v => typeof v).join(', ')}]\n                    <br />\n                    <em>Works exactly as before - no breaking changes! Check browser console for onChange logs!</em>\n                </div>\n            </div>;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Shows backwards compatibility - existing string-only usage continues to work exactly as before. All values are strings and the component behaves identically to the previous version.'\n      }\n    }\n  }\n}",...TypedValuesBackwardsCompatibility.parameters?.docs?.source}}};let __namedExportsOrder=["Default","MultipleSelect","MultipleSelectWithCustom","Disabled","Loading","EmptyLoading","NoOptions","SingleOptionWithCustom","PrefilledManyValues","WithSelectAllAndClear","WithClearOnly","CountModeAllSelected","CountModePartiallySelected","CountModeNoneSelected","CountModeWithSelectClear","TypedValuesBooleanExample","TypedValuesBackwardsCompatibility"]}}]);