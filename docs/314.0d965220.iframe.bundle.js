(window.webpackJsonp=window.webpackJsonp||[]).push([[314],{"./frontend/src/scenes/issues/Issues.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"IssuesSettings",(function(){return IssuesSettings})),__webpack_require__.d(__webpack_exports__,"openIssuesConfigDialog",(function(){return openIssuesConfigDialog})),__webpack_require__.d(__webpack_exports__,"Issues",(function(){return Issues})),__webpack_require__.d(__webpack_exports__,"scene",(function(){return scene}));var src=__webpack_require__("./frontend/@posthog/lemon-ui/src/index.ts"),PageHeader=__webpack_require__("./frontend/src/lib/components/PageHeader.tsx"),Query=__webpack_require__("./frontend/src/queries/Query/Query.tsx"),schema=__webpack_require__("./frontend/src/queries/schema.ts"),types=__webpack_require__("./frontend/src/types.ts"),DateRange=__webpack_require__("./frontend/src/queries/nodes/DataNode/DateRange.tsx"),EventPropertyFilters=__webpack_require__("./frontend/src/queries/nodes/EventsNode/EventPropertyFilters.tsx"),LemonDialog=__webpack_require__("./frontend/src/lib/lemon-ui/LemonDialog/index.ts"),icons=__webpack_require__("./frontend/src/lib/lemon-ui/icons/index.ts"),EventName=__webpack_require__("./frontend/src/scenes/actions/EventName.tsx"),index_esm=__webpack_require__("./node_modules/.pnpm/kea@3.1.5_react@16.14.0/node_modules/kea/lib/index.esm.js");const issuesLogic=Object(index_esm.kea)([Object(index_esm.path)(["scenes","issues","issuesLogic"]),Object(index_esm.actions)({setIssueEvent:event=>({event:event}),setQuery:query=>({query:query})}),Object(index_esm.reducers)({issueEvent:["$bug_report",{persist:!0},{setIssueEvent:(_,_ref)=>{let{event:event}=_ref;return event.trim().length>0?event:"$bug_report"}}],providedQuery:[null,{setQuery:(_,_ref2)=>{let{query:query}=_ref2;return query}}]}),Object(index_esm.selectors)({query:[s=>[s.providedQuery,s.issueEvent],(providedQuery,issueEvent)=>{const q=providedQuery||{kind:schema.a.EventsQuery,select:["*","event","person","timestamp"],properties:[],event:issueEvent,after:"-24h",limit:100};return q.event=issueEvent,q}],tableQuery:[s=>[s.query],query=>({kind:schema.a.DataTableNode,full:!1,showOpenEditorButton:!1,source:{...query}})]})]);var jsx_runtime=__webpack_require__("./node_modules/.pnpm/react@16.14.0/node_modules/react/jsx-runtime.js");function IssuesSettings(){const{issueEvent:issueEvent}=Object(index_esm.useValues)(issuesLogic),{setIssueEvent:setIssueEvent}=Object(index_esm.useActions)(issuesLogic);return Object(jsx_runtime.jsxs)("div",{className:"flex flex-col gap-2",children:[Object(jsx_runtime.jsx)("h2",{children:"Issues settings"}),Object(jsx_runtime.jsxs)("div",{children:["Configure which events are used for issue reporting. If this is not set we use ",Object(jsx_runtime.jsx)("code",{children:"$bug_report"})]}),Object(jsx_runtime.jsx)(EventName.a,{value:issueEvent,onChange:value=>setIssueEvent(value)})]})}function openIssuesConfigDialog(){LemonDialog.a.open({title:"Issue settings",content:Object(jsx_runtime.jsx)(IssuesSettings,{}),width:600,primaryButton:{children:"Done"}})}const Issues=()=>{const{query:query,issueEvent:issueEvent,tableQuery:tableQuery}=Object(index_esm.useValues)(issuesLogic),{setQuery:setQuery}=Object(index_esm.useActions)(issuesLogic);return Object(jsx_runtime.jsxs)("div",{children:[Object(jsx_runtime.jsx)(PageHeader.a,{title:Object(jsx_runtime.jsxs)("div",{className:"flex items-center gap-2",children:["Issues",Object(jsx_runtime.jsx)(src.LemonTag,{type:"warning",className:"uppercase",children:"BETA"})]}),buttons:Object(jsx_runtime.jsx)(jsx_runtime.Fragment,{children:Object(jsx_runtime.jsx)(src.LemonButton,{type:"secondary",icon:Object(jsx_runtime.jsx)(icons.Kc,{}),onClick:()=>openIssuesConfigDialog(),children:"Configure"})})}),Object(jsx_runtime.jsxs)("div",{className:"flex flex-row space-x-2",children:[Object(jsx_runtime.jsx)(DateRange.a,{query:query,setQuery:setQuery}),Object(jsx_runtime.jsx)(EventPropertyFilters.a,{query:query,setQuery:q=>setQuery(q)})]}),Object(jsx_runtime.jsx)(src.LemonDivider,{}),Object(jsx_runtime.jsx)("h2",{children:"Issue count"}),Object(jsx_runtime.jsx)(Query.a,{query:{kind:schema.a.LegacyQuery,filters:{insight:types.F.TRENDS,date_from:query.after,events:[{id:issueEvent,name:issueEvent,type:"events",order:0}],display:types.k.ActionsBar,properties:query.properties}},context:{emptyStateHeading:"Yay! No issues found!",emptyStateDetail:""}}),Object(jsx_runtime.jsx)(src.LemonDivider,{}),Object(jsx_runtime.jsx)("h2",{children:"Open issues"}),Object(jsx_runtime.jsx)(Query.a,{query:tableQuery,context:{emptyStateHeading:"Yay! No issues found",emptyStateDetail:""}})]})},scene={component:Issues}}}]);