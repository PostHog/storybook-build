"use strict";(self.webpackChunk_posthog_storybook=self.webpackChunk_posthog_storybook||[]).push([[73086],{"../../frontend/src/scenes/max/Max.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ChatHistory:()=>ChatHistory,ChatHistoryEmpty:()=>ChatHistoryEmpty,ChatHistoryLoading:()=>ChatHistoryLoading,ChatWithUIContext:()=>ChatWithUIContext,EmptyThreadLoading:()=>EmptyThreadLoading,ExpandedFloatingInput:()=>ExpandedFloatingInput,ExpandedFloatingInputMobileView:()=>ExpandedFloatingInputMobileView,ExpandedFloatingInputThread:()=>ExpandedFloatingInputThread,ExpandedFloatingInputWithContextualTools:()=>ExpandedFloatingInputWithContextualTools,ExpandedFloatingInputWithSuggestions:()=>ExpandedFloatingInputWithSuggestions,FloatingInput:()=>FloatingInput,GenerationFailureThread:()=>GenerationFailureThread,MaxInstanceWithContextualTools:()=>MaxInstanceWithContextualTools,Thread:()=>Thread,ThreadScrollsToBottomOnNewMessages:()=>ThreadScrollsToBottomOnNewMessages,ThreadWithConversationLoading:()=>ThreadWithConversationLoading,ThreadWithEmptyConversation:()=>ThreadWithEmptyConversation,ThreadWithFailedGeneration:()=>ThreadWithFailedGeneration,ThreadWithForm:()=>ThreadWithForm,ThreadWithInProgressConversation:()=>ThreadWithInProgressConversation,ThreadWithMultipleContextObjects:()=>ThreadWithMultipleContextObjects,ThreadWithOpenedSuggestions:()=>ThreadWithOpenedSuggestions,ThreadWithOpenedSuggestionsMobile:()=>ThreadWithOpenedSuggestionsMobile,ThreadWithRateLimit:()=>ThreadWithRateLimit,ThreadWithRateLimitNoRetryAfter:()=>ThreadWithRateLimitNoRetryAfter,Welcome:()=>Welcome,WelcomeFeaturePreviewAutoEnrolled:()=>WelcomeFeaturePreviewAutoEnrolled,WelcomeWithLatestConversations:()=>WelcomeWithLatestConversations,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Max_stories});var index_esm=__webpack_require__("../../node_modules/.pnpm/kea@3.1.6_react@18.2.0/node_modules/kea/lib/index.esm.js"),api_mock=__webpack_require__("../../frontend/src/lib/api.mock.ts"),react=__webpack_require__("../../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),bundle_mjs=__webpack_require__("../../node_modules/.pnpm/tailwind-merge@2.2.2/node_modules/tailwind-merge/dist/bundle-mjs.mjs"),browser=__webpack_require__("../../frontend/src/mocks/browser.tsx"),schema_assistant_messages=__webpack_require__("../../frontend/src/queries/schema/schema-assistant-messages.ts"),maxTypes=__webpack_require__("../../frontend/src/scenes/max/maxTypes.ts");let failureMessage_namespaceObject=JSON.parse('{"type":"ai/failure","content":"Oops! It looks like Iâ€™m having trouble answering this. Could you please try again?","id":"test-failure-message"}'),summaryMessage_namespaceObject=JSON.parse('{"type":"ai","content":"Looks like no pageviews have occured. Get some damn users.","id":"test-summary-message"}'),visualizationMessage_namespaceObject=JSON.parse('{"type":"ai/viz","plan":"Test plan","query":{"aggregation_group_type_index":null,"breakdownFilter":{"breakdown_hide_other_aggregation":null,"breakdown_histogram_bin_count":null,"breakdown_limit":null,"breakdowns":[{"group_type_index":null,"histogram_bin_count":null,"normalize_url":null,"property":"$current_url","type":"event"}]},"compareFilter":null,"dateRange":{"date_from":"-30d","date_to":null,"explicitDate":false},"filterTestAccounts":true,"interval":"day","kind":"TrendsQuery","properties":[],"samplingFactor":null,"series":[{"custom_name":"Pageviews","event":"$pageview","fixedProperties":null,"kind":"EventsNode","math":"total","math_group_type_index":null,"math_property":null,"name":null,"orderBy":null,"properties":null,"response":null}],"trendsFilter":{"aggregationAxisFormat":"numeric","aggregationAxisPostfix":null,"aggregationAxisPrefix":null,"breakdown_histogram_bin_count":null,"decimalPlaces":null,"display":"ActionsBar","formula":null,"hiddenLegendIndexes":null,"showLabelsOnSeries":null,"showLegend":false,"showPercentStackView":false,"showValuesOnSeries":false,"smoothingIntervals":1,"yAxisScaleType":null}},"id":"test-visualization-message"}'),CONVERSATION_ID="b1b4b3b4-1b3b-4b3b-1b3b4b3b4b3b",humanMessage={type:schema_assistant_messages.pj.Human,content:"What are my most popular pages?",id:"human-1"},reasoningMessage1={type:schema_assistant_messages.pj.Reasoning,content:"Picking relevant events and properties",id:"reasoning-1"},reasoningMessage2={type:schema_assistant_messages.pj.Reasoning,content:"Generating trends",id:"reasoning-2"};function generateChunk(events){return events.map(event=>event.startsWith("event:")?`${event}
`:`${event}

`).join("")}let chatResponseChunk=generateChunk(["event: conversation",`data: ${JSON.stringify({id:CONVERSATION_ID})}`,"event: message",`data: ${JSON.stringify(humanMessage)}`,"event: message",`data: ${JSON.stringify(reasoningMessage1)}`,"event: message",`data: ${JSON.stringify(reasoningMessage2)}`,"event: message",`data: ${JSON.stringify(visualizationMessage_namespaceObject)}`,"event: message",`data: ${JSON.stringify(summaryMessage_namespaceObject)}`]);generateChunk(["event: message",`data: ${JSON.stringify(reasoningMessage1)}`,"event: message",`data: ${JSON.stringify(reasoningMessage2)}`]);let generationFailure={type:schema_assistant_messages.PP.GenerationError},responseWithReasoningStepsOnly={...visualizationMessage_namespaceObject,answer:null},generationFailureChunk=generateChunk(["event: message",`data: ${JSON.stringify(responseWithReasoningStepsOnly)}`,"event: status",`data: ${JSON.stringify(generationFailure)}`]),failureChunk=generateChunk(["event: message",`data: ${JSON.stringify(failureMessage_namespaceObject)}`]),formMessage={type:schema_assistant_messages.pj.Assistant,content:"Does this look like a good summary of what your product does?",id:"assistant-1",meta:{form:{options:[{value:"Yes, save this",variant:"primary"},{value:"No, not quite right"}]}}},formChunk=generateChunk(["event: message",`data: ${JSON.stringify(formMessage)}`]),longMessage={type:schema_assistant_messages.pj.Assistant,content:"This\n\nis\n\na\n\nlong\n\nmessage\n\nthat\n\nshould\n\nbe\n\nsplit\n\ninto\n\nmultiple\n\nlines",id:"assistant-2"},longResponseChunk=generateChunk(["event: message",`data: ${JSON.stringify(humanMessage)}`,"event: message",`data: ${JSON.stringify(longMessage)}`]),humanMessageWithContext={type:schema_assistant_messages.pj.Human,content:"Tell me about the $pageview event",id:"human-context",ui_context:{events:[{id:"test-event-1",name:"$pageview",type:maxTypes.H.EVENT,description:"Page view event"}]}},assistantResponseWithContext={type:schema_assistant_messages.pj.Assistant,content:"Based on the event context you provided, the $pageview event is a standard event that tracks when users view pages in your application. This event helps you understand user navigation patterns and page popularity. It typically captures properties like the page URL, referrer, and timestamp.",id:"assistant-context"},chatResponseWithEventContext=generateChunk(["event: conversation",`data: ${JSON.stringify({id:CONVERSATION_ID})}`,"event: message",`data: ${JSON.stringify(humanMessageWithContext)}`,"event: message",`data: ${JSON.stringify(assistantResponseWithContext)}`]),conversationList_namespaceObject=JSON.parse('{"count":2,"next":null,"previous":null,"results":[{"id":"in_progress","status":"in_progress","title":"Loading the thread in progress","created_at":"2025-04-29T17:44:21.654307Z","updated_at":"2025-04-29T17:44:29.184791Z","messages":[{"type":"human","content":"What are my most popular pages?","id":"human-1"}]},{"id":"empty","status":"idle","title":"Counting users chatting from USA","created_at":"2025-04-29T17:44:21.654307Z","updated_at":"2025-04-29T17:44:29.184791Z","messages":[]},{"id":"poem","status":"idle","title":"Writing poems","created_at":"2025-04-29T17:44:21.654307Z","updated_at":"2025-04-29T17:44:29.184791Z","messages":[{"content":"write a poem","id":"human-1","type":"human"},{"content":"Sure, here\'s a little poem for you:\\n\\nIn the world of data, where numbers dance,  \\nPostHog stands ready, to give insights a chance.  \\nWith dashboards and charts, it paints the scene,  \\nTurning raw data into a story unseen.  \\n\\nFrom trends to funnels, retention too,  \\nIt helps you understand what your users do.  \\nSo gather your data, let PostHog play,  \\nAnd watch as insights light up your day!","id":"ai-1","meta":null,"tool_calls":[],"type":"ai"},{"content":"write another poem","id":"human-2","type":"human"},{"content":"Of course, here\'s another one for you:\\n\\nIn the forest of files, where hedgehogs roam,  \\nA platform was born, a digital home.  \\nDropbox for hedgehogs, sharing with flair,  \\nCollaborating with ease, no need to despair.  \\n\\nWith quills of data, we scurry and share,  \\nBuilding connections, with nary a care.  \\nSo join the adventure, in this digital bog,  \\nWhere files find a home, with PostHog!","id":"ai-2","meta":null,"tool_calls":[],"type":"ai"},{"content":"write another poem","id":"human-3","type":"human"},{"content":"Of course, here\'s another one for you:\\n\\nIn the forest of files, where hedgehogs roam,  \\nA platform was born, a digital home.  \\nDropbox for hedgehogs, sharing with flair,  \\nCollaborating with ease, no need to despair.  \\n\\nWith quills of data, we scurry and share,  \\nBuilding connections, with nary a care.  \\nSo join the adventure, in this digital bog,  \\nWhere files find a home, with PostHog!","id":"ai-3","meta":null,"tool_calls":[],"type":"ai"}]}]}');var Max=__webpack_require__("../../frontend/src/scenes/max/Max.tsx"),maxContextLogic=__webpack_require__("../../frontend/src/scenes/max/maxContextLogic.ts"),MaxFloatingInput=__webpack_require__("../../frontend/src/scenes/max/MaxFloatingInput.tsx"),maxGlobalLogic=__webpack_require__("../../frontend/src/scenes/max/maxGlobalLogic.tsx"),maxLogic=__webpack_require__("../../frontend/src/scenes/max/maxLogic.tsx"),maxThreadLogic=__webpack_require__("../../frontend/src/scenes/max/maxThreadLogic.tsx"),sidePanelLogic=__webpack_require__("../../frontend/src/layout/navigation-3000/sidepanel/sidePanelLogic.tsx"),constants=__webpack_require__("../../frontend/src/lib/constants.tsx"),useOnMountEffect=__webpack_require__("../../frontend/src/lib/hooks/useOnMountEffect.ts"),jsx_runtime=__webpack_require__("../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");let Max_stories={title:"Scenes-App/Max AI",decorators:[(0,browser.x8)({post:{"/api/environments/:team_id/conversations/":(_,res,ctx)=>res(ctx.text(chatResponseChunk))},get:{"/api/organizations/@current/":()=>[200,{...api_mock.On,is_ai_data_processing_approved:!0}],"/api/environments/:team_id/conversations/":()=>[200,conversationList_namespaceObject],[`/api/environments/:team_id/conversations/${CONVERSATION_ID}/`]:()=>[200,{id:CONVERSATION_ID,status:"idle",title:"Test Conversation",created_at:"2025-04-29T17:44:21.654307Z",updated_at:"2025-04-29T17:44:29.184791Z",messages:[]}]}})],parameters:{layout:"fullscreen",viewMode:"story",mockDate:"2023-01-28",featureFlags:[constants.y8.ARTIFICIAL_HOG,constants.y8.FLOATING_ARTIFICIAL_HOG]}},Template=_ref=>{let{className,...props}=_ref;return(0,jsx_runtime.jsx)("div",{className:(0,bundle_mjs.m6)("relative flex flex-col h-fit",className),children:(0,jsx_runtime.jsx)(Max.MaxInstance,{...props})})},Welcome=()=>((0,browser.ok)({get:{"/api/organizations/@current/":()=>[200,{...api_mock.On,is_ai_data_processing_approved:!1}]}}),(0,jsx_runtime.jsx)(Template,{}));Welcome.parameters={testOptions:{waitForLoadersToDisappear:!1}};let WelcomeFeaturePreviewAutoEnrolled=()=>(0,jsx_runtime.jsx)(Template,{});WelcomeFeaturePreviewAutoEnrolled.parameters={featureFlags:[],testOptions:{waitForLoadersToDisappear:!1}};let Thread=()=>{let{setConversationId}=(0,index_esm.useActions)(maxLogic.v8),{askMax}=(0,index_esm.useActions)((0,maxThreadLogic.r)({conversationId:CONVERSATION_ID,conversation:null})),{dataProcessingAccepted}=(0,index_esm.useValues)(maxGlobalLogic.V);return((0,react.useEffect)(()=>{dataProcessingAccepted&&setTimeout(()=>{setConversationId(CONVERSATION_ID),askMax(humanMessage.content)},0)},[dataProcessingAccepted,setConversationId,askMax]),dataProcessingAccepted)?(0,jsx_runtime.jsx)(Template,{}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})},EmptyThreadLoading=()=>{(0,browser.ok)({post:{"/api/environments/:team_id/conversations/":(_req,_res,ctx)=>[ctx.delay("infinite")]}});let{setConversationId}=(0,index_esm.useActions)(maxLogic.v8),threadLogic=(0,maxThreadLogic.r)({conversationId:CONVERSATION_ID,conversation:null}),{askMax}=(0,index_esm.useActions)(threadLogic),{dataProcessingAccepted}=(0,index_esm.useValues)(maxGlobalLogic.V);return((0,react.useEffect)(()=>{dataProcessingAccepted&&setTimeout(()=>{setConversationId(CONVERSATION_ID),askMax(humanMessage.content)},0)},[dataProcessingAccepted,setConversationId,askMax]),dataProcessingAccepted)?(0,jsx_runtime.jsx)(Template,{}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})};EmptyThreadLoading.parameters={testOptions:{waitForLoadersToDisappear:!1}};let GenerationFailureThread=()=>{(0,browser.ok)({post:{"/api/environments/:team_id/conversations/":(_,res,ctx)=>res(ctx.text(generationFailureChunk))}});let{setConversationId}=(0,index_esm.useActions)(maxLogic.v8),threadLogic=(0,maxThreadLogic.r)({conversationId:CONVERSATION_ID,conversation:null}),{askMax,setMessageStatus}=(0,index_esm.useActions)(threadLogic),{threadRaw,threadLoading}=(0,index_esm.useValues)(threadLogic),{dataProcessingAccepted}=(0,index_esm.useValues)(maxGlobalLogic.V);return((0,react.useEffect)(()=>{dataProcessingAccepted&&setTimeout(()=>{setConversationId(CONVERSATION_ID),askMax(humanMessage.content)},0)},[dataProcessingAccepted,setConversationId,askMax]),(0,react.useEffect)(()=>{2!==threadRaw.length||threadLoading||setMessageStatus(1,"error")},[threadRaw.length,threadLoading,setMessageStatus]),dataProcessingAccepted)?(0,jsx_runtime.jsx)(Template,{}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})},ThreadWithFailedGeneration=()=>{(0,browser.ok)({post:{"/api/environments/:team_id/conversations/":(_,res,ctx)=>res(ctx.text(failureChunk))}});let{setConversationId}=(0,index_esm.useActions)(maxLogic.v8),threadLogic=(0,maxThreadLogic.r)({conversationId:CONVERSATION_ID,conversation:null}),{askMax}=(0,index_esm.useActions)(threadLogic),{dataProcessingAccepted}=(0,index_esm.useValues)(maxGlobalLogic.V);return((0,react.useEffect)(()=>{dataProcessingAccepted&&setTimeout(()=>{setConversationId(CONVERSATION_ID),askMax(humanMessage.content)},0)},[dataProcessingAccepted,setConversationId,askMax]),dataProcessingAccepted)?(0,jsx_runtime.jsx)(Template,{}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})},ThreadWithRateLimit=()=>{(0,browser.ok)({post:{"/api/environments/:team_id/conversations/":(_,res,ctx)=>res(ctx.text(chatResponseChunk),ctx.set({"Retry-After":"3899"}),ctx.status(429))}});let{setConversationId}=(0,index_esm.useActions)(maxLogic.v8),threadLogic=(0,maxThreadLogic.r)({conversationId:CONVERSATION_ID,conversation:null}),{askMax}=(0,index_esm.useActions)(threadLogic),{dataProcessingAccepted}=(0,index_esm.useValues)(maxGlobalLogic.V);return((0,react.useEffect)(()=>{dataProcessingAccepted&&setTimeout(()=>{setConversationId(CONVERSATION_ID),askMax(humanMessage.content)},0)},[dataProcessingAccepted,setConversationId,askMax]),dataProcessingAccepted)?(0,jsx_runtime.jsx)(Template,{}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})},ThreadWithRateLimitNoRetryAfter=()=>{(0,browser.ok)({post:{"/api/environments/:team_id/conversations/":(_,res,ctx)=>res(ctx.text(chatResponseChunk),ctx.status(429))}});let{setConversationId}=(0,index_esm.useActions)(maxLogic.v8),threadLogic=(0,maxThreadLogic.r)({conversationId:CONVERSATION_ID,conversation:null}),{askMax}=(0,index_esm.useActions)(threadLogic),{dataProcessingAccepted}=(0,index_esm.useValues)(maxGlobalLogic.V);return((0,react.useEffect)(()=>{dataProcessingAccepted&&setTimeout(()=>{setConversationId(CONVERSATION_ID),askMax(humanMessage.content)},0)},[dataProcessingAccepted,setConversationId,askMax]),dataProcessingAccepted)?(0,jsx_runtime.jsx)(Template,{}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})},ThreadWithForm=()=>{(0,browser.ok)({post:{"/api/environments/:team_id/conversations/":(_,res,ctx)=>res(ctx.text(formChunk))}});let{setConversationId}=(0,index_esm.useActions)(maxLogic.v8),threadLogic=(0,maxThreadLogic.r)({conversationId:CONVERSATION_ID,conversation:null}),{askMax}=(0,index_esm.useActions)(threadLogic),{dataProcessingAccepted}=(0,index_esm.useValues)(maxGlobalLogic.V);return((0,react.useEffect)(()=>{dataProcessingAccepted&&setTimeout(()=>{setConversationId(CONVERSATION_ID),askMax(humanMessage.content)},0)},[dataProcessingAccepted,setConversationId,askMax]),dataProcessingAccepted)?(0,jsx_runtime.jsx)(Template,{}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})},ThreadWithConversationLoading=()=>{(0,browser.ok)({get:{"/api/environments/:team_id/conversations/":(_req,_res,ctx)=>[ctx.delay("infinite")]}});let{setConversationId}=(0,index_esm.useActions)(maxLogic.v8);return(0,react.useEffect)(()=>{setConversationId(CONVERSATION_ID)},[setConversationId]),(0,jsx_runtime.jsx)(Template,{})};ThreadWithConversationLoading.parameters={testOptions:{waitForLoadersToDisappear:!1}};let ThreadWithEmptyConversation=()=>{(0,browser.ok)({get:{"/api/environments/:team_id/conversations/":()=>[200,conversationList_namespaceObject]}});let{setConversationId}=(0,index_esm.useActions)(maxLogic.v8);return(0,react.useEffect)(()=>{setConversationId("empty")},[setConversationId]),(0,jsx_runtime.jsx)(Template,{})},ThreadWithInProgressConversation=()=>{(0,browser.ok)({get:{"/api/environments/:team_id/conversations/":()=>[200,conversationList_namespaceObject],"/api/environments/:team_id/conversations/in_progress/":(_req,_res,ctx)=>[ctx.delay("infinite")]}});let{setConversationId}=(0,index_esm.useActions)(maxLogic.v8);return(0,react.useEffect)(()=>{setConversationId("in_progress")},[setConversationId]),(0,jsx_runtime.jsx)(Template,{sidePanel:!0})};ThreadWithInProgressConversation.parameters={testOptions:{waitForLoadersToDisappear:!1}};let WelcomeWithLatestConversations=()=>((0,browser.ok)({get:{"/api/environments/:team_id/conversations/":()=>[200,conversationList_namespaceObject]}}),(0,jsx_runtime.jsx)(Template,{sidePanel:!0}));WelcomeWithLatestConversations.parameters={testOptions:{waitForLoadersToDisappear:!1}};let ChatHistory=()=>{(0,browser.ok)({get:{"/api/environments/:team_id/conversations/":()=>[200,conversationList_namespaceObject]}});let{toggleConversationHistory}=(0,index_esm.useActions)(maxLogic.v8);return(0,react.useEffect)(()=>{toggleConversationHistory(!0)},[toggleConversationHistory]),(0,jsx_runtime.jsx)(Template,{sidePanel:!0})};ChatHistory.parameters={testOptions:{waitForLoadersToDisappear:!1}};let ChatHistoryEmpty=()=>{(0,browser.ok)({get:{"/api/environments/:team_id/conversations/":()=>[400]}});let{toggleConversationHistory}=(0,index_esm.useActions)(maxLogic.v8);return(0,react.useEffect)(()=>{toggleConversationHistory(!0)},[toggleConversationHistory]),(0,jsx_runtime.jsx)(Template,{sidePanel:!0})};ChatHistoryEmpty.parameters={testOptions:{waitForLoadersToDisappear:!1}};let ChatHistoryLoading=()=>{(0,browser.ok)({get:{"/api/environments/:team_id/conversations/":(_req,_res,ctx)=>[ctx.delay("infinite")]}});let{toggleConversationHistory}=(0,index_esm.useActions)(maxLogic.v8);return(0,react.useEffect)(()=>{toggleConversationHistory(!0)},[toggleConversationHistory]),(0,jsx_runtime.jsx)(Template,{sidePanel:!0})};ChatHistoryLoading.parameters={testOptions:{waitForLoadersToDisappear:!1}};let ThreadWithOpenedSuggestionsMobile=()=>{let{setActiveGroup}=(0,index_esm.useActions)(maxLogic.v8);return(0,react.useEffect)(()=>{setActiveGroup(maxLogic.iv[3])},[setActiveGroup]),(0,jsx_runtime.jsx)(Template,{sidePanel:!0})};ThreadWithOpenedSuggestionsMobile.parameters={testOptions:{waitForLoadersToDisappear:!1},viewport:{defaultViewport:"mobile2"}};let ThreadWithOpenedSuggestions=()=>{let{setActiveGroup}=(0,index_esm.useActions)(maxLogic.v8);return(0,react.useEffect)(()=>{setActiveGroup(maxLogic.iv[3])},[setActiveGroup]),(0,jsx_runtime.jsx)(Template,{sidePanel:!0})};ThreadWithOpenedSuggestions.parameters={testOptions:{waitForLoadersToDisappear:!1}};let ThreadWithMultipleContextObjects=()=>{(0,browser.ok)({get:{"/api/environments/:team_id/conversations/":()=>[200,conversationList_namespaceObject]}});let{addOrUpdateContextInsight}=(0,index_esm.useActions)(maxContextLogic.U);return(0,react.useEffect)(()=>{addOrUpdateContextInsight({short_id:"insight-1",name:"Weekly Active Users",description:"Track weekly active users over time",query:{kind:"TrendsQuery",series:[{event:"$pageview"}]}}),addOrUpdateContextInsight({short_id:"insight-2",name:"Conversion Funnel",description:"User signup to activation funnel",query:{kind:"FunnelsQuery",series:[{event:"sign up"},{event:"first action"}]}})},[addOrUpdateContextInsight]),(0,jsx_runtime.jsx)(Template,{sidePanel:!0})};ThreadWithMultipleContextObjects.parameters={testOptions:{waitForLoadersToDisappear:!1}};let ThreadScrollsToBottomOnNewMessages=()=>{(0,browser.ok)({get:{"/api/environments/:team_id/conversations/":()=>[200,conversationList_namespaceObject]},post:{"/api/environments/:team_id/conversations/":(_,res,ctx)=>res(ctx.delay(100),ctx.text(longResponseChunk))}});let{conversation}=(0,index_esm.useValues)(maxLogic.v8),{setConversationId}=(0,index_esm.useActions)(maxLogic.v8),logic=(0,maxThreadLogic.r)({conversationId:"poem",conversation}),{threadRaw}=(0,index_esm.useValues)(logic),{askMax}=(0,index_esm.useActions)(logic);(0,react.useEffect)(()=>{setConversationId("poem")},[setConversationId]);let messagesSet=threadRaw.length>0;return(0,react.useEffect)(()=>{messagesSet&&askMax("This message must be on the top of the container")},[messagesSet,askMax]),(0,jsx_runtime.jsx)("div",{className:"h-fit max-h-screen overflow-y-auto SidePanel3000__content",children:(0,jsx_runtime.jsx)(Template,{})})};ThreadScrollsToBottomOnNewMessages.parameters={testOptions:{waitForLoadersToDisappear:!1}};let FloatingInput=()=>{let{closeSidePanel}=(0,index_esm.useActions)(sidePanelLogic.x),{setIsFloatingMaxExpanded}=(0,index_esm.useActions)(maxGlobalLogic.V);return(0,useOnMountEffect.x)(()=>{closeSidePanel(),setIsFloatingMaxExpanded(!1)}),(0,jsx_runtime.jsx)(MaxFloatingInput.m,{})},ExpandedFloatingInput=()=>{let{setIsFloatingMaxExpanded}=(0,index_esm.useActions)(maxGlobalLogic.V);return(0,useOnMountEffect.x)(()=>{setIsFloatingMaxExpanded(!0)}),(0,jsx_runtime.jsx)(MaxFloatingInput.m,{})},ExpandedFloatingInputWithContextualTools=()=>{let{registerTool}=(0,index_esm.useActions)(maxGlobalLogic.V);return(0,react.useEffect)(()=>{registerTool({name:"create_insight",displayName:"Create insight",description:"Max can create a new insight",context:{dashboard_id:"test-dashboard",available_events:["$pageview","$identify","button_clicked"],current_filters:{date_range:"last_7_days"}},callback:toolOutput=>{console.info("Creating insight:",toolOutput)}}),registerTool({name:"analyze_funnel",displayName:"Analyze funnel",description:"Max can analyze a funnel",context:{existing_funnels:["signup_funnel","checkout_funnel"],conversion_metrics:{signup_rate:.15,checkout_rate:.08}},callback:toolOutput=>{console.info("Analyzing funnel:",toolOutput)}}),registerTool({name:"export_data",displayName:"Export data",description:"Max can export data in various formats",context:{available_formats:["csv","json","parquet"],current_query:{event:"$pageview",breakdown:"browser"}},callback:toolOutput=>{console.info("Exporting data:",toolOutput)}})},[registerTool]),(0,jsx_runtime.jsx)(MaxFloatingInput.m,{})},ExpandedFloatingInputWithSuggestions=()=>{let{setIsFloatingMaxExpanded,setShowFloatingMaxSuggestions}=(0,index_esm.useActions)(maxGlobalLogic.V);return(0,react.useEffect)(()=>{setIsFloatingMaxExpanded(!0),setShowFloatingMaxSuggestions(!0)},[setIsFloatingMaxExpanded,setShowFloatingMaxSuggestions]),(0,jsx_runtime.jsx)(MaxFloatingInput.m,{})},ExpandedFloatingInputMobileView=()=>((0,browser.ok)({get:{"/api/organizations/@current/":()=>[200,{...api_mock.On,is_ai_data_processing_approved:!0}]}}),(0,jsx_runtime.jsx)(MaxFloatingInput.m,{}));ExpandedFloatingInputMobileView.parameters={viewport:{defaultViewport:"mobile2"}};let ExpandedFloatingInputThread=()=>{let{setIsFloatingMaxExpanded}=(0,index_esm.useActions)(maxGlobalLogic.V),{setConversationId}=(0,index_esm.useActions)(maxLogic.v8),threadLogic=(0,maxThreadLogic.r)({conversationId:CONVERSATION_ID,conversation:null}),{askMax}=(0,index_esm.useActions)(threadLogic),{dataProcessingAccepted}=(0,index_esm.useValues)(maxGlobalLogic.V);return((0,react.useEffect)(()=>{setIsFloatingMaxExpanded(!0)},[setIsFloatingMaxExpanded]),(0,react.useEffect)(()=>{dataProcessingAccepted&&setTimeout(()=>{setConversationId(CONVERSATION_ID),askMax(humanMessage.content)},0)},[dataProcessingAccepted,setConversationId,askMax]),dataProcessingAccepted)?(0,jsx_runtime.jsx)(MaxFloatingInput.m,{}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})};ExpandedFloatingInputThread.parameters={testOptions:{waitForLoadersToDisappear:!1}};let ChatWithUIContext=()=>{(0,browser.ok)({post:{"/api/environments/:team_id/conversations/":(_,res,ctx)=>res(ctx.text(chatResponseWithEventContext))},get:{"/api/environments/:team_id/conversations/":()=>[200,conversationList_namespaceObject],[`/api/environments/:team_id/conversations/${CONVERSATION_ID}/`]:()=>[200,{id:CONVERSATION_ID,status:"idle",title:"Event Context Test",created_at:"2025-04-29T17:44:21.654307Z",updated_at:"2025-04-29T17:44:29.184791Z",messages:[]}]}});let{contextEvents}=(0,index_esm.useValues)(maxContextLogic.U),{addOrUpdateContextEvent}=(0,index_esm.useActions)(maxContextLogic.U),{setConversationId}=(0,index_esm.useActions)(maxLogic.v8),threadLogic=(0,maxThreadLogic.r)({conversationId:CONVERSATION_ID,conversation:null}),{askMax}=(0,index_esm.useActions)(threadLogic),{dataProcessingAccepted}=(0,index_esm.useValues)(maxGlobalLogic.V);return((0,react.useEffect)(()=>{dataProcessingAccepted&&addOrUpdateContextEvent({id:"test-event-1",name:"$pageview",description:"Page view event",tags:[]})},[addOrUpdateContextEvent,dataProcessingAccepted]),(0,react.useEffect)(()=>{dataProcessingAccepted&&contextEvents.length>0&&setTimeout(()=>{setConversationId(CONVERSATION_ID),askMax("Tell me about the $pageview event")},100)},[contextEvents.length,setConversationId,askMax,dataProcessingAccepted]),(0,react.useEffect)(()=>{contextEvents.length>0&&console.info("Event context preserved:",contextEvents)},[contextEvents]),dataProcessingAccepted)?(0,jsx_runtime.jsx)(Template,{}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{})};ChatWithUIContext.parameters={testOptions:{waitForLoadersToDisappear:!1}};let MaxInstanceWithContextualTools=()=>{let{registerTool}=(0,index_esm.useActions)(maxGlobalLogic.V);return(0,react.useEffect)(()=>{registerTool({name:"query_insights",displayName:"Query insights",description:"Max can query insights and their properties",context:{available_insights:["pageview_trends","user_retention","conversion_rates"],active_filters:{date_from:"-7d",properties:[{key:"browser",value:"Chrome"}]},user_permissions:["read_insights","create_insights"]},callback:toolOutput=>{console.info("Querying insights:",toolOutput)}}),registerTool({name:"manage_cohorts",displayName:"Manage cohorts",description:"Max can manage cohorts and their properties",context:{existing_cohorts:[{id:1,name:"Power Users",size:1250},{id:2,name:"New Signups",size:3400}],cohort_types:["behavioral","demographic","custom"]},callback:toolOutput=>{console.info("Managing cohorts:",toolOutput)}}),registerTool({name:"feature_flags",displayName:"Feature flags",description:"Max can manage feature flags and their properties",context:{active_flags:["new-dashboard","beta-feature","experiment-checkout"],flag_stats:{total:15,active:8,inactive:7},rollout_percentages:{"new-dashboard":25,"beta-feature":50}},callback:toolOutput=>{console.info("Feature flag action:",toolOutput)}})},[registerTool]),(0,jsx_runtime.jsx)(Template,{})};MaxInstanceWithContextualTools.parameters={testOptions:{waitForLoadersToDisappear:!1}},Welcome.parameters={...Welcome.parameters,docs:{...Welcome.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    get: {\n      '/api/organizations/@current/': () => [200, {\n        ...MOCK_DEFAULT_ORGANIZATION,\n        // We override data processing opt-in to false, so that we see the welcome screen as a first-time user would\n        is_ai_data_processing_approved: false\n      }]\n    }\n  });\n  return <Template />;\n}",...Welcome.parameters?.docs?.source}}},WelcomeFeaturePreviewAutoEnrolled.parameters={...WelcomeFeaturePreviewAutoEnrolled.parameters,docs:{...WelcomeFeaturePreviewAutoEnrolled.parameters?.docs,source:{originalSource:"() => {\n  return <Template />;\n}",...WelcomeFeaturePreviewAutoEnrolled.parameters?.docs?.source}}},Thread.parameters={...Thread.parameters,docs:{...Thread.parameters?.docs,source:{originalSource:"() => {\n  const {\n    setConversationId\n  } = useActions(maxLogic);\n  const {\n    askMax\n  } = useActions(maxThreadLogic({\n    conversationId: CONVERSATION_ID,\n    conversation: null\n  }));\n  const {\n    dataProcessingAccepted\n  } = useValues(maxGlobalLogic);\n  useEffect(() => {\n    if (dataProcessingAccepted) {\n      setTimeout(() => {\n        setConversationId(CONVERSATION_ID);\n        askMax(humanMessage.content);\n      }, 0);\n    }\n  }, [dataProcessingAccepted, setConversationId, askMax]);\n  if (!dataProcessingAccepted) {\n    return <></>;\n  }\n  return <Template />;\n}",...Thread.parameters?.docs?.source}}},EmptyThreadLoading.parameters={...EmptyThreadLoading.parameters,docs:{...EmptyThreadLoading.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    post: {\n      '/api/environments/:team_id/conversations/': (_req, _res, ctx) => [ctx.delay('infinite')]\n    }\n  });\n  const {\n    setConversationId\n  } = useActions(maxLogic);\n  const threadLogic = maxThreadLogic({\n    conversationId: CONVERSATION_ID,\n    conversation: null\n  });\n  const {\n    askMax\n  } = useActions(threadLogic);\n  const {\n    dataProcessingAccepted\n  } = useValues(maxGlobalLogic);\n  useEffect(() => {\n    if (dataProcessingAccepted) {\n      setTimeout(() => {\n        setConversationId(CONVERSATION_ID);\n        askMax(humanMessage.content);\n      }, 0);\n    }\n  }, [dataProcessingAccepted, setConversationId, askMax]);\n  if (!dataProcessingAccepted) {\n    return <></>;\n  }\n  return <Template />;\n}",...EmptyThreadLoading.parameters?.docs?.source}}},GenerationFailureThread.parameters={...GenerationFailureThread.parameters,docs:{...GenerationFailureThread.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    post: {\n      '/api/environments/:team_id/conversations/': (_, res, ctx) => res(ctx.text(generationFailureChunk))\n    }\n  });\n  const {\n    setConversationId\n  } = useActions(maxLogic);\n  const threadLogic = maxThreadLogic({\n    conversationId: CONVERSATION_ID,\n    conversation: null\n  });\n  const {\n    askMax,\n    setMessageStatus\n  } = useActions(threadLogic);\n  const {\n    threadRaw,\n    threadLoading\n  } = useValues(threadLogic);\n  const {\n    dataProcessingAccepted\n  } = useValues(maxGlobalLogic);\n  useEffect(() => {\n    if (dataProcessingAccepted) {\n      setTimeout(() => {\n        setConversationId(CONVERSATION_ID);\n        askMax(humanMessage.content);\n      }, 0);\n    }\n  }, [dataProcessingAccepted, setConversationId, askMax]);\n  useEffect(() => {\n    if (threadRaw.length === 2 && !threadLoading) {\n      setMessageStatus(1, 'error');\n    }\n  }, [threadRaw.length, threadLoading, setMessageStatus]);\n  if (!dataProcessingAccepted) {\n    return <></>;\n  }\n  return <Template />;\n}",...GenerationFailureThread.parameters?.docs?.source}}},ThreadWithFailedGeneration.parameters={...ThreadWithFailedGeneration.parameters,docs:{...ThreadWithFailedGeneration.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    post: {\n      '/api/environments/:team_id/conversations/': (_, res, ctx) => res(ctx.text(failureChunk))\n    }\n  });\n  const {\n    setConversationId\n  } = useActions(maxLogic);\n  const threadLogic = maxThreadLogic({\n    conversationId: CONVERSATION_ID,\n    conversation: null\n  });\n  const {\n    askMax\n  } = useActions(threadLogic);\n  const {\n    dataProcessingAccepted\n  } = useValues(maxGlobalLogic);\n  useEffect(() => {\n    if (dataProcessingAccepted) {\n      setTimeout(() => {\n        setConversationId(CONVERSATION_ID);\n        askMax(humanMessage.content);\n      }, 0);\n    }\n  }, [dataProcessingAccepted, setConversationId, askMax]);\n  if (!dataProcessingAccepted) {\n    return <></>;\n  }\n  return <Template />;\n}",...ThreadWithFailedGeneration.parameters?.docs?.source}}},ThreadWithRateLimit.parameters={...ThreadWithRateLimit.parameters,docs:{...ThreadWithRateLimit.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    post: {\n      '/api/environments/:team_id/conversations/': (_, res, ctx) =>\n      // Retry-After header is present so we should be showing its value in the UI\n      res(ctx.text(chatResponseChunk), ctx.set({\n        'Retry-After': '3899'\n      }), ctx.status(429))\n    }\n  });\n  const {\n    setConversationId\n  } = useActions(maxLogic);\n  const threadLogic = maxThreadLogic({\n    conversationId: CONVERSATION_ID,\n    conversation: null\n  });\n  const {\n    askMax\n  } = useActions(threadLogic);\n  const {\n    dataProcessingAccepted\n  } = useValues(maxGlobalLogic);\n  useEffect(() => {\n    if (dataProcessingAccepted) {\n      setTimeout(() => {\n        setConversationId(CONVERSATION_ID);\n        askMax(humanMessage.content);\n      }, 0);\n    }\n  }, [dataProcessingAccepted, setConversationId, askMax]);\n  if (!dataProcessingAccepted) {\n    return <></>;\n  }\n  return <Template />;\n}",...ThreadWithRateLimit.parameters?.docs?.source}}},ThreadWithRateLimitNoRetryAfter.parameters={...ThreadWithRateLimitNoRetryAfter.parameters,docs:{...ThreadWithRateLimitNoRetryAfter.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    post: {\n      '/api/environments/:team_id/conversations/': (_, res, ctx) =>\n      // Testing rate limit error when the Retry-After header is MISSING\n      res(ctx.text(chatResponseChunk), ctx.status(429))\n    }\n  });\n  const {\n    setConversationId\n  } = useActions(maxLogic);\n  const threadLogic = maxThreadLogic({\n    conversationId: CONVERSATION_ID,\n    conversation: null\n  });\n  const {\n    askMax\n  } = useActions(threadLogic);\n  const {\n    dataProcessingAccepted\n  } = useValues(maxGlobalLogic);\n  useEffect(() => {\n    if (dataProcessingAccepted) {\n      setTimeout(() => {\n        setConversationId(CONVERSATION_ID);\n        askMax(humanMessage.content);\n      }, 0);\n    }\n  }, [dataProcessingAccepted, setConversationId, askMax]);\n  if (!dataProcessingAccepted) {\n    return <></>;\n  }\n  return <Template />;\n}",...ThreadWithRateLimitNoRetryAfter.parameters?.docs?.source}}},ThreadWithForm.parameters={...ThreadWithForm.parameters,docs:{...ThreadWithForm.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    post: {\n      '/api/environments/:team_id/conversations/': (_, res, ctx) => res(ctx.text(formChunk))\n    }\n  });\n  const {\n    setConversationId\n  } = useActions(maxLogic);\n  const threadLogic = maxThreadLogic({\n    conversationId: CONVERSATION_ID,\n    conversation: null\n  });\n  const {\n    askMax\n  } = useActions(threadLogic);\n  const {\n    dataProcessingAccepted\n  } = useValues(maxGlobalLogic);\n  useEffect(() => {\n    if (dataProcessingAccepted) {\n      setTimeout(() => {\n        setConversationId(CONVERSATION_ID);\n        askMax(humanMessage.content);\n      }, 0);\n    }\n  }, [dataProcessingAccepted, setConversationId, askMax]);\n  if (!dataProcessingAccepted) {\n    return <></>;\n  }\n  return <Template />;\n}",...ThreadWithForm.parameters?.docs?.source}}},ThreadWithConversationLoading.parameters={...ThreadWithConversationLoading.parameters,docs:{...ThreadWithConversationLoading.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    get: {\n      '/api/environments/:team_id/conversations/': (_req, _res, ctx) => [ctx.delay('infinite')]\n    }\n  });\n  const {\n    setConversationId\n  } = useActions(maxLogic);\n  useEffect(() => {\n    setConversationId(CONVERSATION_ID);\n  }, [setConversationId]);\n  return <Template />;\n}",...ThreadWithConversationLoading.parameters?.docs?.source}}},ThreadWithEmptyConversation.parameters={...ThreadWithEmptyConversation.parameters,docs:{...ThreadWithEmptyConversation.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    get: {\n      '/api/environments/:team_id/conversations/': () => [200, conversationList]\n    }\n  });\n  const {\n    setConversationId\n  } = useActions(maxLogic);\n  useEffect(() => {\n    setConversationId('empty');\n  }, [setConversationId]);\n  return <Template />;\n}",...ThreadWithEmptyConversation.parameters?.docs?.source}}},ThreadWithInProgressConversation.parameters={...ThreadWithInProgressConversation.parameters,docs:{...ThreadWithInProgressConversation.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    get: {\n      '/api/environments/:team_id/conversations/': () => [200, conversationList],\n      '/api/environments/:team_id/conversations/in_progress/': (_req, _res, ctx) => [ctx.delay('infinite')]\n    }\n  });\n  const {\n    setConversationId\n  } = useActions(maxLogic);\n  useEffect(() => {\n    setConversationId('in_progress');\n  }, [setConversationId]);\n  return <Template sidePanel />;\n}",...ThreadWithInProgressConversation.parameters?.docs?.source}}},WelcomeWithLatestConversations.parameters={...WelcomeWithLatestConversations.parameters,docs:{...WelcomeWithLatestConversations.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    get: {\n      '/api/environments/:team_id/conversations/': () => [200, conversationList]\n    }\n  });\n  return <Template sidePanel />;\n}",...WelcomeWithLatestConversations.parameters?.docs?.source}}},ChatHistory.parameters={...ChatHistory.parameters,docs:{...ChatHistory.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    get: {\n      '/api/environments/:team_id/conversations/': () => [200, conversationList]\n    }\n  });\n  const {\n    toggleConversationHistory\n  } = useActions(maxLogic);\n  useEffect(() => {\n    toggleConversationHistory(true);\n  }, [toggleConversationHistory]);\n  return <Template sidePanel />;\n}",...ChatHistory.parameters?.docs?.source}}},ChatHistoryEmpty.parameters={...ChatHistoryEmpty.parameters,docs:{...ChatHistoryEmpty.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    get: {\n      '/api/environments/:team_id/conversations/': () => [400]\n    }\n  });\n  const {\n    toggleConversationHistory\n  } = useActions(maxLogic);\n  useEffect(() => {\n    toggleConversationHistory(true);\n  }, [toggleConversationHistory]);\n  return <Template sidePanel />;\n}",...ChatHistoryEmpty.parameters?.docs?.source}}},ChatHistoryLoading.parameters={...ChatHistoryLoading.parameters,docs:{...ChatHistoryLoading.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    get: {\n      '/api/environments/:team_id/conversations/': (_req, _res, ctx) => [ctx.delay('infinite')]\n    }\n  });\n  const {\n    toggleConversationHistory\n  } = useActions(maxLogic);\n  useEffect(() => {\n    toggleConversationHistory(true);\n  }, [toggleConversationHistory]);\n  return <Template sidePanel />;\n}",...ChatHistoryLoading.parameters?.docs?.source}}},ThreadWithOpenedSuggestionsMobile.parameters={...ThreadWithOpenedSuggestionsMobile.parameters,docs:{...ThreadWithOpenedSuggestionsMobile.parameters?.docs,source:{originalSource:"() => {\n  const {\n    setActiveGroup\n  } = useActions(maxLogic);\n  useEffect(() => {\n    // The largest group is the set up group\n    setActiveGroup(QUESTION_SUGGESTIONS_DATA[3]);\n  }, [setActiveGroup]);\n  return <Template sidePanel />;\n}",...ThreadWithOpenedSuggestionsMobile.parameters?.docs?.source}}},ThreadWithOpenedSuggestions.parameters={...ThreadWithOpenedSuggestions.parameters,docs:{...ThreadWithOpenedSuggestions.parameters?.docs,source:{originalSource:"() => {\n  const {\n    setActiveGroup\n  } = useActions(maxLogic);\n  useEffect(() => {\n    // The largest group is the set up group\n    setActiveGroup(QUESTION_SUGGESTIONS_DATA[3]);\n  }, [setActiveGroup]);\n  return <Template sidePanel />;\n}",...ThreadWithOpenedSuggestions.parameters?.docs?.source}}},ThreadWithMultipleContextObjects.parameters={...ThreadWithMultipleContextObjects.parameters,docs:{...ThreadWithMultipleContextObjects.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    get: {\n      '/api/environments/:team_id/conversations/': () => [200, conversationList]\n    }\n  });\n  const {\n    addOrUpdateContextInsight\n  } = useActions(maxContextLogic);\n  useEffect(() => {\n    // Add multiple context insights\n    addOrUpdateContextInsight({\n      short_id: 'insight-1' as InsightShortId,\n      name: 'Weekly Active Users',\n      description: 'Track weekly active users over time',\n      query: {\n        kind: 'TrendsQuery',\n        series: [{\n          event: '$pageview'\n        }]\n      } as TrendsQuery\n    });\n    addOrUpdateContextInsight({\n      short_id: 'insight-2' as InsightShortId,\n      name: 'Conversion Funnel',\n      description: 'User signup to activation funnel',\n      query: {\n        kind: 'FunnelsQuery',\n        series: [{\n          event: 'sign up'\n        }, {\n          event: 'first action'\n        }]\n      } as FunnelsQuery\n    });\n  }, [addOrUpdateContextInsight]);\n  return <Template sidePanel />;\n}",...ThreadWithMultipleContextObjects.parameters?.docs?.source}}},ThreadScrollsToBottomOnNewMessages.parameters={...ThreadScrollsToBottomOnNewMessages.parameters,docs:{...ThreadScrollsToBottomOnNewMessages.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    get: {\n      '/api/environments/:team_id/conversations/': () => [200, conversationList]\n    },\n    post: {\n      '/api/environments/:team_id/conversations/': (_, res, ctx) => res(ctx.delay(100), ctx.text(longResponseChunk))\n    }\n  });\n  const {\n    conversation\n  } = useValues(maxLogic);\n  const {\n    setConversationId\n  } = useActions(maxLogic);\n  const logic = maxThreadLogic({\n    conversationId: 'poem',\n    conversation\n  });\n  const {\n    threadRaw\n  } = useValues(logic);\n  const {\n    askMax\n  } = useActions(logic);\n  useEffect(() => {\n    setConversationId('poem');\n  }, [setConversationId]);\n  const messagesSet = threadRaw.length > 0;\n  useEffect(() => {\n    if (messagesSet) {\n      askMax('This message must be on the top of the container');\n    }\n  }, [messagesSet, askMax]);\n  return <div className=\"h-fit max-h-screen overflow-y-auto SidePanel3000__content\">\n            <Template />\n        </div>;\n}",...ThreadScrollsToBottomOnNewMessages.parameters?.docs?.source}}},FloatingInput.parameters={...FloatingInput.parameters,docs:{...FloatingInput.parameters?.docs,source:{originalSource:"() => {\n  const {\n    closeSidePanel\n  } = useActions(sidePanelLogic);\n  const {\n    setIsFloatingMaxExpanded\n  } = useActions(maxGlobalLogic);\n  useOnMountEffect(() => {\n    closeSidePanel();\n    setIsFloatingMaxExpanded(false);\n  });\n  return <MaxFloatingInput />;\n}",...FloatingInput.parameters?.docs?.source}}},ExpandedFloatingInput.parameters={...ExpandedFloatingInput.parameters,docs:{...ExpandedFloatingInput.parameters?.docs,source:{originalSource:"() => {\n  const {\n    setIsFloatingMaxExpanded\n  } = useActions(maxGlobalLogic);\n  useOnMountEffect(() => {\n    setIsFloatingMaxExpanded(true);\n  });\n  return <MaxFloatingInput />;\n}",...ExpandedFloatingInput.parameters?.docs?.source}}},ExpandedFloatingInputWithContextualTools.parameters={...ExpandedFloatingInputWithContextualTools.parameters,docs:{...ExpandedFloatingInputWithContextualTools.parameters?.docs,source:{originalSource:"() => {\n  const {\n    registerTool\n  } = useActions(maxGlobalLogic);\n  useEffect(() => {\n    // Register sample contextual tools\n    registerTool({\n      name: 'create_insight' as AssistantContextualTool,\n      displayName: 'Create insight',\n      description: 'Max can create a new insight',\n      context: {\n        dashboard_id: 'test-dashboard',\n        available_events: ['$pageview', '$identify', 'button_clicked'],\n        current_filters: {\n          date_range: 'last_7_days'\n        }\n      },\n      callback: toolOutput => {\n        console.info('Creating insight:', toolOutput);\n      }\n    });\n    registerTool({\n      name: 'analyze_funnel' as AssistantContextualTool,\n      displayName: 'Analyze funnel',\n      description: 'Max can analyze a funnel',\n      context: {\n        existing_funnels: ['signup_funnel', 'checkout_funnel'],\n        conversion_metrics: {\n          signup_rate: 0.15,\n          checkout_rate: 0.08\n        }\n      },\n      callback: toolOutput => {\n        console.info('Analyzing funnel:', toolOutput);\n      }\n    });\n    registerTool({\n      name: 'export_data' as AssistantContextualTool,\n      displayName: 'Export data',\n      description: 'Max can export data in various formats',\n      context: {\n        available_formats: ['csv', 'json', 'parquet'],\n        current_query: {\n          event: '$pageview',\n          breakdown: 'browser'\n        }\n      },\n      callback: toolOutput => {\n        console.info('Exporting data:', toolOutput);\n      }\n    });\n  }, [registerTool]);\n  return <MaxFloatingInput />;\n}",...ExpandedFloatingInputWithContextualTools.parameters?.docs?.source}}},ExpandedFloatingInputWithSuggestions.parameters={...ExpandedFloatingInputWithSuggestions.parameters,docs:{...ExpandedFloatingInputWithSuggestions.parameters?.docs,source:{originalSource:"() => {\n  const {\n    setIsFloatingMaxExpanded,\n    setShowFloatingMaxSuggestions\n  } = useActions(maxGlobalLogic);\n  useEffect(() => {\n    setIsFloatingMaxExpanded(true);\n    setShowFloatingMaxSuggestions(true);\n  }, [setIsFloatingMaxExpanded, setShowFloatingMaxSuggestions]);\n  return <MaxFloatingInput />;\n}",...ExpandedFloatingInputWithSuggestions.parameters?.docs?.source}}},ExpandedFloatingInputMobileView.parameters={...ExpandedFloatingInputMobileView.parameters,docs:{...ExpandedFloatingInputMobileView.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    get: {\n      '/api/organizations/@current/': () => [200, {\n        ...MOCK_DEFAULT_ORGANIZATION,\n        is_ai_data_processing_approved: true\n      }]\n    }\n  });\n  return <MaxFloatingInput />;\n}",...ExpandedFloatingInputMobileView.parameters?.docs?.source}}},ExpandedFloatingInputThread.parameters={...ExpandedFloatingInputThread.parameters,docs:{...ExpandedFloatingInputThread.parameters?.docs,source:{originalSource:"() => {\n  const {\n    setIsFloatingMaxExpanded\n  } = useActions(maxGlobalLogic);\n  const {\n    setConversationId\n  } = useActions(maxLogic);\n  const threadLogic = maxThreadLogic({\n    conversationId: CONVERSATION_ID,\n    conversation: null\n  });\n  const {\n    askMax\n  } = useActions(threadLogic);\n  const {\n    dataProcessingAccepted\n  } = useValues(maxGlobalLogic);\n  useEffect(() => {\n    setIsFloatingMaxExpanded(true);\n  }, [setIsFloatingMaxExpanded]);\n  useEffect(() => {\n    if (dataProcessingAccepted) {\n      setTimeout(() => {\n        setConversationId(CONVERSATION_ID);\n        askMax(humanMessage.content);\n      }, 0);\n    }\n  }, [dataProcessingAccepted, setConversationId, askMax]);\n  if (!dataProcessingAccepted) {\n    return <></>;\n  }\n  return <MaxFloatingInput />;\n}",...ExpandedFloatingInputThread.parameters?.docs?.source}}},ChatWithUIContext.parameters={...ChatWithUIContext.parameters,docs:{...ChatWithUIContext.parameters?.docs,source:{originalSource:"() => {\n  useStorybookMocks({\n    post: {\n      '/api/environments/:team_id/conversations/': (_, res, ctx) => res(ctx.text(chatResponseWithEventContext))\n    },\n    get: {\n      '/api/environments/:team_id/conversations/': () => [200, conversationList],\n      [`/api/environments/:team_id/conversations/${CONVERSATION_ID}/`]: () => [200, {\n        id: CONVERSATION_ID,\n        status: 'idle',\n        title: 'Event Context Test',\n        created_at: '2025-04-29T17:44:21.654307Z',\n        updated_at: '2025-04-29T17:44:29.184791Z',\n        messages: []\n      }]\n    }\n  });\n  const {\n    contextEvents\n  } = useValues(maxContextLogic);\n  const {\n    addOrUpdateContextEvent\n  } = useActions(maxContextLogic);\n  const {\n    setConversationId\n  } = useActions(maxLogic);\n  const threadLogic = maxThreadLogic({\n    conversationId: CONVERSATION_ID,\n    conversation: null\n  });\n  const {\n    askMax\n  } = useActions(threadLogic);\n  const {\n    dataProcessingAccepted\n  } = useValues(maxGlobalLogic);\n  useEffect(() => {\n    // Add an event to the context\n    if (dataProcessingAccepted) {\n      addOrUpdateContextEvent({\n        id: 'test-event-1',\n        name: '$pageview',\n        description: 'Page view event',\n        tags: []\n      });\n    }\n  }, [addOrUpdateContextEvent, dataProcessingAccepted]);\n  useEffect(() => {\n    // After event is added, start a new conversation\n    if (dataProcessingAccepted && contextEvents.length > 0) {\n      setTimeout(() => {\n        // This simulates starting a new chat which changes the URL\n        setConversationId(CONVERSATION_ID);\n        askMax('Tell me about the $pageview event');\n      }, 100);\n    }\n  }, [contextEvents.length, setConversationId, askMax, dataProcessingAccepted]);\n  useEffect(() => {\n    // Verify context is still present after conversation starts\n    if (contextEvents.length > 0) {\n      console.info('Event context preserved:', contextEvents);\n    }\n  }, [contextEvents]);\n  if (!dataProcessingAccepted) {\n    return <></>;\n  }\n  return <Template />;\n}",...ChatWithUIContext.parameters?.docs?.source}}},MaxInstanceWithContextualTools.parameters={...MaxInstanceWithContextualTools.parameters,docs:{...MaxInstanceWithContextualTools.parameters?.docs,source:{originalSource:"() => {\n  const {\n    registerTool\n  } = useActions(maxGlobalLogic);\n  useEffect(() => {\n    // Register various contextual tools for MaxInstance\n    registerTool({\n      name: 'query_insights' as AssistantContextualTool,\n      displayName: 'Query insights',\n      description: 'Max can query insights and their properties',\n      context: {\n        available_insights: ['pageview_trends', 'user_retention', 'conversion_rates'],\n        active_filters: {\n          date_from: '-7d',\n          properties: [{\n            key: 'browser',\n            value: 'Chrome'\n          }]\n        },\n        user_permissions: ['read_insights', 'create_insights']\n      },\n      callback: toolOutput => {\n        console.info('Querying insights:', toolOutput);\n      }\n    });\n    registerTool({\n      name: 'manage_cohorts' as AssistantContextualTool,\n      displayName: 'Manage cohorts',\n      description: 'Max can manage cohorts and their properties',\n      context: {\n        existing_cohorts: [{\n          id: 1,\n          name: 'Power Users',\n          size: 1250\n        }, {\n          id: 2,\n          name: 'New Signups',\n          size: 3400\n        }],\n        cohort_types: ['behavioral', 'demographic', 'custom']\n      },\n      callback: toolOutput => {\n        console.info('Managing cohorts:', toolOutput);\n      }\n    });\n    registerTool({\n      name: 'feature_flags' as AssistantContextualTool,\n      displayName: 'Feature flags',\n      description: 'Max can manage feature flags and their properties',\n      context: {\n        active_flags: ['new-dashboard', 'beta-feature', 'experiment-checkout'],\n        flag_stats: {\n          total: 15,\n          active: 8,\n          inactive: 7\n        },\n        rollout_percentages: {\n          'new-dashboard': 25,\n          'beta-feature': 50\n        }\n      },\n      callback: toolOutput => {\n        console.info('Feature flag action:', toolOutput);\n      }\n    });\n  }, [registerTool]);\n  return <Template />;\n}",...MaxInstanceWithContextualTools.parameters?.docs?.source}}};let __namedExportsOrder=["Welcome","WelcomeFeaturePreviewAutoEnrolled","Thread","EmptyThreadLoading","GenerationFailureThread","ThreadWithFailedGeneration","ThreadWithRateLimit","ThreadWithRateLimitNoRetryAfter","ThreadWithForm","ThreadWithConversationLoading","ThreadWithEmptyConversation","ThreadWithInProgressConversation","WelcomeWithLatestConversations","ChatHistory","ChatHistoryEmpty","ChatHistoryLoading","ThreadWithOpenedSuggestionsMobile","ThreadWithOpenedSuggestions","ThreadWithMultipleContextObjects","ThreadScrollsToBottomOnNewMessages","FloatingInput","ExpandedFloatingInput","ExpandedFloatingInputWithContextualTools","ExpandedFloatingInputWithSuggestions","ExpandedFloatingInputMobileView","ExpandedFloatingInputThread","ChatWithUIContext","MaxInstanceWithContextualTools"]}}]);
//# sourceMappingURL=scenes-max-Max-stories.957111ee.iframe.bundle.js.map