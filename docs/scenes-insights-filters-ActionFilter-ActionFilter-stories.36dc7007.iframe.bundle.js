"use strict";(self.webpackChunkposthog=self.webpackChunkposthog||[]).push([[6396],{"./frontend/src/scenes/insights/filters/ActionFilter/ActionFilter.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Bordered:()=>Bordered,FunnelLike:()=>FunnelLike,PropertyFiltersWithPopover:()=>PropertyFiltersWithPopover,SingleFilter:()=>SingleFilter,Sortable:()=>Sortable,Standard:()=>Standard,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var kea__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/.pnpm/kea@3.1.5_react@18.2.0/node_modules/kea/lib/index.esm.js"),lib_components_TaxonomicFilter_mocks_taxonomicFilterMocksDecorator__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./frontend/src/lib/components/TaxonomicFilter/__mocks__/taxonomicFilterMocksDecorator.ts"),lib_components_TaxonomicFilter_types__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./frontend/src/lib/components/TaxonomicFilter/types.ts"),lib_constants__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./frontend/src/lib/constants.tsx"),lib_utils__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./frontend/src/lib/utils.tsx"),react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),scenes_insights_sharedUtils__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./frontend/src/scenes/insights/sharedUtils.ts"),_models_cohortsModel__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./frontend/src/models/cohortsModel.ts"),_models_groupsModel__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./frontend/src/models/groupsModel.ts"),_types__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./frontend/src/types.ts"),_ActionFilter__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./frontend/src/scenes/insights/filters/ActionFilter/ActionFilter.tsx"),_ActionFilterRow_ActionFilterRow__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__("./frontend/src/scenes/insights/filters/ActionFilter/ActionFilterRow/ActionFilterRow.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__("./node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");let meta={title:"Filters/Action Filter",decorators:[lib_components_TaxonomicFilter_mocks_taxonomicFilterMocksDecorator__WEBPACK_IMPORTED_MODULE_1__.p]},__WEBPACK_DEFAULT_EXPORT__=meta,Template=_ref=>{let{...props}=_ref;(0,kea__WEBPACK_IMPORTED_MODULE_0__.useMountedLogic)(_models_cohortsModel__WEBPACK_IMPORTED_MODULE_7__.Q);let{groupsTaxonomicTypes}=(0,kea__WEBPACK_IMPORTED_MODULE_0__.useValues)(_models_groupsModel__WEBPACK_IMPORTED_MODULE_8__.$),id=(0,react__WEBPACK_IMPORTED_MODULE_5__.useRef)((0,lib_utils__WEBPACK_IMPORTED_MODULE_4__.Vj)()),[filters,setFilters]=(0,react__WEBPACK_IMPORTED_MODULE_5__.useState)({insight:_types__WEBPACK_IMPORTED_MODULE_9__.dw.TRENDS,events:[{id:"$pageview",name:"$pageview",order:0,type:"events",properties:[{key:"$browser",value:["Chrome"],operator:"exact",type:"person"}]}]});return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsx)(_ActionFilter__WEBPACK_IMPORTED_MODULE_10__.T,{filters:filters,setFilters:payload=>setFilters(payload),typeKey:`trends_${id.current}`,buttonCopy:"Add graph series",showSeriesIndicator:!0,entitiesLimit:(0,scenes_insights_sharedUtils__WEBPACK_IMPORTED_MODULE_6__.Ni)(filters)||(0,scenes_insights_sharedUtils__WEBPACK_IMPORTED_MODULE_6__.dn)(filters)&&filters.display&&lib_constants__WEBPACK_IMPORTED_MODULE_3__.wG.includes(filters.display)?1:lib_utils__WEBPACK_IMPORTED_MODULE_4__.bH.length,mathAvailability:filters.insight===_types__WEBPACK_IMPORTED_MODULE_9__.dw.LIFECYCLE?_ActionFilterRow_ActionFilterRow__WEBPACK_IMPORTED_MODULE_11__.Qq.None:filters.insight===_types__WEBPACK_IMPORTED_MODULE_9__.dw.STICKINESS?_ActionFilterRow_ActionFilterRow__WEBPACK_IMPORTED_MODULE_11__.Qq.ActorsOnly:_ActionFilterRow_ActionFilterRow__WEBPACK_IMPORTED_MODULE_11__.Qq.All,propertiesTaxonomicGroupTypes:[lib_components_TaxonomicFilter_types__WEBPACK_IMPORTED_MODULE_2__.t.EventProperties,lib_components_TaxonomicFilter_types__WEBPACK_IMPORTED_MODULE_2__.t.PersonProperties,lib_components_TaxonomicFilter_types__WEBPACK_IMPORTED_MODULE_2__.t.EventFeatureFlags,...groupsTaxonomicTypes,lib_components_TaxonomicFilter_types__WEBPACK_IMPORTED_MODULE_2__.t.Cohorts,lib_components_TaxonomicFilter_types__WEBPACK_IMPORTED_MODULE_2__.t.Elements,lib_components_TaxonomicFilter_types__WEBPACK_IMPORTED_MODULE_2__.t.HogQLExpression],...props})},Standard=Template.bind({});Standard.args={};let Bordered=Template.bind({});Bordered.args={bordered:!0};let PropertyFiltersWithPopover=Template.bind({});PropertyFiltersWithPopover.args={propertyFiltersPopover:!0};let Sortable=Template.bind({});Sortable.args={sortable:!0};let FunnelLike=Template.bind({});FunnelLike.args={sortable:!0,bordered:!0,seriesIndicatorType:"numeric"};let SingleFilter=Template.bind({});SingleFilter.args={entitiesLimit:1},Standard.parameters={...Standard.parameters,docs:{...Standard.parameters?.docs,source:{originalSource:"({\n  ...props\n}: Partial<ActionFilterProps>) => {\n  useMountedLogic(cohortsModel);\n  const {\n    groupsTaxonomicTypes\n  } = useValues(groupsModel);\n  const id = useRef(uuid());\n  const [filters, setFilters] = useState<FilterType>({\n    insight: InsightType.TRENDS,\n    events: [{\n      id: '$pageview',\n      name: '$pageview',\n      order: 0,\n      type: 'events',\n      properties: [{\n        key: '$browser',\n        value: ['Chrome'],\n        operator: 'exact',\n        type: 'person'\n      }]\n    }]\n  });\n  return <ActionFilter filters={filters} setFilters={(payload: Partial<FilterType>): void => setFilters(payload)} typeKey={`trends_${id.current}`} buttonCopy=\"Add graph series\" showSeriesIndicator entitiesLimit={isLifecycleFilter(filters) || isFilterWithDisplay(filters) && filters.display && SINGLE_SERIES_DISPLAY_TYPES.includes(filters.display) ? 1 : alphabet.length} mathAvailability={filters.insight === InsightType.LIFECYCLE ? MathAvailability.None : filters.insight === InsightType.STICKINESS ? MathAvailability.ActorsOnly : MathAvailability.All} propertiesTaxonomicGroupTypes={[TaxonomicFilterGroupType.EventProperties, TaxonomicFilterGroupType.PersonProperties, TaxonomicFilterGroupType.EventFeatureFlags, ...groupsTaxonomicTypes, TaxonomicFilterGroupType.Cohorts, TaxonomicFilterGroupType.Elements, TaxonomicFilterGroupType.HogQLExpression]} {...props} />;\n}",...Standard.parameters?.docs?.source}}},Bordered.parameters={...Bordered.parameters,docs:{...Bordered.parameters?.docs,source:{originalSource:"({\n  ...props\n}: Partial<ActionFilterProps>) => {\n  useMountedLogic(cohortsModel);\n  const {\n    groupsTaxonomicTypes\n  } = useValues(groupsModel);\n  const id = useRef(uuid());\n  const [filters, setFilters] = useState<FilterType>({\n    insight: InsightType.TRENDS,\n    events: [{\n      id: '$pageview',\n      name: '$pageview',\n      order: 0,\n      type: 'events',\n      properties: [{\n        key: '$browser',\n        value: ['Chrome'],\n        operator: 'exact',\n        type: 'person'\n      }]\n    }]\n  });\n  return <ActionFilter filters={filters} setFilters={(payload: Partial<FilterType>): void => setFilters(payload)} typeKey={`trends_${id.current}`} buttonCopy=\"Add graph series\" showSeriesIndicator entitiesLimit={isLifecycleFilter(filters) || isFilterWithDisplay(filters) && filters.display && SINGLE_SERIES_DISPLAY_TYPES.includes(filters.display) ? 1 : alphabet.length} mathAvailability={filters.insight === InsightType.LIFECYCLE ? MathAvailability.None : filters.insight === InsightType.STICKINESS ? MathAvailability.ActorsOnly : MathAvailability.All} propertiesTaxonomicGroupTypes={[TaxonomicFilterGroupType.EventProperties, TaxonomicFilterGroupType.PersonProperties, TaxonomicFilterGroupType.EventFeatureFlags, ...groupsTaxonomicTypes, TaxonomicFilterGroupType.Cohorts, TaxonomicFilterGroupType.Elements, TaxonomicFilterGroupType.HogQLExpression]} {...props} />;\n}",...Bordered.parameters?.docs?.source}}},PropertyFiltersWithPopover.parameters={...PropertyFiltersWithPopover.parameters,docs:{...PropertyFiltersWithPopover.parameters?.docs,source:{originalSource:"({\n  ...props\n}: Partial<ActionFilterProps>) => {\n  useMountedLogic(cohortsModel);\n  const {\n    groupsTaxonomicTypes\n  } = useValues(groupsModel);\n  const id = useRef(uuid());\n  const [filters, setFilters] = useState<FilterType>({\n    insight: InsightType.TRENDS,\n    events: [{\n      id: '$pageview',\n      name: '$pageview',\n      order: 0,\n      type: 'events',\n      properties: [{\n        key: '$browser',\n        value: ['Chrome'],\n        operator: 'exact',\n        type: 'person'\n      }]\n    }]\n  });\n  return <ActionFilter filters={filters} setFilters={(payload: Partial<FilterType>): void => setFilters(payload)} typeKey={`trends_${id.current}`} buttonCopy=\"Add graph series\" showSeriesIndicator entitiesLimit={isLifecycleFilter(filters) || isFilterWithDisplay(filters) && filters.display && SINGLE_SERIES_DISPLAY_TYPES.includes(filters.display) ? 1 : alphabet.length} mathAvailability={filters.insight === InsightType.LIFECYCLE ? MathAvailability.None : filters.insight === InsightType.STICKINESS ? MathAvailability.ActorsOnly : MathAvailability.All} propertiesTaxonomicGroupTypes={[TaxonomicFilterGroupType.EventProperties, TaxonomicFilterGroupType.PersonProperties, TaxonomicFilterGroupType.EventFeatureFlags, ...groupsTaxonomicTypes, TaxonomicFilterGroupType.Cohorts, TaxonomicFilterGroupType.Elements, TaxonomicFilterGroupType.HogQLExpression]} {...props} />;\n}",...PropertyFiltersWithPopover.parameters?.docs?.source}}},Sortable.parameters={...Sortable.parameters,docs:{...Sortable.parameters?.docs,source:{originalSource:"({\n  ...props\n}: Partial<ActionFilterProps>) => {\n  useMountedLogic(cohortsModel);\n  const {\n    groupsTaxonomicTypes\n  } = useValues(groupsModel);\n  const id = useRef(uuid());\n  const [filters, setFilters] = useState<FilterType>({\n    insight: InsightType.TRENDS,\n    events: [{\n      id: '$pageview',\n      name: '$pageview',\n      order: 0,\n      type: 'events',\n      properties: [{\n        key: '$browser',\n        value: ['Chrome'],\n        operator: 'exact',\n        type: 'person'\n      }]\n    }]\n  });\n  return <ActionFilter filters={filters} setFilters={(payload: Partial<FilterType>): void => setFilters(payload)} typeKey={`trends_${id.current}`} buttonCopy=\"Add graph series\" showSeriesIndicator entitiesLimit={isLifecycleFilter(filters) || isFilterWithDisplay(filters) && filters.display && SINGLE_SERIES_DISPLAY_TYPES.includes(filters.display) ? 1 : alphabet.length} mathAvailability={filters.insight === InsightType.LIFECYCLE ? MathAvailability.None : filters.insight === InsightType.STICKINESS ? MathAvailability.ActorsOnly : MathAvailability.All} propertiesTaxonomicGroupTypes={[TaxonomicFilterGroupType.EventProperties, TaxonomicFilterGroupType.PersonProperties, TaxonomicFilterGroupType.EventFeatureFlags, ...groupsTaxonomicTypes, TaxonomicFilterGroupType.Cohorts, TaxonomicFilterGroupType.Elements, TaxonomicFilterGroupType.HogQLExpression]} {...props} />;\n}",...Sortable.parameters?.docs?.source}}},FunnelLike.parameters={...FunnelLike.parameters,docs:{...FunnelLike.parameters?.docs,source:{originalSource:"({\n  ...props\n}: Partial<ActionFilterProps>) => {\n  useMountedLogic(cohortsModel);\n  const {\n    groupsTaxonomicTypes\n  } = useValues(groupsModel);\n  const id = useRef(uuid());\n  const [filters, setFilters] = useState<FilterType>({\n    insight: InsightType.TRENDS,\n    events: [{\n      id: '$pageview',\n      name: '$pageview',\n      order: 0,\n      type: 'events',\n      properties: [{\n        key: '$browser',\n        value: ['Chrome'],\n        operator: 'exact',\n        type: 'person'\n      }]\n    }]\n  });\n  return <ActionFilter filters={filters} setFilters={(payload: Partial<FilterType>): void => setFilters(payload)} typeKey={`trends_${id.current}`} buttonCopy=\"Add graph series\" showSeriesIndicator entitiesLimit={isLifecycleFilter(filters) || isFilterWithDisplay(filters) && filters.display && SINGLE_SERIES_DISPLAY_TYPES.includes(filters.display) ? 1 : alphabet.length} mathAvailability={filters.insight === InsightType.LIFECYCLE ? MathAvailability.None : filters.insight === InsightType.STICKINESS ? MathAvailability.ActorsOnly : MathAvailability.All} propertiesTaxonomicGroupTypes={[TaxonomicFilterGroupType.EventProperties, TaxonomicFilterGroupType.PersonProperties, TaxonomicFilterGroupType.EventFeatureFlags, ...groupsTaxonomicTypes, TaxonomicFilterGroupType.Cohorts, TaxonomicFilterGroupType.Elements, TaxonomicFilterGroupType.HogQLExpression]} {...props} />;\n}",...FunnelLike.parameters?.docs?.source}}},SingleFilter.parameters={...SingleFilter.parameters,docs:{...SingleFilter.parameters?.docs,source:{originalSource:"({\n  ...props\n}: Partial<ActionFilterProps>) => {\n  useMountedLogic(cohortsModel);\n  const {\n    groupsTaxonomicTypes\n  } = useValues(groupsModel);\n  const id = useRef(uuid());\n  const [filters, setFilters] = useState<FilterType>({\n    insight: InsightType.TRENDS,\n    events: [{\n      id: '$pageview',\n      name: '$pageview',\n      order: 0,\n      type: 'events',\n      properties: [{\n        key: '$browser',\n        value: ['Chrome'],\n        operator: 'exact',\n        type: 'person'\n      }]\n    }]\n  });\n  return <ActionFilter filters={filters} setFilters={(payload: Partial<FilterType>): void => setFilters(payload)} typeKey={`trends_${id.current}`} buttonCopy=\"Add graph series\" showSeriesIndicator entitiesLimit={isLifecycleFilter(filters) || isFilterWithDisplay(filters) && filters.display && SINGLE_SERIES_DISPLAY_TYPES.includes(filters.display) ? 1 : alphabet.length} mathAvailability={filters.insight === InsightType.LIFECYCLE ? MathAvailability.None : filters.insight === InsightType.STICKINESS ? MathAvailability.ActorsOnly : MathAvailability.All} propertiesTaxonomicGroupTypes={[TaxonomicFilterGroupType.EventProperties, TaxonomicFilterGroupType.PersonProperties, TaxonomicFilterGroupType.EventFeatureFlags, ...groupsTaxonomicTypes, TaxonomicFilterGroupType.Cohorts, TaxonomicFilterGroupType.Elements, TaxonomicFilterGroupType.HogQLExpression]} {...props} />;\n}",...SingleFilter.parameters?.docs?.source}}};let __namedExportsOrder=["Standard","Bordered","PropertyFiltersWithPopover","Sortable","FunnelLike","SingleFilter"]},"./frontend/src/lib/components/TaxonomicFilter/__mocks__/taxonomicFilterMocksDecorator.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{p:()=>taxonomicFilterMocksDecorator});var _mocks_browser__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./frontend/src/mocks/browser.tsx"),_test_mocks__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./frontend/src/test/mocks.ts");let taxonomicFilterMocksDecorator=(0,_mocks_browser__WEBPACK_IMPORTED_MODULE_0__.x8)({get:{"/api/projects/:team_id/actions":{results:[_test_mocks__WEBPACK_IMPORTED_MODULE_1__.Jq]},"/api/projects/:team_id/persons/properties":[{id:1,name:"location",count:1},{id:2,name:"role",count:2},{id:3,name:"height",count:3},{id:4,name:"$browser",count:4}],"/api/projects/:team_id/property_definitions":[{name:"file_count",count:205},{name:"industry",count:205},{name:"name",count:205},{name:"plan",count:205},{name:"team_size",count:205},{name:"used_mb",count:205}],"/api/projects/:team_id/event_definitions":[{id:"a",name:"signed up",description:"signed up",count:101},{id:"b",name:"viewed insights",description:"signed up",count:1,verified:!0},{id:"c",name:"logged out",description:"signed up",count:103}],"/api/projects/:team_id/cohorts/":[{id:1,name:"Properties Cohort",count:1,groups:[{id:"a",name:"Properties Group",count:1,matchType:"properties"}]},{id:2,name:"Entities Cohort",count:1,groups:[{id:"b",name:"Entities Group",count:1,matchType:"entities"}]}]}})},"./frontend/src/test/mocks.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Eu:()=>mockIntegration,Jq:()=>mockActionDefinition,lI:()=>createMockSubscription,y5:()=>mockSlackChannels});var lib_components_TaxonomicFilter_types__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./frontend/src/lib/components/TaxonomicFilter/types.ts"),lib_constants__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./frontend/src/lib/constants.tsx"),scenes_cohorts_CohortFilters_types__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./frontend/src/scenes/cohorts/CohortFilters/types.ts"),_types__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./frontend/src/types.ts");["event1","test event","$click","$autocapture","search","other event",...Array(150)].map((name,index)=>({id:`uuid-${index}-foobar`,name:name||`misc-${index}-generated`,description:`${name||"name generation"} is the best!`,tags:[]}));let mockEventPropertyDefinition={id:"017e8d9e-4241-0000-57ad-3a7237ffdb8e",name:"$active_feature_flags",description:"",tags:[],is_numerical:!1,updated_at:"2022-01-24T21:32:38.359756Z",updated_by:null,is_seen_on_filtered_events:!0,property_type:void 0};["prop1","purchase_value","$click","$browser","browser_no_dollar_not_on_event","is_admin",...Array(50)].map((name,index)=>({...mockEventPropertyDefinition,id:`uuid-${index}-foobar`,name:name||`misc-${index}-generated`,description:`${name||"name generation"} is the best!`,is_seen_on_filtered_events:(name||"").includes("$")}));let mockActionDefinition={id:3,name:"Action with a moderately long name",post_to_slack:!1,slack_message_format:"",steps:[{id:3,event:"$rageclick",tag_name:"div",text:null,href:null,selector:".buy-now-important-on-sale-button",url:"test",name:"Rage",url_matching:"contains",properties:[]},{id:4,event:null,properties:[{type:"property",key:"$geoip_country_code",value:["US","DE"],operator:"exact"}]}],created_at:"2022-01-24T21:32:38.360176Z",deleted:!1,is_calculating:!1,last_calculated_at:"2022-01-24T21:32:38.359756Z",team_id:1,created_by:null};lib_constants__WEBPACK_IMPORTED_MODULE_1__.pt,_types__WEBPACK_IMPORTED_MODULE_3__.FT.Person,_types__WEBPACK_IMPORTED_MODULE_3__.WV.Exact,_types__WEBPACK_IMPORTED_MODULE_3__.J2.Or,_types__WEBPACK_IMPORTED_MODULE_3__.J2.Or,scenes_cohorts_CohortFilters_types__WEBPACK_IMPORTED_MODULE_2__.y4.Behavioral,_types__WEBPACK_IMPORTED_MODULE_3__.G2.PerformEvent,lib_components_TaxonomicFilter_types__WEBPACK_IMPORTED_MODULE_0__.t.Events,_types__WEBPACK_IMPORTED_MODULE_3__.Xy.Day;let mockSubscription={id:1,title:"My example subscription",target_type:"email",target_value:"ben@posthog.com,geoff@other-company.com",frequency:"monthly",interval:2,start_date:"2022-01-01T00:09:00",byweekday:["wednesday"],bysetpos:1,summary:"sent every month on the first wednesday",created_at:"2022-01-01T00:09:00",updated_at:"2022-01-01T00:09:00"},createMockSubscription=function(){let args=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{...mockSubscription,...args}},mockIntegration={id:1,kind:"slack",config:{team:{id:"123",name:"PostHog"}},created_at:"2022-01-01T00:09:00",created_by:{id:0,uuid:"1234",distinct_id:"1234",first_name:"Tim",email:"tim@posthog.com"}},mockSlackChannels=[{id:"C1",name:"general",is_private:!1,is_ext_shared:!1,is_member:!1},{id:"C2",name:"dev",is_private:!1,is_ext_shared:!1,is_member:!0},{id:"C3",name:"pineapple-conspiracies",is_private:!0,is_ext_shared:!1,is_member:!0},{id:"C4",name:"external-community",is_private:!1,is_ext_shared:!0,is_member:!1}]}}]);