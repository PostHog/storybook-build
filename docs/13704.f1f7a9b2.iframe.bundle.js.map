{"version":3,"file":"13704.f1f7a9b2.iframe.bundle.js","mappings":";AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAwBA;AAAA;AAAA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@posthog/storybook/../../frontend/src/scenes/pipeline/sourceAppInitialCode.tsx"],"sourcesContent":["export enum SourcePluginKind {\n    FilterEvent = 'filterEvent',\n    ModifyEvent = 'modifyEvent',\n    ComposeWebhook = 'composeWebhook',\n    Site = 'site',\n    Frontend = 'frontend',\n}\n\nexport function getInitialCode(name: string, kind: SourcePluginKind): Record<string, any> {\n    switch (kind) {\n        case SourcePluginKind.FilterEvent:\n            return {\n                'plugin.json': JSON.stringify(\n                    {\n                        name: name,\n                        config: [\n                            {\n                                markdown: 'Specify your config here',\n                            },\n                            {\n                                key: 'eventToSkip',\n                                name: 'Event to skip',\n                                type: 'string',\n                                hint: 'If the event name matches this, it will be skipped',\n                                default: '$pageview',\n                                required: false,\n                            },\n                        ],\n                    },\n                    null,\n                    4\n                ),\n                'index.ts': `// Learn more about plugins at: https://posthog.com/docs/apps/build\n\n// Processes each event, optionally dropping it\nexport function processEvent(event, { config }) {\n    if (event.event === config.eventToSkip) {\n        return null\n    }\n    return event\n}\n\n// Runs when the plugin is loaded, allows for preparing it as needed\nexport function setupPlugin (meta) {\n    console.log(\\`The date is \\${new Date().toDateString()}\\`)\n}`,\n            }\n        case SourcePluginKind.ModifyEvent:\n            return {\n                'plugin.json': JSON.stringify(\n                    {\n                        name: name,\n                        config: [\n                            {\n                                markdown: 'Specify your config here',\n                            },\n                            {\n                                key: 'propertyToRemove',\n                                name: 'Property to remove',\n                                type: 'string',\n                                hint: 'This property will be removed from all events',\n                                default: '$browser',\n                                required: false,\n                            },\n                        ],\n                    },\n                    null,\n                    4\n                ),\n                'index.ts': `// Learn more about plugins at: https://posthog.com/docs/apps/build\n\n// Processes each event, optionally modify it\nexport function processEvent(event, { config }) {\n    event.properties[config.propertyToRemove] = undefined\n    return event\n}\n\n// Runs when the plugin is loaded, allows for preparing it as needed\nexport function setupPlugin (meta) {\n    console.log(\\`The date is \\${new Date().toDateString()}\\`)\n}`,\n            }\n        case SourcePluginKind.ComposeWebhook:\n            return {\n                'plugin.json': JSON.stringify(\n                    {\n                        name: name,\n                        config: [\n                            {\n                                markdown: 'Specify your config here',\n                            },\n                            {\n                                key: 'url',\n                                name: 'The destination url',\n                                type: 'string',\n                                hint: 'Where the webhook will be sent to',\n                                default: '',\n                                required: true,\n                            },\n                        ],\n                    },\n                    null,\n                    4\n                ),\n                'index.ts': `// Learn more about plugins at: https://posthog.com/docs/apps/build\nimport { PostHogEvent, Webhook } from '@posthog/plugin-scaffold'\n\nexport function composeWebhook(event: PostHogEvent, { config }: any): Webhook {\n    return {\n        url: config.url,\n        body: JSON.stringify(event),\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        method: 'POST',\n    }\n}`,\n            }\n        case SourcePluginKind.Site:\n            return {\n                'plugin.json': JSON.stringify(\n                    {\n                        name: name,\n                        config: [\n                            {\n                                markdown: 'Specify your config here',\n                            },\n                            {\n                                key: 'name',\n                                name: 'Person to greet',\n                                type: 'string',\n                                hint: 'Used to personalise the property `hello`',\n                                default: 'world',\n                                required: false,\n                            },\n                        ],\n                    },\n                    null,\n                    4\n                ),\n                'site.ts': `export function inject({ config, posthog }) {\\n    console.log('Hello from PostHog-JS')\\n}\\n\"`,\n            }\n        case SourcePluginKind.Frontend:\n            return {\n                'plugin.json': JSON.stringify(\n                    {\n                        name: name,\n                        config: [\n                            {\n                                markdown: 'Specify your config here',\n                            },\n                            {\n                                key: 'name',\n                                name: 'Person to greet',\n                                type: 'string',\n                                hint: 'Used to personalise the property `hello`',\n                                default: 'world',\n                                required: false,\n                            },\n                        ],\n                    },\n                    null,\n                    4\n                ),\n                'frontend.tsx': `import React from \"react\"\n\n                export const scene = {\n                    title: \"My Stuff\",\n                    component: function MyStuff({ config }) {\n                        return (\n                            <div>\n                                <h1>My Favourite Links</h1>\n                                <ul>\n                                    <li>\n                                        <a href=\"https://news.ycombinator.com\">The NEWS</a>\n                                    </li>\n                                </ul>\n                                <h1>My Favourite Cow</h1>\n                                <img src=\"https://media.giphy.com/media/RYKFEEjtYpxL2/giphy.gif\" />\n                            </div>\n                        )\n                    },\n                }`,\n            }\n    }\n}\n"],"names":[],"sourceRoot":""}