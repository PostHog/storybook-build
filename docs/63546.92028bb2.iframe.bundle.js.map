{"version":3,"file":"63546.92028bb2.iframe.bundle.js","mappings":";AAwGA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@posthog/storybook/../../frontend/src/scenes/data-warehouse/editor/output-pane-tabs/QueryEndpoint.tsx"],"sourcesContent":["import { useActions, useValues } from 'kea'\n\nimport { IconCode2 } from '@posthog/icons'\nimport {\n    LemonButton,\n    LemonInput,\n    LemonTable,\n    LemonTableColumns,\n    LemonTabs,\n    LemonTag,\n    LemonTextArea,\n    lemonToast,\n} from '@posthog/lemon-ui'\n\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { projectLogic } from 'scenes/projectLogic'\n\nimport { variablesLogic } from '~/queries/nodes/DataVisualization/Components/Variables/variablesLogic'\nimport { Variable } from '~/queries/nodes/DataVisualization/types'\nimport { NodeKind } from '~/queries/schema/schema-general'\n\nimport { CodeExampleTab, queryEndpointLogic } from 'products/embedded_analytics/frontend/queryEndpointLogic'\n\nimport { multitabEditorLogic } from '../multitabEditorLogic'\n\nconst variablesColumns: LemonTableColumns<Variable> = [\n    {\n        title: 'Variable Name',\n        key: 'code_name',\n        dataIndex: 'code_name',\n    },\n    {\n        title: 'Type',\n        key: 'type',\n        dataIndex: 'type',\n    },\n    {\n        title: 'Default Value',\n        key: 'default_value',\n        dataIndex: 'default_value',\n        render: (_, variable) => variable.default_value || '-',\n    },\n    {\n        title: 'Values',\n        key: 'values',\n        render: (_, variable) => {\n            if (variable.type === 'List' && 'values' in variable && variable.values) {\n                return variable.values.join(', ')\n            }\n            return '-'\n        },\n    },\n]\n\nfunction generateVariablesJson(variables: Variable[]): string {\n    if (variables.length === 0) {\n        return '      // No variables defined'\n    }\n\n    return variables\n        .map((variable, index) => {\n            const isLast = index === variables.length - 1\n            const comma = isLast ? '' : ','\n\n            let exampleValue = ''\n            switch (variable.type) {\n                case 'String':\n                    exampleValue = `\"${variable.default_value || 'example-string'}\"`\n                    break\n                case 'Number':\n                    exampleValue = String(variable.default_value || '123')\n                    break\n                case 'Boolean':\n                    exampleValue = String(variable.default_value || 'true')\n                    break\n                case 'List':\n                    exampleValue =\n                        variable.type === 'List' && 'values' in variable && variable.values\n                            ? JSON.stringify(variable.values)\n                            : '[\"option1\", \"option2\"]'\n                    break\n                case 'Date':\n                    exampleValue = `\"${variable.default_value || '2024-01-01'}\"`\n                    break\n                default:\n                    exampleValue = '\"\"'\n            }\n\n            return `      \"${variable.code_name}\": ${exampleValue}${comma}`\n        })\n        .join('\\n')\n}\n\nfunction getNamedQueryEndpointUrl(projectId: number | undefined, queryEndpointName: string | null): string {\n    return `${window.location.origin}/${projectId}/named_query/d/${queryEndpointName || 'your-query-name'}`\n}\n\nfunction generateTerminalExample(\n    queryEndpointName: string | null,\n    variables: Variable[],\n    projectId: number | undefined\n): string {\n    return `curl -X POST ${getNamedQueryEndpointUrl(projectId, queryEndpointName)} \\\\\n  -H \"Authorization: Bearer $POSTHOG_PERSONAL_API_KEY\" \\\\\n  -H \"Content-Type: application/json\" \\\\\n  -d '{\n    \"variables_values\": {\n${generateVariablesJson(variables)}\n    }\n  }'`\n}\n\nfunction generatePythonExample(\n    queryEndpointName: string | null,\n    variables: Variable[],\n    projectId: number | undefined\n): string {\n    return `import requests\nimport json\n\nurl = \"${getNamedQueryEndpointUrl(projectId, queryEndpointName)}\"\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer {POSTHOG_PERSONAL_API_KEY}'\n}\n\npayload = {\n    \"variables_values\": {\n${generateVariablesJson(variables)}\n    }\n}\n\nresponse = requests.post(url, headers=headers, data=json.dumps(payload))\nprint(response.json())`\n}\n\nfunction generateNodeExample(\n    queryEndpointName: string | null,\n    variables: Variable[],\n    projectId: number | undefined\n): string {\n    return `const fetch = require('node-fetch');\n\nconst url = '${getNamedQueryEndpointUrl(projectId, queryEndpointName)}';\n\nconst headers = {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer {POSTHOG_PERSONAL_API_KEY}'\n};\n\nconst payload = {\n    \"variables_values\": {\n${generateVariablesJson(variables)}\n    }\n};\n\nfetch(url, {\n    method: 'POST',\n    headers: headers,\n    body: JSON.stringify(payload)\n})\n.then(response => response.json())\n.then(data => console.log(data))\n.catch(error => console.error('Error:', error));`\n}\n\ninterface CodeExamplesProps {\n    queryEndpointName: string | null\n    variables: Variable[]\n    projectId: number | undefined\n    tabId: string\n}\n\ninterface QueryEndpointProps {\n    tabId: string\n}\n\nfunction CodeExamples({ queryEndpointName, variables, projectId, tabId }: CodeExamplesProps): JSX.Element {\n    const { setActiveCodeExampleTab } = useActions(queryEndpointLogic({ tabId }))\n    const { activeCodeExampleTab } = useValues(queryEndpointLogic({ tabId }))\n\n    const getCodeExample = (tab: CodeExampleTab): string => {\n        switch (tab) {\n            case 'terminal':\n                return generateTerminalExample(queryEndpointName, variables, projectId)\n            case 'python':\n                return generatePythonExample(queryEndpointName, variables, projectId)\n            case 'nodejs':\n                return generateNodeExample(queryEndpointName, variables, projectId)\n            default:\n                return generateTerminalExample(queryEndpointName, variables, projectId)\n        }\n    }\n\n    const getLanguage = (tab: CodeExampleTab): Language => {\n        switch (tab) {\n            case 'terminal':\n                return Language.Bash\n            case 'python':\n                return Language.Python\n            case 'nodejs':\n                return Language.JavaScript\n            default:\n                return Language.Bash\n        }\n    }\n\n    return (\n        <div>\n            <h3 className=\"text-sm font-medium mb-2\">Example Usage</h3>\n            <LemonTabs\n                activeKey={activeCodeExampleTab}\n                className=\"w-2/3\"\n                size=\"small\"\n                onChange={(tab) => setActiveCodeExampleTab(tab as CodeExampleTab)}\n                tabs={[\n                    {\n                        key: 'terminal',\n                        label: 'Terminal',\n                    },\n                    {\n                        key: 'python',\n                        label: 'Python',\n                    },\n                    {\n                        key: 'nodejs',\n                        label: 'Node.js',\n                    },\n                ]}\n            />\n            <div className=\"mt-2 w-2/3\">\n                <CodeSnippet language={getLanguage(activeCodeExampleTab)} wrap={true}>\n                    {getCodeExample(activeCodeExampleTab)}\n                </CodeSnippet>\n            </div>\n        </div>\n    )\n}\n\nexport function QueryEndpoint({ tabId }: QueryEndpointProps): JSX.Element {\n    const { setQueryEndpointName, setQueryEndpointDescription, createQueryEndpoint } = useActions(\n        queryEndpointLogic({ tabId })\n    )\n    const { queryEndpointName, queryEndpointDescription } = useValues(queryEndpointLogic({ tabId }))\n\n    const { currentProject } = useValues(projectLogic)\n    const { variablesForInsight } = useValues(variablesLogic)\n    const { queryInput } = useValues(multitabEditorLogic)\n\n    const handleCreateQueryEndpoint = (): void => {\n        const sqlQuery = queryInput || ''\n        if (!sqlQuery.trim()) {\n            lemonToast.error('You are missing a HogQL query.')\n            return\n        }\n\n        if (!queryEndpointName?.trim()) {\n            lemonToast.error('You need to name your query endpoint.')\n            return\n        }\n\n        const transformedVariables =\n            variablesForInsight.length > 0\n                ? variablesForInsight.reduce(\n                      (acc, variable, index) => {\n                          acc[`var_${index}`] = {\n                              variableId: variable.id,\n                              code_name: variable.code_name,\n                              value: variable.value || variable.default_value,\n                          }\n                          return acc\n                      },\n                      {} as Record<string, { variableId: string; code_name: string; value: any }>\n                  )\n                : {}\n\n        createQueryEndpoint({\n            name: queryEndpointName,\n            description: queryEndpointDescription || '',\n            query: {\n                kind: NodeKind.HogQLQuery,\n                query: sqlQuery,\n                variables: transformedVariables,\n            },\n        })\n    }\n\n    return (\n        <div className=\"space-y-4\">\n            <div className=\"flex flex-row items-center gap-2\">\n                <h3 className=\"mb-0\">Query endpoint</h3>\n                <LemonTag type=\"completion\">ALPHA</LemonTag>\n            </div>\n            <div className=\"space-y-2\">\n                <p className=\"text-xs\">\n                    Query endpoints are a way of pre-defining queries that you can query via the API, with additional\n                    performance improvements and the benefits of monitoring cost and usage.\n                    <br />\n                    Once created, you will get a URL that you can make an API request to from your own code.\n                </p>\n                <LemonField.Pure label=\"Query name\">\n                    <LemonInput\n                        id={`query-endpoint-name-${tabId}`}\n                        type=\"text\"\n                        onChange={setQueryEndpointName}\n                        value={queryEndpointName || ''}\n                        className=\"w-1/3\"\n                    />\n                </LemonField.Pure>\n\n                <LemonField.Pure label=\"Query description\">\n                    <LemonTextArea\n                        minRows={1}\n                        maxRows={3}\n                        onChange={setQueryEndpointDescription}\n                        value={queryEndpointDescription || ''}\n                        className=\"w-1/3\"\n                    />\n                </LemonField.Pure>\n\n                <LemonButton type=\"primary\" onClick={handleCreateQueryEndpoint} icon={<IconCode2 />} size=\"medium\">\n                    Create query endpoint\n                </LemonButton>\n            </div>\n\n            <div>\n                <h3 className=\"text-sm font-medium mb-2\">Variables</h3>\n                <LemonTable\n                    columns={variablesColumns}\n                    dataSource={variablesForInsight}\n                    emptyState=\"No variables used in the query.\"\n                />\n            </div>\n\n            <CodeExamples\n                queryEndpointName={queryEndpointName}\n                variables={variablesForInsight}\n                projectId={currentProject?.id}\n                tabId={tabId}\n            />\n        </div>\n    )\n}\n"],"names":[],"sourceRoot":""}