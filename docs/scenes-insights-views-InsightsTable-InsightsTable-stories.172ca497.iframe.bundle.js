"use strict";(self.webpackChunk_posthog_storybook=self.webpackChunk_posthog_storybook||[]).push([[50991],{"../../frontend/src/scenes/insights/views/InsightsTable/InsightsTable.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Aggregation:()=>Aggregation,Default:()=>Default,Embedded:()=>Embedded,Hourly:()=>Hourly,IsLegend:()=>IsLegend,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var kea__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/.pnpm/kea@3.1.7_react@18.2.0/node_modules/kea/lib/index.esm.js"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),scenes_insights_insightLogic__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../frontend/src/scenes/insights/insightLogic.tsx"),_queries_nodes_DataNode_dataNodeLogic__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../../frontend/src/queries/nodes/DataNode/dataNodeLogic.ts"),_queries_nodes_InsightViz_InsightViz__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("../../frontend/src/queries/nodes/InsightViz/InsightViz.tsx"),_queries_nodes_InsightViz_utils__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("../../frontend/src/queries/nodes/InsightViz/utils.ts"),_types__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("../../frontend/src/types.ts"),_InsightsTable__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("../../frontend/src/scenes/insights/views/InsightsTable/InsightsTable.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");let __WEBPACK_DEFAULT_EXPORT__={title:"Insights/InsightsTable",component:_InsightsTable__WEBPACK_IMPORTED_MODULE_7__.z},uniqueNode=0,Template=(props,_ref)=>{let{parameters}=_ref,[dashboardItemId]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(()=>`InsightTableStory.${uniqueNode++}`),insight=__webpack_require__("../../frontend/src/mocks/fixtures/api/projects/team_id/insights/trendsLineBreakdown.json"),cachedInsight={...insight,short_id:dashboardItemId,query:{...insight.query,source:{...insight.query.source,...parameters.mergeQuerySource?parameters.mergeQuerySource:{}}}},insightProps={dashboardItemId,doNotLoad:!0,cachedInsight},dataNodeLogicProps={query:cachedInsight.query.source,key:(0,_queries_nodes_InsightViz_InsightViz__WEBPACK_IMPORTED_MODULE_4__.gG)(insightProps),cachedResults:(0,_queries_nodes_InsightViz_utils__WEBPACK_IMPORTED_MODULE_5__.VB)(cachedInsight,cachedInsight.query.source),doNotLoad:insightProps.doNotLoad};return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(kea__WEBPACK_IMPORTED_MODULE_0__.BindLogic,{logic:scenes_insights_insightLogic__WEBPACK_IMPORTED_MODULE_2__.zm,props:insightProps,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(kea__WEBPACK_IMPORTED_MODULE_0__.BindLogic,{logic:_queries_nodes_DataNode_dataNodeLogic__WEBPACK_IMPORTED_MODULE_3__.M,props:dataNodeLogicProps,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_InsightsTable__WEBPACK_IMPORTED_MODULE_7__.z,{...props})})})},Default=Template.bind({});Default.args={};let IsLegend=Template.bind({});IsLegend.args={isLegend:!0};let Embedded=Template.bind({});Embedded.args={embedded:!0};let Hourly=Template.bind({});Hourly.parameters={mergeQuerySource:{interval:"hour"}};let Aggregation=Template.bind({});Aggregation.parameters={mergeQuerySource:{series:[{event:"$pageview",kind:"EventsNode",name:"$pageview",math:_types__WEBPACK_IMPORTED_MODULE_6__.vN.UniqueSessions}]}},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"(props, {\n  parameters\n}) => {\n  const [dashboardItemId] = useState(() => `InsightTableStory.${uniqueNode++}`);\n\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const insight = require('../../../../mocks/fixtures/api/projects/team_id/insights/trendsLineBreakdown.json');\n  const cachedInsight = {\n    ...insight,\n    short_id: dashboardItemId,\n    query: {\n      ...insight.query,\n      source: {\n        ...insight.query.source,\n        ...(parameters.mergeQuerySource ? parameters.mergeQuerySource : {})\n      }\n    }\n  };\n  const insightProps = {\n    dashboardItemId,\n    doNotLoad: true,\n    cachedInsight\n  } as InsightLogicProps;\n  const dataNodeLogicProps: DataNodeLogicProps = {\n    query: cachedInsight.query.source,\n    key: insightVizDataNodeKey(insightProps),\n    cachedResults: getCachedResults(cachedInsight, cachedInsight.query.source),\n    doNotLoad: insightProps.doNotLoad\n  };\n  return <BindLogic logic={insightLogic} props={insightProps}>\n            <BindLogic logic={dataNodeLogic} props={dataNodeLogicProps}>\n                <InsightsTable {...props} />\n            </BindLogic>\n        </BindLogic>;\n}",...Default.parameters?.docs?.source}}},IsLegend.parameters={...IsLegend.parameters,docs:{...IsLegend.parameters?.docs,source:{originalSource:"(props, {\n  parameters\n}) => {\n  const [dashboardItemId] = useState(() => `InsightTableStory.${uniqueNode++}`);\n\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const insight = require('../../../../mocks/fixtures/api/projects/team_id/insights/trendsLineBreakdown.json');\n  const cachedInsight = {\n    ...insight,\n    short_id: dashboardItemId,\n    query: {\n      ...insight.query,\n      source: {\n        ...insight.query.source,\n        ...(parameters.mergeQuerySource ? parameters.mergeQuerySource : {})\n      }\n    }\n  };\n  const insightProps = {\n    dashboardItemId,\n    doNotLoad: true,\n    cachedInsight\n  } as InsightLogicProps;\n  const dataNodeLogicProps: DataNodeLogicProps = {\n    query: cachedInsight.query.source,\n    key: insightVizDataNodeKey(insightProps),\n    cachedResults: getCachedResults(cachedInsight, cachedInsight.query.source),\n    doNotLoad: insightProps.doNotLoad\n  };\n  return <BindLogic logic={insightLogic} props={insightProps}>\n            <BindLogic logic={dataNodeLogic} props={dataNodeLogicProps}>\n                <InsightsTable {...props} />\n            </BindLogic>\n        </BindLogic>;\n}",...IsLegend.parameters?.docs?.source}}},Embedded.parameters={...Embedded.parameters,docs:{...Embedded.parameters?.docs,source:{originalSource:"(props, {\n  parameters\n}) => {\n  const [dashboardItemId] = useState(() => `InsightTableStory.${uniqueNode++}`);\n\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const insight = require('../../../../mocks/fixtures/api/projects/team_id/insights/trendsLineBreakdown.json');\n  const cachedInsight = {\n    ...insight,\n    short_id: dashboardItemId,\n    query: {\n      ...insight.query,\n      source: {\n        ...insight.query.source,\n        ...(parameters.mergeQuerySource ? parameters.mergeQuerySource : {})\n      }\n    }\n  };\n  const insightProps = {\n    dashboardItemId,\n    doNotLoad: true,\n    cachedInsight\n  } as InsightLogicProps;\n  const dataNodeLogicProps: DataNodeLogicProps = {\n    query: cachedInsight.query.source,\n    key: insightVizDataNodeKey(insightProps),\n    cachedResults: getCachedResults(cachedInsight, cachedInsight.query.source),\n    doNotLoad: insightProps.doNotLoad\n  };\n  return <BindLogic logic={insightLogic} props={insightProps}>\n            <BindLogic logic={dataNodeLogic} props={dataNodeLogicProps}>\n                <InsightsTable {...props} />\n            </BindLogic>\n        </BindLogic>;\n}",...Embedded.parameters?.docs?.source}}},Hourly.parameters={...Hourly.parameters,docs:{...Hourly.parameters?.docs,source:{originalSource:"(props, {\n  parameters\n}) => {\n  const [dashboardItemId] = useState(() => `InsightTableStory.${uniqueNode++}`);\n\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const insight = require('../../../../mocks/fixtures/api/projects/team_id/insights/trendsLineBreakdown.json');\n  const cachedInsight = {\n    ...insight,\n    short_id: dashboardItemId,\n    query: {\n      ...insight.query,\n      source: {\n        ...insight.query.source,\n        ...(parameters.mergeQuerySource ? parameters.mergeQuerySource : {})\n      }\n    }\n  };\n  const insightProps = {\n    dashboardItemId,\n    doNotLoad: true,\n    cachedInsight\n  } as InsightLogicProps;\n  const dataNodeLogicProps: DataNodeLogicProps = {\n    query: cachedInsight.query.source,\n    key: insightVizDataNodeKey(insightProps),\n    cachedResults: getCachedResults(cachedInsight, cachedInsight.query.source),\n    doNotLoad: insightProps.doNotLoad\n  };\n  return <BindLogic logic={insightLogic} props={insightProps}>\n            <BindLogic logic={dataNodeLogic} props={dataNodeLogicProps}>\n                <InsightsTable {...props} />\n            </BindLogic>\n        </BindLogic>;\n}",...Hourly.parameters?.docs?.source}}},Aggregation.parameters={...Aggregation.parameters,docs:{...Aggregation.parameters?.docs,source:{originalSource:"(props, {\n  parameters\n}) => {\n  const [dashboardItemId] = useState(() => `InsightTableStory.${uniqueNode++}`);\n\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const insight = require('../../../../mocks/fixtures/api/projects/team_id/insights/trendsLineBreakdown.json');\n  const cachedInsight = {\n    ...insight,\n    short_id: dashboardItemId,\n    query: {\n      ...insight.query,\n      source: {\n        ...insight.query.source,\n        ...(parameters.mergeQuerySource ? parameters.mergeQuerySource : {})\n      }\n    }\n  };\n  const insightProps = {\n    dashboardItemId,\n    doNotLoad: true,\n    cachedInsight\n  } as InsightLogicProps;\n  const dataNodeLogicProps: DataNodeLogicProps = {\n    query: cachedInsight.query.source,\n    key: insightVizDataNodeKey(insightProps),\n    cachedResults: getCachedResults(cachedInsight, cachedInsight.query.source),\n    doNotLoad: insightProps.doNotLoad\n  };\n  return <BindLogic logic={insightLogic} props={insightProps}>\n            <BindLogic logic={dataNodeLogic} props={dataNodeLogicProps}>\n                <InsightsTable {...props} />\n            </BindLogic>\n        </BindLogic>;\n}",...Aggregation.parameters?.docs?.source}}};let __namedExportsOrder=["Default","IsLegend","Embedded","Hourly","Aggregation"]}}]);