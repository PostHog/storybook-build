(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{"./node_modules/refractor/lang/lisp.js":function(c,k,x){"use strict";c.exports=r,r.displayName="lisp",r.aliases=[];function r(b){(function(t){function p(l){return RegExp("(\\()"+l+"(?=[\\s\\)])")}function u(l){return RegExp("([\\s([])"+l+"(?=[\\s)])")}var e="[-+*/_~!@$%^=<>{}\\w]+",m="&"+e,n="(\\()",d="(?=\\))",g="(?=\\s)",a={heading:{pattern:/;;;.*/,alias:["comment","title"]},comment:/;.*/,string:{pattern:/"(?:[^"\\]|\\.)*"/,greedy:!0,inside:{argument:/[-A-Z]+(?=[.,\s])/,symbol:RegExp("`"+e+"'")}},"quoted-symbol":{pattern:RegExp("#?'"+e),alias:["variable","symbol"]},"lisp-property":{pattern:RegExp(":"+e),alias:"property"},splice:{pattern:RegExp(",@?"+e),alias:["symbol","variable"]},keyword:[{pattern:RegExp(n+"(?:(?:lexical-)?let\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)"+g),lookbehind:!0},{pattern:RegExp(n+"(?:for|do|collect|return|finally|append|concat|in|by)"+g),lookbehind:!0}],declare:{pattern:p("declare"),lookbehind:!0,alias:"keyword"},interactive:{pattern:p("interactive"),lookbehind:!0,alias:"keyword"},boolean:{pattern:u("(?:t|nil)"),lookbehind:!0},number:{pattern:u("[-+]?\\d+(?:\\.\\d*)?"),lookbehind:!0},defvar:{pattern:RegExp(n+"def(?:var|const|custom|group)\\s+"+e),lookbehind:!0,inside:{keyword:/^def[a-z]+/,variable:RegExp(e)}},defun:{pattern:RegExp(n+"(?:cl-)?(?:defun\\*?|defmacro)\\s+"+e+"\\s+\\([\\s\\S]*?\\)"),lookbehind:!0,inside:{keyword:/^(?:cl-)?def\S+/,arguments:null,function:{pattern:RegExp("(^\\s)"+e),lookbehind:!0},punctuation:/[()]/}},lambda:{pattern:RegExp(n+"lambda\\s+\\((?:&?"+e+"\\s*)*\\)"),lookbehind:!0,inside:{keyword:/^lambda/,arguments:null,punctuation:/[()]/}},car:{pattern:RegExp(n+e),lookbehind:!0},punctuation:[/(?:['`,]?\(|[)\[\]])/,{pattern:/(\s)\.(?=\s)/,lookbehind:!0}]},s={"lisp-marker":RegExp(m),rest:{argument:{pattern:RegExp(e),alias:"variable"},varform:{pattern:RegExp(n+e+"\\s+\\S[\\s\\S]*"+d),lookbehind:!0,inside:{string:a.string,boolean:a.boolean,number:a.number,symbol:a.symbol,punctuation:/[()]/}}}},i="\\S+(?:\\s+\\S+)*",o={pattern:RegExp(n+"[\\s\\S]*"+d),lookbehind:!0,inside:{"rest-vars":{pattern:RegExp("&(?:rest|body)\\s+"+i),inside:s},"other-marker-vars":{pattern:RegExp("&(?:optional|aux)\\s+"+i),inside:s},keys:{pattern:RegExp("&key\\s+"+i+"(?:\\s+&allow-other-keys)?"),inside:s},argument:{pattern:RegExp(e),alias:"variable"},punctuation:/[()]/}};a.lambda.inside.arguments=o,a.defun.inside.arguments=t.util.clone(o),a.defun.inside.arguments.inside.sublist=o,t.languages.lisp=a,t.languages.elisp=a,t.languages.emacs=a,t.languages["emacs-lisp"]=a})(b)}}}]);
