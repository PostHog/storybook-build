{"version":3,"file":"19656.ce9859fa.iframe.bundle.js","mappings":";AAwDA;AAAA;AAGA;AAAA;AAKA;AAAA;AA0BA;AAOA;AAAA;AAEA;AAAA;AAGA;AAAA;AAMA;AAAA;AAEA;AAGA;AAGA;AAGA;AAOA;AAGA;AAGA;AAIA;AAAA;AAIA;AAAA;AACA;AAAA","sources":["webpack://@posthog/storybook/../../products/error_tracking/frontend/components/IssueTasks.tsx"],"sourcesContent":["import { useValues } from 'kea'\n\nimport { IconPlus } from '@posthog/icons'\nimport { LemonDialog, LemonInput, LemonSelect, LemonTextArea } from '@posthog/lemon-ui'\n\nimport api from 'lib/api'\nimport { ErrorEventType, ErrorTrackingException } from 'lib/components/Errors/types'\nimport { GitHubRepositorySelectField } from 'lib/integrations/GitHubIntegrationHelpers'\nimport { integrationsLogic } from 'lib/integrations/integrationsLogic'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { ButtonPrimitive } from 'lib/ui/Button/ButtonPrimitives'\n\nimport { ScenePanelLabel } from '~/layout/scenes/SceneLayout'\nimport { ErrorTrackingRelationalIssue } from '~/queries/schema/schema-general'\nimport { IntegrationType } from '~/types'\n\nimport { OriginProduct, TaskStatus, TaskUpsertProps } from 'products/tasks/frontend/types'\n\nimport { errorTrackingIssueSceneLogic } from '../scenes/ErrorTrackingIssueScene/errorTrackingIssueSceneLogic'\n\nexport const IssueTasks = (): JSX.Element => {\n    const { issue, issueLoading, selectedEvent } = useValues(errorTrackingIssueSceneLogic)\n    const { getIntegrationsByKind } = useValues(integrationsLogic)\n\n    const onClickCreateTask = (): void => {\n        if (issue) {\n            const githubIntegrations = getIntegrationsByKind(['github'])\n            createTaskForm(issue, selectedEvent, githubIntegrations)\n        }\n    }\n    return (\n        <ScenePanelLabel title=\"Tasks\">\n            <ButtonPrimitive fullWidth onClick={onClickCreateTask} disabled={issueLoading}>\n                <IconPlus />\n                Create task in PostHog\n            </ButtonPrimitive>\n        </ScenePanelLabel>\n    )\n}\n\nconst createTaskForm = (\n    issue: ErrorTrackingRelationalIssue,\n    selectedEvent: ErrorEventType | null,\n    githubIntegrations: IntegrationType[]\n): void => {\n    const posthogUrl = window.location.origin + window.location.pathname\n\n    let description = ''\n\n    if (selectedEvent?.properties) {\n        const props = selectedEvent.properties\n\n        // Extract error details from exception list\n        if (props.$exception_list && Array.isArray(props.$exception_list) && props.$exception_list.length > 0) {\n            const exception = props.$exception_list[0] as ErrorTrackingException\n\n            description += `## ${exception.type}: ${exception.value}\\n\\n`\n\n            if (exception.mechanism) {\n                description += `**Handled:** ${exception.mechanism.handled ? 'Yes' : 'No'}\\n\\n`\n            }\n\n            // Add detailed stack trace from frames\n            if (exception.stacktrace && exception.stacktrace.type === 'resolved') {\n                description += `## Stack Trace\\n\\n`\n\n                const frames = exception.stacktrace.frames.slice().reverse() // Reverse to show call order\n                frames.forEach((frame, index) => {\n                    description += `**${index + 1}.** `\n                    if (frame.resolved_name && frame.resolved_name !== '?') {\n                        description += `\\`${frame.resolved_name}\\``\n                    } else {\n                        description += 'Anonymous function'\n                    }\n\n                    if (frame.source) {\n                        description += ` in \\`${frame.source}\\``\n                    }\n\n                    if (frame.line) {\n                        description += ` at line ${frame.line}`\n                        if (frame.column) {\n                            description += `:${frame.column}`\n                        }\n                    }\n\n                    description += '\\n'\n\n                    // Add resolution failure if present\n                    if (frame.resolve_failure) {\n                        description += `   *Source map resolution failed: ${frame.resolve_failure}*\\n`\n                    }\n                })\n                description += '\\n'\n            }\n        } else {\n            // Fallback to basic error info\n            description += `## ${issue.name}\\n\\n`\n            if (props.$exception_message) {\n                description += `**Message:** ${props.$exception_message}\\n\\n`\n            }\n            if (props.$exception_type) {\n                description += `**Type:** ${props.$exception_type}\\n\\n`\n            }\n        }\n\n        // Add browser/environment info\n        if (props.$browser || props.$os || props.$lib_version) {\n            description += `## Environment\\n\\n`\n            if (props.$browser) {\n                description += `**Browser:** ${props.$browser}\\n`\n            }\n            if (props.$os) {\n                description += `**OS:** ${props.$os}\\n`\n            }\n            if (props.$lib_version) {\n                description += `**SDK Version:** ${props.$lib_version}\\n`\n            }\n            if (props.$viewport_height && props.$viewport_width) {\n                description += `**Viewport:** ${props.$viewport_width}x${props.$viewport_height}\\n`\n            }\n            description += '\\n'\n        }\n\n        // Add URL and user info\n        if (props.$current_url) {\n            description += `**Page:** ${props.$current_url}\\n`\n        }\n        if (props.$referrer) {\n            description += `**Referrer:** ${props.$referrer}\\n`\n        }\n        if (props.distinct_id) {\n            description += `**User ID:** ${props.distinct_id}\\n`\n        }\n        description += '\\n'\n    } else {\n        description += `## ${issue.name}\\n\\n`\n    }\n\n    description += `---\\n\\n`\n    description += `**PostHog Error Tracking:** ${posthogUrl}\\n`\n    description += `**First Seen:** ${new Date(issue.first_seen).toLocaleString()}\\n`\n\n    const defaultIntegration = githubIntegrations[0]\n\n    LemonDialog.openForm({\n        title: 'Create PostHog task',\n        initialValues: {\n            title: issue.name ?? '',\n            description: description ?? '',\n            status: TaskStatus.TODO,\n            repositories: [],\n        },\n        content: (\n            <div className=\"flex flex-col gap-y-4\">\n                {githubIntegrations.length > 0 && <GitHubRepositorySelectField integrationId={defaultIntegration.id} />}\n                <LemonField name=\"title\" label=\"Title\">\n                    <LemonInput data-attr=\"task-title\" placeholder=\"Task title\" size=\"small\" />\n                </LemonField>\n                <LemonField name=\"description\" label=\"Description\">\n                    <LemonTextArea data-attr=\"task-description\" placeholder=\"Start typing...\" rows={8} />\n                </LemonField>\n                <LemonField name=\"status\" label=\"Priority\">\n                    <LemonSelect\n                        data-attr=\"task-status\"\n                        options={[\n                            { value: 'todo', label: 'Fix now (Todo)' },\n                            { value: 'backlog', label: 'Add to backlog' },\n                        ]}\n                    />\n                </LemonField>\n            </div>\n        ),\n        errors: {\n            title: (title) => (!title ? 'You must enter a title' : undefined),\n            repositories: (repositories) =>\n                githubIntegrations.length > 0 && (!repositories || repositories.length === 0)\n                    ? 'You must choose a repository'\n                    : undefined,\n        },\n        onSubmit: async ({ title, description, status, repositories }) => {\n            try {\n                const taskData: TaskUpsertProps = {\n                    title,\n                    description,\n                    status,\n                    origin_product: OriginProduct.ERROR_TRACKING,\n                }\n\n                // Add repository config if GitHub integration is available and repository is selected\n                if (githubIntegrations.length > 0 && repositories && repositories.length > 0) {\n                    const repoName = repositories[0]\n\n                    if (repoName && typeof repoName === 'string') {\n                        let organization: string\n                        let repository: string\n\n                        if (repoName.includes('/')) {\n                            // Format: \"owner/repo\"\n                            ;[organization, repository] = repoName.split('/', 2)\n                        } else {\n                            // Just repository name - get organization from integration config\n                            organization =\n                                defaultIntegration.config?.account?.name ||\n                                defaultIntegration.config?.account?.login ||\n                                'GitHub'\n                            repository = repoName\n                        }\n\n                        taskData.github_integration = defaultIntegration.id\n                        taskData.repository_config = {\n                            organization,\n                            repository,\n                        }\n                    }\n                }\n\n                await api.tasks.create(taskData)\n            } catch (error) {\n                console.error('Failed to create task:', error)\n            }\n        },\n    })\n}\n"],"names":[],"sourceRoot":""}