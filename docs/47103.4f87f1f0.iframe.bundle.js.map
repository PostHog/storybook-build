{"version":3,"file":"47103.4f87f1f0.iframe.bundle.js","mappings":";AA+EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@posthog/storybook/../../frontend/src/scenes/embedded-analytics/queries.tsx"],"sourcesContent":["import { ChartAxis } from '~/queries/schema/schema-general'\n\nexport interface QueryConfig {\n    dateFrom: string\n    dateTo: string\n    requestNameBreakdownEnabled: boolean\n}\n\nexport const createExpensiveQueriesColumns = (requestNameBreakdownEnabled: boolean): ChartAxis[] => {\n    const baseColumns = [\n        {\n            column: 'query_start_time',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'query',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'query_duration_ms',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'read_tb',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'cpu_sec',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'created_by',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n    ]\n\n    return requestNameBreakdownEnabled\n        ? [\n              ...baseColumns,\n              {\n                  column: 'name',\n                  settings: { formatting: { prefix: '', suffix: '' } },\n              },\n          ]\n        : baseColumns\n}\n\nexport const createLast20QueriesColumns = (requestNameBreakdownEnabled: boolean): ChartAxis[] => {\n    const baseColumns = [\n        {\n            column: 'finished_at',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'query_duration_ms',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'query',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n        {\n            column: 'created_by',\n            settings: { formatting: { prefix: '', suffix: '' } },\n        },\n    ]\n\n    return requestNameBreakdownEnabled\n        ? [\n              ...baseColumns,\n              {\n                  column: 'name',\n                  settings: { formatting: { prefix: '', suffix: '' } },\n              },\n          ]\n        : baseColumns\n}\n\nexport const createApiQueriesCountQuery = ({ dateFrom, dateTo, requestNameBreakdownEnabled }: QueryConfig): string => `\n    select \n        event_date, \n        ${requestNameBreakdownEnabled ? 'name,' : ''} \n        count(1) as number_of_queries\n    from query_log\n    where is_personal_api_key_request \n        and event_date >= '${dateFrom}' \n        and event_date <= '${dateTo}'\n    group by event_date ${requestNameBreakdownEnabled ? ', name' : ''}\n    order by event_date asc ${requestNameBreakdownEnabled ? ', name asc' : ''}`\n\nexport const createApiReadTbQuery = ({ dateFrom, dateTo, requestNameBreakdownEnabled }: QueryConfig): string => `\n    select \n        event_date, \n        ${requestNameBreakdownEnabled ? 'name,' : ''}\n        sum(read_bytes)/1e12 as read_tb\n    from query_log\n    where \n        is_personal_api_key_request \n        and event_date >= '${dateFrom}' \n        and event_date <= '${dateTo}'\n    group by event_date ${requestNameBreakdownEnabled ? ', name' : ''}\n    order by event_date asc ${requestNameBreakdownEnabled ? ', name asc' : ''}`\n\nexport const createApiCpuSecondsQuery = ({ dateFrom, dateTo, requestNameBreakdownEnabled }: QueryConfig): string => `\n    select \n        event_date, \n        ${requestNameBreakdownEnabled ? 'name,' : ''}\n        sum(cpu_microseconds)/1e6 as cpu_sec\n    from query_log\n    where \n        is_personal_api_key_request \n        and event_date >= '${dateFrom}' \n        and event_date <= '${dateTo}'\n    group by event_date ${requestNameBreakdownEnabled ? ', name' : ''}\n    order by event_date asc ${requestNameBreakdownEnabled ? ', name asc' : ''}`\n\nexport const createApiQueriesPerKeyQuery = ({ dateFrom, dateTo }: QueryConfig): string => `\n    select \n        event_date, \n        api_key_label, \n        count(1) as total_queries\n    from query_log \n    where \n        event_date >= '${dateFrom}'\n        and event_date <= '${dateTo}'\n        and is_personal_api_key_request\n    group by event_date, api_key_label\n    order by event_date`\n\nexport const createLast20QueriesQuery = ({ dateFrom, dateTo, requestNameBreakdownEnabled }: QueryConfig): string => `\n    select \n        event_time as finished_at, \n        ${requestNameBreakdownEnabled ? 'name,' : ''}\n        query, \n        query_duration_ms, \n        api_key_label,\n        created_by \n    from query_log\n    where\n        is_personal_api_key_request\n        and event_date >= '${dateFrom}'\n        and event_date <= '${dateTo}'\n    order by event_time desc\n    limit 20`\n\nexport const createExpensiveQueriesQuery = ({ dateFrom, dateTo, requestNameBreakdownEnabled }: QueryConfig): string => `\n    select \n        query_start_time, \n        ${requestNameBreakdownEnabled ? 'name,' : ''}\n        query,\n        query_duration_ms,\n        api_key_label,\n        read_bytes / 1e12 as read_tb, \n        cpu_microseconds / 1e6 as cpu_sec,\n        created_by\n    from query_log\n    where \n        is_personal_api_key_request\n        and event_date >= '${dateFrom}'\n        and event_date <= '${dateTo}'\n    order by read_tb desc\n    limit 25`\n"],"names":[],"sourceRoot":""}