"use strict";(self.webpackChunkposthog=self.webpackChunkposthog||[]).push([[72281],{"./frontend/src/lib/lemon-ui/LemonCalendar/LemonCalendarSelect.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,Hour:()=>Hour,Minute:()=>Minute,Past:()=>Past,Upcoming:()=>Upcoming,WithTimeToggle:()=>WithTimeToggle,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var lib_dayjs__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./frontend/src/lib/dayjs.ts"),lib_lemon_ui_LemonButton__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./frontend/src/lib/lemon-ui/LemonButton/index.ts"),lib_lemon_ui_LemonCalendar_LemonCalendarSelect__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./frontend/src/lib/lemon-ui/LemonCalendar/LemonCalendarSelect.tsx"),lib_lemon_ui_Popover_Popover__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./frontend/src/lib/lemon-ui/Popover/Popover.tsx"),lib_utils__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./frontend/src/lib/utils.tsx"),react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");let meta={title:"Lemon UI/Lemon Calendar/Lemon Calendar Select",component:lib_lemon_ui_LemonCalendar_LemonCalendarSelect__WEBPACK_IMPORTED_MODULE_2__.bA,parameters:{mockDate:"2023-01-26"},tags:["autodocs"]},__WEBPACK_DEFAULT_EXPORT__=meta,BasicTemplate=props=>{let[value,setValue]=(0,react__WEBPACK_IMPORTED_MODULE_5__.useState)((0,lib_dayjs__WEBPACK_IMPORTED_MODULE_0__.Bv)().subtract(10,"day")),[visible,setVisible]=(0,react__WEBPACK_IMPORTED_MODULE_5__.useState)(!0),[granularity,setGranularity]=(0,react__WEBPACK_IMPORTED_MODULE_5__.useState)(props.granularity);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("div",{className:"pb-[30rem]",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(lib_lemon_ui_Popover_Popover__WEBPACK_IMPORTED_MODULE_3__.J2,{actionable:!0,overlay:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(lib_lemon_ui_LemonCalendar_LemonCalendarSelect__WEBPACK_IMPORTED_MODULE_2__.bA,{...props,value:value,onChange:value=>{setValue(value),setVisible(!1)},showTimeToggle:props.showTimeToggle,onToggleTime:()=>setGranularity("minute"===granularity?"day":"minute"),granularity:granularity,onClose:()=>setVisible(!1)}),visible:visible,onClickOutside:()=>setVisible(!1),children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(lib_lemon_ui_LemonButton__WEBPACK_IMPORTED_MODULE_1__.J,{type:"secondary",onClick:()=>setVisible(!visible),children:(0,lib_utils__WEBPACK_IMPORTED_MODULE_4__.p6)(value)})})})},Default=BasicTemplate.bind({});Default.args={granularity:"day"};let Upcoming=BasicTemplate.bind({});Upcoming.args={selectionPeriod:"upcoming"};let Past=BasicTemplate.bind({});Past.args={selectionPeriod:"past"};let Hour=BasicTemplate.bind({});Hour.args={granularity:"hour"};let Minute=BasicTemplate.bind({});Minute.args={granularity:"minute"};let WithTimeToggle=BasicTemplate.bind({});WithTimeToggle.args={showTimeToggle:!0},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"(props: LemonCalendarSelectProps) => {\n  const [value, setValue] = useState(dayjs().subtract(10, 'day'));\n  const [visible, setVisible] = useState(true);\n  const [granularity, setGranularity] = useState<LemonCalendarSelectProps['granularity']>(props.granularity);\n  return <div className=\"pb-[30rem]\">\n            <Popover actionable overlay={<LemonCalendarSelect {...props} value={value} onChange={value => {\n      setValue(value);\n      setVisible(false);\n    }} showTimeToggle={props.showTimeToggle} onToggleTime={() => setGranularity(granularity === 'minute' ? 'day' : 'minute')} granularity={granularity} onClose={() => setVisible(false)} />} visible={visible} onClickOutside={() => setVisible(false)}>\n                <LemonButton type=\"secondary\" onClick={() => setVisible(!visible)}>\n                    {formatDate(value)}\n                </LemonButton>\n            </Popover>\n        </div>;\n}",...Default.parameters?.docs?.source}}},Upcoming.parameters={...Upcoming.parameters,docs:{...Upcoming.parameters?.docs,source:{originalSource:"(props: LemonCalendarSelectProps) => {\n  const [value, setValue] = useState(dayjs().subtract(10, 'day'));\n  const [visible, setVisible] = useState(true);\n  const [granularity, setGranularity] = useState<LemonCalendarSelectProps['granularity']>(props.granularity);\n  return <div className=\"pb-[30rem]\">\n            <Popover actionable overlay={<LemonCalendarSelect {...props} value={value} onChange={value => {\n      setValue(value);\n      setVisible(false);\n    }} showTimeToggle={props.showTimeToggle} onToggleTime={() => setGranularity(granularity === 'minute' ? 'day' : 'minute')} granularity={granularity} onClose={() => setVisible(false)} />} visible={visible} onClickOutside={() => setVisible(false)}>\n                <LemonButton type=\"secondary\" onClick={() => setVisible(!visible)}>\n                    {formatDate(value)}\n                </LemonButton>\n            </Popover>\n        </div>;\n}",...Upcoming.parameters?.docs?.source}}},Past.parameters={...Past.parameters,docs:{...Past.parameters?.docs,source:{originalSource:"(props: LemonCalendarSelectProps) => {\n  const [value, setValue] = useState(dayjs().subtract(10, 'day'));\n  const [visible, setVisible] = useState(true);\n  const [granularity, setGranularity] = useState<LemonCalendarSelectProps['granularity']>(props.granularity);\n  return <div className=\"pb-[30rem]\">\n            <Popover actionable overlay={<LemonCalendarSelect {...props} value={value} onChange={value => {\n      setValue(value);\n      setVisible(false);\n    }} showTimeToggle={props.showTimeToggle} onToggleTime={() => setGranularity(granularity === 'minute' ? 'day' : 'minute')} granularity={granularity} onClose={() => setVisible(false)} />} visible={visible} onClickOutside={() => setVisible(false)}>\n                <LemonButton type=\"secondary\" onClick={() => setVisible(!visible)}>\n                    {formatDate(value)}\n                </LemonButton>\n            </Popover>\n        </div>;\n}",...Past.parameters?.docs?.source}}},Hour.parameters={...Hour.parameters,docs:{...Hour.parameters?.docs,source:{originalSource:"(props: LemonCalendarSelectProps) => {\n  const [value, setValue] = useState(dayjs().subtract(10, 'day'));\n  const [visible, setVisible] = useState(true);\n  const [granularity, setGranularity] = useState<LemonCalendarSelectProps['granularity']>(props.granularity);\n  return <div className=\"pb-[30rem]\">\n            <Popover actionable overlay={<LemonCalendarSelect {...props} value={value} onChange={value => {\n      setValue(value);\n      setVisible(false);\n    }} showTimeToggle={props.showTimeToggle} onToggleTime={() => setGranularity(granularity === 'minute' ? 'day' : 'minute')} granularity={granularity} onClose={() => setVisible(false)} />} visible={visible} onClickOutside={() => setVisible(false)}>\n                <LemonButton type=\"secondary\" onClick={() => setVisible(!visible)}>\n                    {formatDate(value)}\n                </LemonButton>\n            </Popover>\n        </div>;\n}",...Hour.parameters?.docs?.source}}},Minute.parameters={...Minute.parameters,docs:{...Minute.parameters?.docs,source:{originalSource:"(props: LemonCalendarSelectProps) => {\n  const [value, setValue] = useState(dayjs().subtract(10, 'day'));\n  const [visible, setVisible] = useState(true);\n  const [granularity, setGranularity] = useState<LemonCalendarSelectProps['granularity']>(props.granularity);\n  return <div className=\"pb-[30rem]\">\n            <Popover actionable overlay={<LemonCalendarSelect {...props} value={value} onChange={value => {\n      setValue(value);\n      setVisible(false);\n    }} showTimeToggle={props.showTimeToggle} onToggleTime={() => setGranularity(granularity === 'minute' ? 'day' : 'minute')} granularity={granularity} onClose={() => setVisible(false)} />} visible={visible} onClickOutside={() => setVisible(false)}>\n                <LemonButton type=\"secondary\" onClick={() => setVisible(!visible)}>\n                    {formatDate(value)}\n                </LemonButton>\n            </Popover>\n        </div>;\n}",...Minute.parameters?.docs?.source}}},WithTimeToggle.parameters={...WithTimeToggle.parameters,docs:{...WithTimeToggle.parameters?.docs,source:{originalSource:"(props: LemonCalendarSelectProps) => {\n  const [value, setValue] = useState(dayjs().subtract(10, 'day'));\n  const [visible, setVisible] = useState(true);\n  const [granularity, setGranularity] = useState<LemonCalendarSelectProps['granularity']>(props.granularity);\n  return <div className=\"pb-[30rem]\">\n            <Popover actionable overlay={<LemonCalendarSelect {...props} value={value} onChange={value => {\n      setValue(value);\n      setVisible(false);\n    }} showTimeToggle={props.showTimeToggle} onToggleTime={() => setGranularity(granularity === 'minute' ? 'day' : 'minute')} granularity={granularity} onClose={() => setVisible(false)} />} visible={visible} onClickOutside={() => setVisible(false)}>\n                <LemonButton type=\"secondary\" onClick={() => setVisible(!visible)}>\n                    {formatDate(value)}\n                </LemonButton>\n            </Popover>\n        </div>;\n}",...WithTimeToggle.parameters?.docs?.source}}};let __namedExportsOrder=["Default","Upcoming","Past","Hour","Minute","WithTimeToggle"]}}]);