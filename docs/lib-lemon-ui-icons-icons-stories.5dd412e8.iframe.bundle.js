"use strict";(self.webpackChunkposthog=self.webpackChunkposthog||[]).push([[8462],{"./frontend/src/lib/lemon-ui/icons/icons.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{IconWithCountBubble:()=>IconWithCountBubble,IconWithCountHidingZero:()=>IconWithCountHidingZero,IconWithCountOverflowing:()=>IconWithCountOverflowing,IconWithCountShowingZero:()=>IconWithCountShowingZero,Library:()=>Library,ShelfA:()=>ShelfA,ShelfB:()=>ShelfB,ShelfC:()=>ShelfC,ShelfD:()=>ShelfD,ShelfE:()=>ShelfE,ShelfF:()=>ShelfF,ShelfG:()=>ShelfG,ShelfH:()=>ShelfH,ShelfI:()=>ShelfI,ShelfJ:()=>ShelfJ,ShelfK:()=>ShelfK,ShelfL:()=>ShelfL,ShelfM:()=>ShelfM,ShelfN:()=>ShelfN,ShelfO:()=>ShelfO,ShelfOther:()=>ShelfOther,ShelfP:()=>ShelfP,ShelfQ:()=>ShelfQ,ShelfR:()=>ShelfR,ShelfS:()=>ShelfS,ShelfT:()=>ShelfT,ShelfU:()=>ShelfU,ShelfV:()=>ShelfV,ShelfW:()=>ShelfW,ShelfX:()=>ShelfX,ShelfY:()=>ShelfY,ShelfZ:()=>ShelfZ,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),_icons__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./frontend/src/lib/lemon-ui/icons/icons.tsx"),lib_lemon_ui_LemonTable__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./frontend/src/lib/lemon-ui/LemonTable/index.ts"),lib_lemon_ui_LemonCheckbox__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./frontend/src/lib/lemon-ui/LemonCheckbox/index.ts"),lib_lemon_ui_LemonButton__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./frontend/src/lib/lemon-ui/LemonButton/index.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");const{IconGauge,IconWithCount}=_icons__WEBPACK_IMPORTED_MODULE_1__,__WEBPACK_DEFAULT_EXPORT__={title:"Lemon UI/Icons",parameters:{docs:{description:{component:"\n\n[Related Figma area](https://www.figma.com/file/Y9G24U4r04nEjIDGIEGuKI/PostHog-Design-System-One?node-id=3139%3A1388)\n\nLemon Icons are generally [Material Icons](https://fonts.google.com/icons) with some matching in-house additions. \nAll should be based on a 24px (1.5rem) square viewbox, with icon contents fitting into a 20px (1.25rem) or smaller square. \n\nWhen adding new icons from Figma please make sure to:\n- [ ] Export the item as an SVG using the 24x24 frame surrounding it\n- [ ] Follow the existing `IconFoo` naming convention and use the `<SvgIcon>` component instead of `<svg>`\n- [ ] Ensure all colors in the SVG are set to `currentColor` so that themes can be applied\n"}}},tags:["autodocs"]},allIcons=Object.entries(_icons__WEBPACK_IMPORTED_MODULE_1__).filter((_ref=>{let[key]=_ref;return"IconWithCount"!==key})).map((_ref2=>{let[key,Icon]=_ref2;return{name:key,icon:Icon}})).sort(((a,b)=>a.name.localeCompare(b.name))),LibraryTemplate=_ref3=>{let{letter}=_ref3;const[showBorder,setShowBorder]=react__WEBPACK_IMPORTED_MODULE_0__.useState(!0),filteredIcons=void 0===letter?allIcons:null!==letter?allIcons.filter((icon=>icon.name.replace("Icon","").toLowerCase().startsWith(letter))):allIcons.filter((icon=>!icon.name.replace("Icon","").toLowerCase().match(/[a-z]/)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)("div",{className:"space-y-2",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(lib_lemon_ui_LemonCheckbox__WEBPACK_IMPORTED_MODULE_3__.H,{bordered:!0,checked:showBorder,onChange:setShowBorder,label:"Show border"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(lib_lemon_ui_LemonTable__WEBPACK_IMPORTED_MODULE_2__.g,{dataSource:filteredIcons,columns:[{title:"Name",key:"name",dataIndex:"name",render:function RenderName(name){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("code",{children:`<${name} />`})}},{title:"Icon",key:"icon",dataIndex:"icon",render:function RenderIcon(Icon){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Icon,{style:{fontSize:"1.5rem",boxShadow:showBorder?"0px 0px 1px 1px red":null}})}},{title:"In Button",key:"button-icon",dataIndex:"icon",render:function RenderButton(Icon){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(lib_lemon_ui_LemonButton__WEBPACK_IMPORTED_MODULE_4__.Jp,{type:"secondary",icon:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Icon,{}),children:"Button"})}}],emptyState:letter?`No icons start with the letter ${letter.toUpperCase()}`:"No icons"})]})},Library=LibraryTemplate.bind({});Library.parameters={testOptions:{skip:!0}};const ShelfA=LibraryTemplate.bind({});ShelfA.args={letter:"a"},ShelfA.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};const ShelfB=LibraryTemplate.bind({});ShelfB.args={letter:"b"},ShelfB.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};const ShelfC=LibraryTemplate.bind({});ShelfC.args={letter:"c"},ShelfC.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};const ShelfD=LibraryTemplate.bind({});ShelfD.args={letter:"d"},ShelfD.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};const ShelfE=LibraryTemplate.bind({});ShelfE.args={letter:"e"},ShelfE.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};const ShelfF=LibraryTemplate.bind({});ShelfF.args={letter:"f"},ShelfF.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};const ShelfG=LibraryTemplate.bind({});ShelfG.args={letter:"g"},ShelfG.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};const ShelfH=LibraryTemplate.bind({});ShelfH.args={letter:"h"},ShelfH.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};const ShelfI=LibraryTemplate.bind({});ShelfI.args={letter:"i"},ShelfI.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};const ShelfJ=LibraryTemplate.bind({});ShelfJ.args={letter:"j"},ShelfJ.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};const ShelfK=LibraryTemplate.bind({});ShelfK.args={letter:"k"},ShelfK.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};const ShelfL=LibraryTemplate.bind({});ShelfL.args={letter:"l"},ShelfL.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};const ShelfM=LibraryTemplate.bind({});ShelfM.args={letter:"m"},ShelfM.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};const ShelfN=LibraryTemplate.bind({});ShelfN.args={letter:"n"},ShelfN.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};const ShelfO=LibraryTemplate.bind({});ShelfO.args={letter:"o"},ShelfO.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};const ShelfP=LibraryTemplate.bind({});ShelfP.args={letter:"p"},ShelfP.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};const ShelfQ=LibraryTemplate.bind({});ShelfQ.args={letter:"q"},ShelfQ.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};const ShelfR=LibraryTemplate.bind({});ShelfR.args={letter:"r"},ShelfR.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};const ShelfS=LibraryTemplate.bind({});ShelfS.args={letter:"s"},ShelfS.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};const ShelfT=LibraryTemplate.bind({});ShelfT.args={letter:"t"},ShelfT.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};const ShelfU=LibraryTemplate.bind({});ShelfU.args={letter:"u"},ShelfU.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};const ShelfV=LibraryTemplate.bind({});ShelfV.args={letter:"v"},ShelfV.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};const ShelfW=LibraryTemplate.bind({});ShelfW.args={letter:"w"},ShelfW.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};const ShelfX=LibraryTemplate.bind({});ShelfX.args={letter:"x"},ShelfX.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};const ShelfY=LibraryTemplate.bind({});ShelfY.args={letter:"y"},ShelfY.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};const ShelfZ=LibraryTemplate.bind({});ShelfZ.args={letter:"z"},ShelfZ.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};const ShelfOther=LibraryTemplate.bind({});function IconWithCountBubble(){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("span",{className:"inline-flex text-2xl border border-primary p-1",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(IconWithCount,{count:7,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(IconGauge,{})})})}function IconWithCountHidingZero(){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("span",{className:"inline-flex text-2xl border border-primary p-1",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(IconWithCount,{count:0,showZero:!1,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(IconGauge,{})})})}function IconWithCountShowingZero(){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("span",{className:"inline-flex text-2xl border border-primary p-1",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(IconWithCount,{count:0,showZero:!0,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(IconGauge,{})})})}function IconWithCountOverflowing(){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("span",{className:"inline-flex text-2xl border border-primary p-1",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(IconWithCount,{count:11,showZero:!0,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(IconGauge,{})})})}ShelfOther.args={letter:null},ShelfOther.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}},Library.parameters={...Library.parameters,docs:{...Library.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...Library.parameters?.docs?.source}}},ShelfA.parameters={...ShelfA.parameters,docs:{...ShelfA.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfA.parameters?.docs?.source}}},ShelfB.parameters={...ShelfB.parameters,docs:{...ShelfB.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfB.parameters?.docs?.source}}},ShelfC.parameters={...ShelfC.parameters,docs:{...ShelfC.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfC.parameters?.docs?.source}}},ShelfD.parameters={...ShelfD.parameters,docs:{...ShelfD.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfD.parameters?.docs?.source}}},ShelfE.parameters={...ShelfE.parameters,docs:{...ShelfE.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfE.parameters?.docs?.source}}},ShelfF.parameters={...ShelfF.parameters,docs:{...ShelfF.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfF.parameters?.docs?.source}}},ShelfG.parameters={...ShelfG.parameters,docs:{...ShelfG.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfG.parameters?.docs?.source}}},ShelfH.parameters={...ShelfH.parameters,docs:{...ShelfH.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfH.parameters?.docs?.source}}},ShelfI.parameters={...ShelfI.parameters,docs:{...ShelfI.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfI.parameters?.docs?.source}}},ShelfJ.parameters={...ShelfJ.parameters,docs:{...ShelfJ.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfJ.parameters?.docs?.source}}},ShelfK.parameters={...ShelfK.parameters,docs:{...ShelfK.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfK.parameters?.docs?.source}}},ShelfL.parameters={...ShelfL.parameters,docs:{...ShelfL.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfL.parameters?.docs?.source}}},ShelfM.parameters={...ShelfM.parameters,docs:{...ShelfM.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfM.parameters?.docs?.source}}},ShelfN.parameters={...ShelfN.parameters,docs:{...ShelfN.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfN.parameters?.docs?.source}}},ShelfO.parameters={...ShelfO.parameters,docs:{...ShelfO.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfO.parameters?.docs?.source}}},ShelfP.parameters={...ShelfP.parameters,docs:{...ShelfP.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfP.parameters?.docs?.source}}},ShelfQ.parameters={...ShelfQ.parameters,docs:{...ShelfQ.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfQ.parameters?.docs?.source}}},ShelfR.parameters={...ShelfR.parameters,docs:{...ShelfR.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfR.parameters?.docs?.source}}},ShelfS.parameters={...ShelfS.parameters,docs:{...ShelfS.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfS.parameters?.docs?.source}}},ShelfT.parameters={...ShelfT.parameters,docs:{...ShelfT.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfT.parameters?.docs?.source}}},ShelfU.parameters={...ShelfU.parameters,docs:{...ShelfU.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfU.parameters?.docs?.source}}},ShelfV.parameters={...ShelfV.parameters,docs:{...ShelfV.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfV.parameters?.docs?.source}}},ShelfW.parameters={...ShelfW.parameters,docs:{...ShelfW.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfW.parameters?.docs?.source}}},ShelfX.parameters={...ShelfX.parameters,docs:{...ShelfX.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfX.parameters?.docs?.source}}},ShelfY.parameters={...ShelfY.parameters,docs:{...ShelfY.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfY.parameters?.docs?.source}}},ShelfZ.parameters={...ShelfZ.parameters,docs:{...ShelfZ.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfZ.parameters?.docs?.source}}},ShelfOther.parameters={...ShelfOther.parameters,docs:{...ShelfOther.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${(name as string)} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = (Icon as IconDefinition['icon']);\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfOther.parameters?.docs?.source}}},IconWithCountBubble.parameters={...IconWithCountBubble.parameters,docs:{...IconWithCountBubble.parameters?.docs,source:{originalSource:'function IconWithCountBubble(): JSX.Element {\n  return <span className="inline-flex text-2xl border border-primary p-1">\n            <IconWithCount count={7}>\n                <IconGauge />\n            </IconWithCount>\n        </span>;\n}',...IconWithCountBubble.parameters?.docs?.source}}},IconWithCountHidingZero.parameters={...IconWithCountHidingZero.parameters,docs:{...IconWithCountHidingZero.parameters?.docs,source:{originalSource:'function IconWithCountHidingZero(): JSX.Element {\n  return <span className="inline-flex text-2xl border border-primary p-1">\n            <IconWithCount count={0} showZero={false}>\n                <IconGauge />\n            </IconWithCount>\n        </span>;\n}',...IconWithCountHidingZero.parameters?.docs?.source}}},IconWithCountShowingZero.parameters={...IconWithCountShowingZero.parameters,docs:{...IconWithCountShowingZero.parameters?.docs,source:{originalSource:'function IconWithCountShowingZero(): JSX.Element {\n  return <span className="inline-flex text-2xl border border-primary p-1">\n            <IconWithCount count={0} showZero={true}>\n                <IconGauge />\n            </IconWithCount>\n        </span>;\n}',...IconWithCountShowingZero.parameters?.docs?.source}}},IconWithCountOverflowing.parameters={...IconWithCountOverflowing.parameters,docs:{...IconWithCountOverflowing.parameters?.docs,source:{originalSource:'function IconWithCountOverflowing(): JSX.Element {\n  return <span className="inline-flex text-2xl border border-primary p-1">\n            <IconWithCount count={11} showZero={true}>\n                <IconGauge />\n            </IconWithCount>\n        </span>;\n}',...IconWithCountOverflowing.parameters?.docs?.source}}}}}]);