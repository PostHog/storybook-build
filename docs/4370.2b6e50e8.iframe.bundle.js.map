{"version":3,"file":"4370.2b6e50e8.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;AA4DA","sources":["webpack://posthog/./frontend/src/scenes/web-analytics/SessionDebugger/sessionAttributionExplorerLogic.ts"],"sourcesContent":["import { actions, connect, kea, path, reducers, selectors } from 'kea'\nimport { actionToUrl, urlToAction } from 'kea-router'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { urls } from 'scenes/urls'\n\nimport { DataTableNode, HogQLQuery, NodeKind } from '~/queries/schema'\nimport { isSessionPropertyFilters } from '~/queries/schema-guards'\nimport { SessionPropertyFilter } from '~/types'\n\nimport type { sessionAttributionExplorerLogicType } from './sessionAttributionExplorerLogicType'\n\nexport const initialFilters = [] as SessionPropertyFilter[]\nexport const sessionAttributionExplorerLogic = kea<sessionAttributionExplorerLogicType>([\n    path(['scenes', 'webAnalytics', 'sessionDebuggerLogic']),\n    connect(() => ({\n        values: [featureFlagLogic, ['featureFlags']],\n    })),\n    actions({\n        setFilters: (filters: SessionPropertyFilter[]) => ({ filters }),\n        setStateFromUrl: (state: { filters: SessionPropertyFilter[] }) => ({\n            state,\n        }),\n    }),\n    reducers({\n        filters: [\n            initialFilters,\n            {\n                setFilters: (_, { filters }) => filters,\n                setStateFromUrl: (_, { state }) => state.filters,\n            },\n        ],\n    }),\n    selectors({\n        query: [\n            (s) => [s.filters],\n            (filters: SessionPropertyFilter[]): DataTableNode => {\n                const source: HogQLQuery = {\n                    kind: NodeKind.HogQLQuery,\n                    filters: {\n                        properties: filters,\n                    },\n                    query: `\nSELECT\n    \"$entry_referring_domain\" as 'context.columns.referring_domain',\n    \"$entry_utm_source\" as 'context.columns.utm_source',\n    \"$entry_utm_medium\" as 'context.columns.utm_medium',\n    \"$entry_utm_campaign\" as 'context.columns.utm_campaign',\n    nullIf(arrayStringConcat([\n        if(isNotNull($entry_gclid), 'glcid', NULL),\n        if(isNotNull($entry_gad_source), 'gad_source', NULL)\n        -- add more here if we add more ad ids\n    ], ','), '') as 'context.columns.has_ad_id',\n    topK(10)($entry_current_url) as 'context.columns.example_entry_urls',\n    \"$channel_type\" as 'context.columns.channel_type',\n    count() as 'context.columns.count'\nFROM sessions\nWHERE $start_timestamp >= now() - toIntervalDay(7) AND {filters}\nGROUP BY 1,2,3,4,5,7\nORDER BY 8 DESC\n`,\n                }\n                return {\n                    kind: NodeKind.DataTableNode,\n                    source: source,\n                    showPropertyFilter: [TaxonomicFilterGroupType.SessionProperties],\n                    showOpenEditorButton: true,\n                    showReload: true,\n                }\n            },\n        ],\n    }),\n\n    actionToUrl(({ values }) => {\n        const stateToUrl = (): [string, Record<string, string>] => {\n            const { filters } = values\n\n            const urlParams = {}\n            if (filters.length > 0) {\n                urlParams['filters'] = filters\n            }\n\n            return [urls.sessionAttributionExplorer(), urlParams]\n        }\n\n        return {\n            setFilters: stateToUrl,\n        }\n    }),\n\n    urlToAction(({ actions }) => ({\n        [urls.sessionAttributionExplorer()]: (_, { filters }) => {\n            const parsedFilters = isSessionPropertyFilters(filters) ? filters : initialFilters\n\n            actions.setStateFromUrl({\n                filters: parsedFilters,\n            })\n        },\n    })),\n])\n"],"names":[],"sourceRoot":""}