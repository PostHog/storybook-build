{"version":3,"file":"62537.479f7afb.iframe.bundle.js","mappings":";AAoOA;AACA;AACA","sources":["webpack://@posthog/storybook/../../products/messaging/frontend/Campaigns/hogflows/steps/StepTrigger.tsx"],"sourcesContent":["import { Node } from '@xyflow/react'\nimport { useActions, useValues } from 'kea'\nimport posthog from 'posthog-js'\n\nimport { IconBolt, IconPlusSmall, IconWebhooks } from '@posthog/icons'\nimport {\n    LemonButton,\n    LemonCollapse,\n    LemonDivider,\n    LemonLabel,\n    LemonSelect,\n    LemonTag,\n    lemonToast,\n} from '@posthog/lemon-ui'\n\nimport { CodeSnippet } from 'lib/components/CodeSnippet'\nimport { PropertyFilters } from 'lib/components/PropertyFilters/PropertyFilters'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { LemonRadio } from 'lib/lemon-ui/LemonRadio'\nimport { IconAdsClick } from 'lib/lemon-ui/icons'\nimport { publicWebhooksHostOrigin } from 'lib/utils/apiHost'\n\nimport { campaignLogic } from '../../campaignLogic'\nimport { HogFlowEventFilters } from '../filters/HogFlowFilters'\nimport { HogFlowAction } from '../types'\nimport { HogFlowFunctionConfiguration } from './components/HogFlowFunctionConfiguration'\n\nexport function StepTriggerConfiguration({\n    node,\n}: {\n    node: Node<Extract<HogFlowAction, { type: 'trigger' }>>\n}): JSX.Element {\n    const { setCampaignActionConfig } = useActions(campaignLogic)\n    const { actionValidationErrorsById } = useValues(campaignLogic)\n\n    const type = node.data.config.type\n    const validationResult = actionValidationErrorsById[node.id]\n\n    return (\n        <>\n            <LemonField.Pure label=\"Trigger type\" error={validationResult?.errors?.type}>\n                <LemonSelect\n                    options={[\n                        {\n                            label: 'Event',\n                            value: 'event',\n                            icon: <IconBolt />,\n                            labelInMenu: (\n                                <div className=\"flex flex-col my-1\">\n                                    <div className=\"font-semibold\">Event</div>\n                                    <p className=\"text-xs text-muted\">\n                                        Trigger your workflow based on incoming realtime PostHog events\n                                    </p>\n                                </div>\n                            ),\n                        },\n                        {\n                            label: 'Webhook',\n                            value: 'webhook',\n                            icon: <IconWebhooks />,\n                            labelInMenu: (\n                                <div className=\"flex flex-col my-1\">\n                                    <div className=\"font-semibold\">Webhook</div>\n                                    <p className=\"text-xs text-muted\">\n                                        Trigger your workflow using an incoming HTTP webhook\n                                    </p>\n                                </div>\n                            ),\n                        },\n                        {\n                            label: 'Tracking pixel',\n                            value: 'tracking_pixel',\n                            icon: <IconAdsClick />,\n                            labelInMenu: (\n                                <div className=\"flex flex-col my-1\">\n                                    <div className=\"font-semibold\">Tracking pixel</div>\n                                    <p className=\"text-xs text-muted\">\n                                        Trigger your workflow using a 1x1 tracking pixel\n                                    </p>\n                                </div>\n                            ),\n                        },\n                    ]}\n                    value={type}\n                    placeholder=\"Select trigger type\"\n                    onChange={(value) => {\n                        value === 'event'\n                            ? setCampaignActionConfig(node.id, { type: 'event', filters: {} })\n                            : value === 'webhook'\n                              ? setCampaignActionConfig(node.id, {\n                                    type: 'webhook',\n                                    template_id: 'template-source-webhook',\n                                    inputs: {},\n                                })\n                              : value === 'tracking_pixel'\n                                ? setCampaignActionConfig(node.id, {\n                                      type: 'tracking_pixel',\n                                      template_id: 'template-source-webhook-pixel',\n                                      inputs: {},\n                                  })\n                                : null\n                    }}\n                />\n            </LemonField.Pure>\n            {node.data.config.type === 'event' ? (\n                <StepTriggerConfigurationEvents action={node.data} config={node.data.config} />\n            ) : node.data.config.type === 'webhook' ? (\n                <StepTriggerConfigurationWebhook action={node.data} config={node.data.config} />\n            ) : node.data.config.type === 'tracking_pixel' ? (\n                <StepTriggerConfigurationTrackingPixel action={node.data} config={node.data.config} />\n            ) : null}\n        </>\n    )\n}\n\nfunction StepTriggerConfigurationEvents({\n    action,\n    config,\n}: {\n    action: Extract<HogFlowAction, { type: 'trigger' }>\n    config: Extract<HogFlowAction['config'], { type: 'event' }>\n}): JSX.Element {\n    const { setCampaignActionConfig } = useActions(campaignLogic)\n    const { actionValidationErrorsById } = useValues(campaignLogic)\n    const validationResult = actionValidationErrorsById[action.id]\n\n    return (\n        <>\n            <div className=\"flex flex-col\">\n                <p className=\"mb-0\">Choose which events or actions will enter a user into the campaign.</p>\n            </div>\n\n            <LemonField.Pure error={validationResult?.errors?.filters}>\n                <HogFlowEventFilters\n                    filters={config.filters ?? {}}\n                    setFilters={(filters) =>\n                        setCampaignActionConfig(action.id, { type: 'event', filters: filters ?? {} })\n                    }\n                    typeKey=\"campaign-trigger\"\n                    buttonCopy=\"Add trigger event\"\n                />\n            </LemonField.Pure>\n\n            <LemonDivider />\n            <ConversionGoalSection />\n            <LemonDivider />\n            <ExitConditionSection />\n        </>\n    )\n}\n\nfunction StepTriggerConfigurationWebhook({\n    action,\n    config,\n}: {\n    action: Extract<HogFlowAction, { type: 'trigger' }>\n    config: Extract<HogFlowAction['config'], { type: 'webhook' }>\n}): JSX.Element {\n    const { setCampaignActionConfig } = useActions(campaignLogic)\n    const { campaign, actionValidationErrorsById } = useValues(campaignLogic)\n    const validationResult = actionValidationErrorsById[action.id]\n\n    const webhookUrl = campaign.id === 'new' ? null : publicWebhooksHostOrigin() + '/public/webhooks/' + campaign.id\n\n    return (\n        <>\n            <LemonCollapse\n                className=\"shrink-0\"\n                defaultActiveKey=\"instructions\"\n                panels={[\n                    {\n                        key: 'instructions',\n                        header: 'Usage instructions',\n                        className: 'p-3 bg-surface-secondary flex flex-col gap-2',\n                        content: (\n                            <>\n                                {!webhookUrl ? (\n                                    <div className=\"text-xs text-muted italic border rounded p-1 bg-surface-primary\">\n                                        The webhook URL will be shown here once you save the workflow\n                                    </div>\n                                ) : (\n                                    <CodeSnippet thing=\"Webhook URL\">{webhookUrl}</CodeSnippet>\n                                )}\n\n                                <div className=\"text-sm\">\n                                    The webhook can be called with any JSON payload. You can then use the configuration\n                                    options to parse the <code>request.body</code> or <code>request.headers</code> to\n                                    map to the required fields.\n                                </div>\n                            </>\n                        ),\n                    },\n                ]}\n            />\n            <HogFlowFunctionConfiguration\n                templateId={config.template_id}\n                inputs={config.inputs}\n                setInputs={(inputs) =>\n                    setCampaignActionConfig(action.id, {\n                        type: 'webhook',\n                        inputs,\n                        template_id: config.template_id,\n                        template_uuid: config.template_uuid,\n                    })\n                }\n                errors={validationResult?.errors}\n            />\n        </>\n    )\n}\n\nfunction StepTriggerConfigurationTrackingPixel({\n    action,\n    config,\n}: {\n    action: Extract<HogFlowAction, { type: 'trigger' }>\n    config: Extract<HogFlowAction['config'], { type: 'tracking_pixel' }>\n}): JSX.Element {\n    const { setCampaignActionConfig } = useActions(campaignLogic)\n    const { campaign, actionValidationErrorsById } = useValues(campaignLogic)\n    const validationResult = actionValidationErrorsById[action.id]\n\n    const trackingPixelUrl =\n        campaign.id !== 'new' ? `${publicWebhooksHostOrigin()}/public/webhooks/${campaign.id}` : null\n\n    const trackingPixelHtml = trackingPixelUrl\n        ? `<img \n    src=\"${trackingPixelUrl}.gif\"\n    width=\"1\" height=\"1\" style=\"display:none;\" alt=\"\"\n/>`\n        : null\n\n    return (\n        <>\n            <LemonCollapse\n                className=\"shrink-0\"\n                defaultActiveKey=\"instructions\"\n                panels={[\n                    {\n                        key: 'instructions',\n                        header: 'Usage instructions',\n                        className: 'p-3 bg-surface-secondary flex flex-col gap-2',\n                        content: (\n                            <>\n                                {!trackingPixelUrl ? (\n                                    <div className=\"text-xs text-muted italic border rounded p-1 bg-surface-primary\">\n                                        The tracking pixel URL will be shown here once you save the workflow\n                                    </div>\n                                ) : (\n                                    <CodeSnippet thing=\"Tracking pixel URL\">{trackingPixelUrl}</CodeSnippet>\n                                )}\n\n                                <div className=\"text-sm\">\n                                    The tracking pixel can be called with a GET request to the URL above. You can embed\n                                    it as an image or call it with an HTTP request in any other way.\n                                </div>\n\n                                {trackingPixelUrl && (\n                                    <CodeSnippet thing=\"Tracking pixel HTML\">{trackingPixelHtml}</CodeSnippet>\n                                )}\n\n                                <div>\n                                    You can use query parameters to pass in data that you can parse into the event\n                                    properties below, or you can hard code the values. This will not create a PostHog\n                                    event by default, it will only be used to trigger the workflow.\n                                </div>\n                            </>\n                        ),\n                    },\n                ]}\n            />\n\n            <HogFlowFunctionConfiguration\n                templateId={config.template_id}\n                inputs={config.inputs}\n                setInputs={(inputs) =>\n                    setCampaignActionConfig(action.id, {\n                        type: 'tracking_pixel',\n                        inputs,\n                        template_id: config.template_id,\n                        template_uuid: config.template_uuid,\n                    })\n                }\n                errors={validationResult?.errors}\n            />\n        </>\n    )\n}\n\nfunction ConversionGoalSection(): JSX.Element {\n    const { setCampaignValue } = useActions(campaignLogic)\n    const { campaign } = useValues(campaignLogic)\n\n    return (\n        <div className=\"flex flex-col py-2 w-full\">\n            <span className=\"text-md font-semibold\">Conversion goal (optional)</span>\n            <p>Define what a user must do to be considered converted.</p>\n\n            <div className=\"flex gap-1 max-w-240\">\n                <div className=\"flex flex-col flex-2 gap-4\">\n                    <LemonField.Pure label=\"Detect conversion from property changes\">\n                        <PropertyFilters\n                            buttonText=\"Add property conversion\"\n                            propertyFilters={campaign.conversion?.filters ?? []}\n                            taxonomicGroupTypes={[\n                                TaxonomicFilterGroupType.PersonProperties,\n                                TaxonomicFilterGroupType.Cohorts,\n                                TaxonomicFilterGroupType.HogQLExpression,\n                            ]}\n                            onChange={(filters) => setCampaignValue('conversion', { ...campaign.conversion, filters })}\n                            pageKey=\"campaign-conversion-properties\"\n                            hideBehavioralCohorts\n                        />\n                    </LemonField.Pure>\n                    <div className=\"flex flex-col gap-1\">\n                        <LemonLabel>\n                            Detect conversion from events\n                            <LemonTag>Coming soon</LemonTag>\n                        </LemonLabel>\n                        <LemonButton\n                            type=\"secondary\"\n                            size=\"small\"\n                            icon={<IconPlusSmall />}\n                            onClick={() => {\n                                posthog.capture('messaging campaign event conversion clicked')\n                                lemonToast.info('Event targeting coming soon!')\n                            }}\n                        >\n                            Add event conversion\n                        </LemonButton>\n                    </div>\n                </div>\n                <LemonDivider vertical />\n                <div className=\"flex-1\">\n                    <LemonField.Pure\n                        label=\"Conversion window\"\n                        info=\"How long after entering the campaign should we check for conversion? After this window, users will be considered for conversion.\"\n                    >\n                        <LemonSelect\n                            value={campaign.conversion?.window_minutes}\n                            onChange={(value) =>\n                                setCampaignValue('conversion', {\n                                    ...campaign.conversion,\n                                    window_minutes: value,\n                                })\n                            }\n                            placeholder=\"No conversion window\"\n                            allowClear\n                            options={[\n                                { value: 24 * 60 * 60, label: '24 hours' },\n                                { value: 7 * 24 * 60 * 60, label: '7 days' },\n                                { value: 14 * 24 * 60 * 60, label: '14 days' },\n                                { value: 30 * 24 * 60 * 60, label: '30 days' },\n                            ]}\n                        />\n                    </LemonField.Pure>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nfunction ExitConditionSection(): JSX.Element {\n    const { setCampaignValue } = useActions(campaignLogic)\n    const { campaign } = useValues(campaignLogic)\n\n    return (\n        <div className=\"flex flex-col flex-1 w-full py-2\">\n            <span className=\"text-md font-semibold\">Exit condition</span>\n            <p>Choose how your users move through the campaign.</p>\n\n            <LemonField.Pure>\n                <LemonRadio\n                    value={campaign.exit_condition ?? 'exit_only_at_end'}\n                    onChange={(value) => setCampaignValue('exit_condition', value)}\n                    options={[\n                        {\n                            value: 'exit_only_at_end',\n                            label: 'Exit at end of workflow',\n                        },\n                        {\n                            value: 'exit_on_trigger_not_matched',\n                            label: 'Exit on trigger not matched',\n                        },\n                        {\n                            value: 'exit_on_conversion',\n                            label: 'Exit on conversion',\n                        },\n                        {\n                            value: 'exit_on_trigger_not_matched_or_conversion',\n                            label: 'Exit on trigger not matched or conversion',\n                        },\n                    ]}\n                />\n            </LemonField.Pure>\n        </div>\n    )\n}\n"],"names":[],"sourceRoot":""}