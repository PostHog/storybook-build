{"version":3,"file":"95963.55e92a48.iframe.bundle.js","mappings":";AAgWA;AACA;AACA","sources":["webpack://@posthog/storybook/../../frontend/src/scenes/cohorts/CohortEdit.tsx"],"sourcesContent":["import { useActions, useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport { router } from 'kea-router'\n\nimport { IconCopy, IconInfo, IconTrash } from '@posthog/icons'\nimport { LemonBanner, LemonDivider, LemonFileInput, LemonSkeleton, Link, Tooltip } from '@posthog/lemon-ui'\n\nimport { NotFound } from 'lib/components/NotFound'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { SceneAddToNotebookDropdownMenu } from 'lib/components/Scenes/InsightOrDashboard/SceneAddToNotebookDropdownMenu'\nimport { SceneFile } from 'lib/components/Scenes/SceneFile'\nimport { TZLabel } from 'lib/components/TZLabel'\nimport { CohortTypeEnum, FEATURE_FLAGS } from 'lib/constants'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { LemonInput } from 'lib/lemon-ui/LemonInput/LemonInput'\nimport { LemonLabel } from 'lib/lemon-ui/LemonLabel/LemonLabel'\nimport { LemonSelect } from 'lib/lemon-ui/LemonSelect'\nimport { LemonTextArea } from 'lib/lemon-ui/LemonTextArea/LemonTextArea'\nimport { Spinner } from 'lib/lemon-ui/Spinner/Spinner'\nimport { IconErrorOutline, IconUploadFile } from 'lib/lemon-ui/icons'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { ButtonPrimitive } from 'lib/ui/Button/ButtonPrimitives'\nimport { WrappingLoadingSkeleton } from 'lib/ui/WrappingLoadingSkeleton/WrappingLoadingSkeleton'\nimport { pluralize } from 'lib/utils'\nimport { cn } from 'lib/utils/css-classes'\nimport { CohortCriteriaGroups } from 'scenes/cohorts/CohortFilters/CohortCriteriaGroups'\nimport { COHORT_TYPE_OPTIONS } from 'scenes/cohorts/CohortFilters/constants'\nimport { CohortLogicProps, cohortEditLogic } from 'scenes/cohorts/cohortEditLogic'\nimport { NotebookSelectButton } from 'scenes/notebooks/NotebookSelectButton/NotebookSelectButton'\nimport { NotebookNodeType } from 'scenes/notebooks/types'\nimport { urls } from 'scenes/urls'\n\nimport { ScenePanel, ScenePanelActions, ScenePanelDivider, ScenePanelMetaInfo } from '~/layout/scenes/SceneLayout'\nimport { SceneContent } from '~/layout/scenes/components/SceneContent'\nimport { SceneDivider } from '~/layout/scenes/components/SceneDivider'\nimport { SceneSection } from '~/layout/scenes/components/SceneSection'\nimport { SceneTitleSection } from '~/layout/scenes/components/SceneTitleSection'\nimport { Query } from '~/queries/Query/Query'\nimport { AndOrFilterSelect } from '~/queries/nodes/InsightViz/PropertyGroupFilters/AndOrFilterSelect'\n\nimport { AddPersonToCohortModal } from './AddPersonToCohortModal'\nimport { addPersonToCohortModalLogic } from './addPersonToCohortModalLogic'\nimport { createCohortDataNodeLogicKey } from './cohortUtils'\n\nconst RESOURCE_TYPE = 'cohort'\n\nexport function CohortEdit({ id }: CohortLogicProps): JSX.Element {\n    const logicProps = { id }\n\n    const logic = cohortEditLogic(logicProps)\n    const { deleteCohort, setOuterGroupsType, setQuery, duplicateCohort, setCohortValue } = useActions(logic)\n    const modalLogic = addPersonToCohortModalLogic(logicProps)\n    const { showAddPersonToCohortModal } = useActions(modalLogic)\n    const { cohort, cohortLoading, cohortMissing, query, duplicatedCohortLoading } = useValues(logic)\n    const isNewCohort = cohort.id === 'new' || cohort.id === undefined\n    const { featureFlags } = useValues(featureFlagLogic)\n    const newSceneLayout = featureFlags[FEATURE_FLAGS.NEW_SCENE_LAYOUT]\n    const dataNodeLogicKey = createCohortDataNodeLogicKey(cohort.id)\n\n    if (cohortMissing) {\n        return <NotFound object=\"cohort\" />\n    }\n\n    if (cohortLoading && !newSceneLayout) {\n        return (\n            <div className=\"flex flex-col gap-y-2\">\n                <LemonSkeleton active className=\"h-4 w-2/5\" />\n                <LemonSkeleton active className=\"h-4 w-full\" />\n                <LemonSkeleton active className=\"h-4 w-full\" />\n                <LemonSkeleton active className=\"h-4 w-3/5\" />\n            </div>\n        )\n    }\n    return (\n        <div className=\"cohort\">\n            <AddPersonToCohortModal id={id} />\n            <PageHeader\n                buttons={\n                    <div className=\"flex items-center gap-2\">\n                        {isNewCohort ? (\n                            <LemonButton\n                                data-attr=\"cancel-cohort\"\n                                type=\"secondary\"\n                                onClick={() => {\n                                    router.actions.push(urls.cohorts())\n                                }}\n                                disabled={cohortLoading}\n                            >\n                                Cancel\n                            </LemonButton>\n                        ) : (\n                            <>\n                                {!newSceneLayout && (\n                                    <More\n                                        overlay={\n                                            <>\n                                                {!cohort.is_static && (\n                                                    <>\n                                                        <LemonButton\n                                                            onClick={() => duplicateCohort(false)}\n                                                            fullWidth\n                                                            disabledReason={\n                                                                cohort.is_calculating\n                                                                    ? 'Cohort is still calculating'\n                                                                    : undefined\n                                                            }\n                                                            loading={duplicatedCohortLoading}\n                                                        >\n                                                            Duplicate as dynamic cohort\n                                                        </LemonButton>\n                                                        <LemonButton\n                                                            onClick={() => duplicateCohort(true)}\n                                                            fullWidth\n                                                            disabledReason={\n                                                                cohort.is_calculating\n                                                                    ? 'Cohort is still calculating'\n                                                                    : undefined\n                                                            }\n                                                            loading={duplicatedCohortLoading}\n                                                        >\n                                                            Duplicate as static cohort\n                                                        </LemonButton>\n                                                        <LemonDivider />\n                                                    </>\n                                                )}\n                                                <LemonButton\n                                                    data-attr=\"delete-cohort\"\n                                                    fullWidth\n                                                    status=\"danger\"\n                                                    onClick={deleteCohort}\n                                                >\n                                                    Delete cohort\n                                                </LemonButton>\n                                            </>\n                                        }\n                                    />\n                                )}\n                            </>\n                        )}\n                        {!isNewCohort && !newSceneLayout && (\n                            <NotebookSelectButton\n                                type=\"secondary\"\n                                resource={{\n                                    type: NotebookNodeType.Cohort,\n                                    attrs: { id },\n                                }}\n                            />\n                        )}\n                        <LemonButton\n                            type=\"primary\"\n                            data-attr=\"save-cohort\"\n                            htmlType=\"submit\"\n                            loading={cohortLoading || cohort.is_calculating}\n                            form=\"cohort\"\n                        >\n                            Save\n                        </LemonButton>\n                    </div>\n                }\n            />\n\n            <ScenePanel>\n                <ScenePanelMetaInfo>\n                    <SceneFile dataAttrKey={RESOURCE_TYPE} />\n                </ScenePanelMetaInfo>\n\n                <ScenePanelDivider />\n\n                <ScenePanelActions>\n                    <SceneAddToNotebookDropdownMenu\n                        dataAttrKey={RESOURCE_TYPE}\n                        disabledReasons={{\n                            'Save the cohort first': isNewCohort,\n                        }}\n                    />\n\n                    <ButtonPrimitive\n                        onClick={() => duplicateCohort(false)}\n                        disabledReasons={{\n                            'Save the cohort first': isNewCohort,\n                            'Cohort must be static to duplicate': !cohort.is_static,\n                            'Cohort is still calculating': cohort.is_calculating ?? false,\n                        }}\n                        menuItem\n                    >\n                        <IconCopy /> Duplicate as dynamic cohort\n                    </ButtonPrimitive>\n\n                    <ButtonPrimitive\n                        onClick={() => duplicateCohort(true)}\n                        disabledReasons={{\n                            'Save the cohort first': isNewCohort,\n                            'Cohort must be static to duplicate': !cohort.is_static,\n                            'Cohort is still calculating': cohort.is_calculating ?? false,\n                        }}\n                        menuItem\n                    >\n                        <IconCopy /> Duplicate as static cohort\n                    </ButtonPrimitive>\n\n                    <ScenePanelDivider />\n\n                    <ButtonPrimitive\n                        onClick={() => {\n                            deleteCohort()\n                        }}\n                        variant=\"danger\"\n                        menuItem\n                        data-attr={`${RESOURCE_TYPE}-delete`}\n                    >\n                        <IconTrash />\n                        Delete\n                    </ButtonPrimitive>\n                </ScenePanelActions>\n            </ScenePanel>\n\n            <Form id=\"cohort\" logic={cohortEditLogic} props={logicProps} formKey=\"cohort\" enableFormOnSubmit>\n                <SceneContent>\n                    <SceneTitleSection\n                        name={cohort.name}\n                        description={cohort.description || ''}\n                        resourceType={{\n                            to: urls.cohorts(),\n                            type: RESOURCE_TYPE,\n                        }}\n                        isLoading={cohortLoading}\n                        onNameChange={(value) => {\n                            setCohortValue('name', value)\n                        }}\n                        onDescriptionChange={(value) => {\n                            setCohortValue('description', value)\n                        }}\n                        docsURL=\"https://posthog.com/docs/data/cohorts\"\n                        canEdit\n                        forceEdit={isNewCohort}\n                    />\n\n                    <SceneDivider />\n\n                    <SceneSection\n                        title=\"Type\"\n                        description=\"Static cohorts are created once and never updated, while dynamic cohorts are recalculated based on the latest data.\"\n                        className={cn('max-w-200', {\n                            'deprecated-space-y-2 ': !newSceneLayout,\n                            'flex flex-col gap-y-2': newSceneLayout,\n                        })}\n                        hideTitleAndDescription\n                    >\n                        <div className=\"flex gap-4 flex-wrap\">\n                            {!newSceneLayout && (\n                                <div className=\"flex-1\">\n                                    <LemonField name=\"name\" label=\"Name\">\n                                        <LemonInput data-attr=\"cohort-name\" />\n                                    </LemonField>\n                                </div>\n                            )}\n                            <div className={cn('flex-1', newSceneLayout && 'flex flex-col gap-y-4')}>\n                                <LemonField name=\"is_static\" label={newSceneLayout ? null : 'Type'}>\n                                    {({ value, onChange }) => (\n                                        <LemonSelect\n                                            disabledReason={\n                                                isNewCohort\n                                                    ? null\n                                                    : 'Create a new cohort to use a different type of cohort.'\n                                            }\n                                            options={COHORT_TYPE_OPTIONS}\n                                            value={value ? CohortTypeEnum.Static : CohortTypeEnum.Dynamic}\n                                            onChange={(cohortType) => {\n                                                onChange(cohortType === CohortTypeEnum.Static)\n                                            }}\n                                            fullWidth\n                                            data-attr=\"cohort-type\"\n                                        />\n                                    )}\n                                </LemonField>\n\n                                {newSceneLayout && !isNewCohort && !cohort?.is_static && (\n                                    <div className=\"max-w-70 w-fit\">\n                                        <p className=\"flex items-center gap-x-1 my-0\">\n                                            <strong>Last calculated:</strong>\n                                            {cohort.is_calculating ? (\n                                                <WrappingLoadingSkeleton>In progress...</WrappingLoadingSkeleton>\n                                            ) : cohort.last_calculation ? (\n                                                <TZLabel time={cohort.last_calculation} />\n                                            ) : (\n                                                <>Not yet calculated</>\n                                            )}\n                                        </p>\n\n                                        {cohort.errors_calculating ? (\n                                            <Tooltip\n                                                title={\n                                                    \"The last attempted calculation failed. This means your current cohort data can be stale. This doesn't affect feature flag evaluation.\"\n                                                }\n                                            >\n                                                <div className=\"text-danger\">\n                                                    <IconErrorOutline className=\"text-danger text-xl shrink-0\" />\n                                                </div>\n                                            </Tooltip>\n                                        ) : null}\n                                    </div>\n                                )}\n                            </div>\n                            {!newSceneLayout && !isNewCohort && !cohort?.is_static && (\n                                <div className=\"max-w-70 w-fit\">\n                                    <div className=\"flex gap-1 flex-col\">\n                                        <LemonLabel>Last calculated</LemonLabel>\n                                        {cohort.is_calculating ? (\n                                            <div className=\"text-s\">In progress...</div>\n                                        ) : cohort.last_calculation ? (\n                                            <div className=\"flex flex-1 flex-row gap-1\">\n                                                <TZLabel time={cohort.last_calculation} />\n                                                {cohort.errors_calculating ? (\n                                                    <Tooltip\n                                                        title={\n                                                            \"The last attempted calculation failed. This means your current cohort data can be stale. This doesn't affect feature flag evaluation.\"\n                                                        }\n                                                    >\n                                                        <div className=\"text-danger\">\n                                                            <IconErrorOutline className=\"text-danger text-xl shrink-0\" />\n                                                        </div>\n                                                    </Tooltip>\n                                                ) : null}\n                                            </div>\n                                        ) : (\n                                            <div className=\"text-s\">Not yet calculated</div>\n                                        )}\n                                        <div className=\"text-secondary text-xs\">\n                                            Cohorts are recalculated every 24 hours\n                                        </div>\n                                    </div>\n                                </div>\n                            )}\n                        </div>\n                        {!newSceneLayout && (\n                            <div className=\"ph-ignore-input\">\n                                <LemonField name=\"description\" label=\"Description\" data-attr=\"cohort-description\">\n                                    <LemonTextArea />\n                                </LemonField>\n                            </div>\n                        )}\n                    </SceneSection>\n                    {cohort.is_static ? (\n                        <>\n                            <SceneDivider />\n                            <SceneSection\n                                title={isNewCohort ? 'Upload users' : 'Add users'}\n                                description={\n                                    isNewCohort\n                                        ? `Upload a CSV file to add users to your cohort. For single-column files, include\n                                        one distinct ID per row (all rows will be processed as data). For multi-column\n                                        files, include a header row with a 'distinct_id' column containing the user\n                                        identifiers.`\n                                        : undefined\n                                }\n                                className={cn('ph-ignore-input', !newSceneLayout && 'mt-4')}\n                            >\n                                {!isNewCohort && newSceneLayout && (\n                                    <div className=\"flex flex-col gap-y-0 flex-1 justify-center\">\n                                        <h3 className=\"text-sm\">Upload a CSV</h3>\n                                        <span className=\"max-w-prose\">\n                                            Upload a CSV file to add users to your cohort. For single-column files,\n                                            include one distinct ID per row (all rows will be processed as data). For\n                                            multi-column files, include a header row with a 'distinct_id' column\n                                            containing the user identifiers.\n                                        </span>\n                                    </div>\n                                )}\n                                {/* TODO: @adamleithp Allow users to download a template CSV file */}\n                                {/* TODO: @adamleithp Tell users that adding ANOTHER file will NOT(?) replace the current one */}\n                                {/* TODO: @adamleithp Render the csv file and validate it */}\n                                {/* TODO: @adamleithp Adding a csv file doesn't show up with cohort.csv... */}\n                                <LemonField\n                                    name=\"csv\"\n                                    label={newSceneLayout ? null : isNewCohort ? null : 'Upload users'}\n                                    data-attr=\"cohort-csv\"\n                                >\n                                    {({ onChange }) => (\n                                        <>\n                                            {!newSceneLayout && !isNewCohort && (\n                                                <div className=\"flex items-center gap-2\">\n                                                    <span>\n                                                        Upload a CSV file to add users to your cohort using distinct IDs\n                                                        or person UUIDs.\n                                                    </span>\n                                                    <Tooltip\n                                                        title={\n                                                            <>\n                                                                <div className=\"space-y-2\">\n                                                                    <div>\n                                                                        <strong>Distinct IDs:</strong> Use \"\n                                                                        <code>distinct_id</code>\" (or \"\n                                                                        <code>distinct-id</code>\") as the column header\n                                                                        (for multi-column CSV uploads) or include one\n                                                                        distinct ID per row (no header needed) for a\n                                                                        single-column CSV.\n                                                                    </div>\n                                                                    <div>\n                                                                        <strong>Person UUIDs:</strong> Use \"\n                                                                        <code>person_id</code>\" (or \"\n                                                                        <code>person-id</code>\" or \"\n                                                                        <code>Person .id</code>\") as the column header\n                                                                        (for single-column or multi-column CSV uploads).\n                                                                    </div>\n                                                                </div>\n                                                            </>\n                                                        }\n                                                    >\n                                                        <IconInfo className=\"text-secondary text-lg\" />\n                                                    </Tooltip>\n                                                </div>\n                                            )}\n                                            <LemonFileInput\n                                                accept=\".csv\"\n                                                multiple={false}\n                                                value={cohort.csv ? [cohort.csv] : []}\n                                                onChange={(files) => onChange(files[0])}\n                                                showUploadedFiles={false}\n                                                callToAction={\n                                                    <div\n                                                        className={cn(\n                                                            'flex flex-col items-center justify-center flex-1 cohort-csv-dragger text-text-3000 deprecated-space-y-1',\n                                                            newSceneLayout &&\n                                                                'text-primary mt-0 bg-transparent border border-dashed border-primary hover:border-secondary p-8',\n                                                            newSceneLayout && cohort.csv?.name && 'border-success'\n                                                        )}\n                                                    >\n                                                        {cohort.csv ? (\n                                                            <>\n                                                                <IconUploadFile\n                                                                    style={{\n                                                                        fontSize: '3rem',\n                                                                        color: !newSceneLayout\n                                                                            ? 'var(--color-text-secondary)'\n                                                                            : 'var(--color-text-primary)',\n                                                                    }}\n                                                                />\n                                                                <div>{cohort.csv?.name ?? 'File chosen'}</div>\n                                                            </>\n                                                        ) : (\n                                                            <>\n                                                                <IconUploadFile\n                                                                    style={{\n                                                                        fontSize: '3rem',\n                                                                        color: !newSceneLayout\n                                                                            ? 'var(--color-text-secondary)'\n                                                                            : 'var(--color-text-primary)',\n                                                                    }}\n                                                                />\n                                                                <div>\n                                                                    Drag a file here or click to browse for a file\n                                                                </div>\n                                                                {newSceneLayout && (\n                                                                    <div className=\"text-secondary text-xs\">\n                                                                        Accepts .csv files only\n                                                                    </div>\n                                                                )}\n                                                            </>\n                                                        )}\n                                                    </div>\n                                                }\n                                            />\n                                        </>\n                                    )}\n                                </LemonField>\n                            </SceneSection>\n                            {!isNewCohort && (\n                                <>\n                                    <LemonDivider label=\"OR\" />\n                                    <div>\n                                        <h3 className=\"text-sm\">Add users manually</h3>\n                                        <span className=\"max-w-prose\">\n                                            Select the users that you would like to add to the cohort.\n                                        </span>\n                                        <LemonButton\n                                            className=\"w-fit mt-4\"\n                                            type=\"primary\"\n                                            onClick={showAddPersonToCohortModal}\n                                        >\n                                            Add Users\n                                        </LemonButton>\n                                    </div>\n                                </>\n                            )}\n                        </>\n                    ) : (\n                        <>\n                            {!newSceneLayout ? <LemonDivider /> : <SceneDivider />}\n                            {!isNewCohort && cohort.experiment_set && cohort.experiment_set.length > 0 && (\n                                <LemonBanner type=\"info\">\n                                    This cohort manages exposure for an experiment. Editing this cohort may change\n                                    experiment metrics. If unsure,{' '}\n                                    <Link to={urls.experiment(cohort.experiment_set[0])}>\n                                        check the experiment details.\n                                    </Link>\n                                </LemonBanner>\n                            )}\n                            <SceneSection\n                                // TODO: @adamleithp Add a number of matching persons to the title \"Matching criteria (100)\"\n                                title=\"Matching criteria\"\n                                description=\"Actors who match the following criteria will be part of the cohort. Continuously updated automatically.\"\n                                className={cn('flex items-start justify-between')}\n                                hideTitleAndDescription\n                            >\n                                {!newSceneLayout && (\n                                    <div className=\"flex flex-col\">\n                                        <LemonLabel htmlFor=\"groups\">Matching criteria</LemonLabel>\n                                        <span>\n                                            Actors who match the following criteria will be part of the cohort.\n                                            Continuously updated automatically.\n                                        </span>\n                                    </div>\n                                )}\n                                <AndOrFilterSelect\n                                    value={cohort.filters.properties.type}\n                                    onChange={(value) => {\n                                        setOuterGroupsType(value)\n                                    }}\n                                    topLevelFilter={true}\n                                    suffix={['criterion', 'criteria']}\n                                />\n                                <div className={cn('w-full', newSceneLayout && '[&>div]:my-0 [&>div]:w-full')}>\n                                    <CohortCriteriaGroups id={logicProps.id} />\n                                </div>\n                            </SceneSection>\n                        </>\n                    )}\n\n                    {/* The typeof here is needed to pass the cohort id to the query below. Using `isNewCohort` won't work */}\n                    {typeof cohort.id === 'number' && (\n                        <>\n                            <SceneDivider />\n                            <SceneSection\n                                title={\n                                    <>\n                                        Persons in this cohort\n                                        <span className=\"text-secondary ml-2\">\n                                            {!cohort.is_calculating &&\n                                                cohort.count !== undefined &&\n                                                `(${cohort.count})`}\n                                        </span>\n                                    </>\n                                }\n                                description=\"Persons who match the following criteria will be part of the cohort.\"\n                                hideTitleAndDescription\n                            >\n                                {!newSceneLayout && <LemonDivider />}\n                                <div>\n                                    {!newSceneLayout && (\n                                        <h3 className=\"l3 mb-4\">\n                                            Persons in this cohort\n                                            <span className=\"text-secondary ml-2\">\n                                                {!cohort.is_calculating &&\n                                                    cohort.count !== undefined &&\n                                                    `(${cohort.count} matching ${pluralize(\n                                                        cohort.count,\n                                                        'person',\n                                                        'persons',\n                                                        false\n                                                    )})`}\n                                            </span>\n                                        </h3>\n                                    )}\n                                    {cohort.is_calculating ? (\n                                        <div className=\"cohort-recalculating flex items-center\">\n                                            <Spinner className=\"mr-4\" />\n                                            {cohort.is_static\n                                                ? \"We're creating this cohort. This could take up to a couple of minutes.\"\n                                                : \"We're recalculating who belongs to this cohort. This could take up to a couple of minutes.\"}\n                                        </div>\n                                    ) : (\n                                        <Query\n                                            query={query}\n                                            setQuery={setQuery}\n                                            context={{\n                                                refresh: 'force_blocking',\n                                                fileNameForExport: cohort.name,\n                                                dataNodeLogicKey: dataNodeLogicKey,\n                                            }}\n                                        />\n                                    )}\n                                </div>\n                            </SceneSection>\n                        </>\n                    )}\n                </SceneContent>\n            </Form>\n        </div>\n    )\n}\n"],"names":[],"sourceRoot":""}