{"version":3,"file":"60982.c71bf670.iframe.bundle.js","mappings":";AA4BA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AC5NA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AChCA;AACA;AAWA;AACA;AACA;AACA;AAUA;AACA;AASA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;AACA;AACA;AA0CA;AAmCA;AACA;AACA;AACA;AACA;AACA;AA4DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7RA;AACA;AACA;AACA;AACA;AACA;AACA;ACFA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;ACgBA;AACA;AACA;AACA;AACA;AChBA;AAGA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAgBA;AACA;AAQA;AACA;AC1GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvFA;AACA;AACA;AACA;ACYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;AChHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACUA;;;;;;;;;;;;;;;ACmvJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5DA;AACA;ACiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACyIA;AACA;AAUA;AACA;AAkFA;AACA;AAUA;AACA;AAuDA;AASA;AAsCA","sources":["webpack://@posthog/storybook/../../frontend/src/scenes/experiments/ExperimentCodeSnippets.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/sdk-install-instructions/android.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/sdk-install-instructions/angular.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/sdk-install-instructions/astro.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/sdk-install-instructions/django.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/sdk-install-instructions/flutter.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/sdk-install-instructions/go.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/sdk-install-instructions/ios.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/sdk-install-instructions/laravel.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/sdk-install-instructions/nodejs.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/sdk-install-instructions/nuxt.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/sdk-install-instructions/php.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/sdk-install-instructions/python.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/sdk-install-instructions/react-native.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/sdk-install-instructions/remix.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/sdk-install-instructions/ruby.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/sdk-install-instructions/svelte.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/sdk-install-instructions/vue.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/sdk-install-instructions/next-js.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/sdk-install-instructions/react.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/web-analytics/react-native.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/data-warehouse/OnboardingDataWarehouseSourcesStep.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/sdksLogic.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/error-tracking/angular.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/error-tracking/next-js.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/error-tracking/node.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/error-tracking/svelte.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/product-analytics/django.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/product-analytics/helicone.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/product-analytics/nodejs.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/sdks/product-analytics/react-native.tsx","webpack://@posthog/storybook/../../frontend/src/scenes/onboarding/Onboarding.tsx"],"sourcesContent":["import { Link } from '@posthog/lemon-ui'\n\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\n\nfunction ServerSideWarning(): JSX.Element {\n    return (\n        <div className=\"warning\">\n            <p>\n                <b>Warning:</b> Server side experiment metrics require you to manually send the feature flag\n                information.{' '}\n                <Link to=\"https://posthog.com/docs/experiments/adding-experiment-code\" target=\"_blank\">\n                    See this tutorial for more information.\n                </Link>\n            </p>\n        </div>\n    )\n}\n\ninterface SnippetProps {\n    flagKey: string\n    variant: string\n}\n\nexport function AndroidSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.Kotlin} wrap>\n                {`if (PostHog.getFeatureFlag(\"${flagKey}\") == \"${variant}\") {\n    // do something\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function IOSSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.Swift} wrap>\n                {`if (PostHogSDK.shared.getFeatureFlag(\"${flagKey}\") as? String == \"${variant}\") {\n    // do something\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function NodeJSSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.JavaScript} wrap>\n                {`const experimentFlagValue = await client.getFeatureFlag('${flagKey}', 'user distinct id')\n\nif (experimentFlagValue === '${variant}' ) {\n    // Do something differently for this user\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n            <ServerSideWarning />\n        </>\n    )\n}\n\nexport function JSSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <div>\n            <CodeSnippet language={Language.JavaScript} wrap>\n                {`if (posthog.getFeatureFlag('${flagKey}') === '${variant}') {\n    // Do something differently for this user\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n            <div className=\"mt-4 mb-1\">\n                <b>Test that it works</b>\n            </div>\n            <CodeSnippet language={Language.JavaScript} wrap>\n                {`posthog.featureFlags.overrideFeatureFlags({ flags: {'${flagKey}': '${variant}'} })`}\n            </CodeSnippet>\n        </div>\n    )\n}\n\nexport function ReactSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.JavaScript} wrap>\n                {`// You can either use the useFeatureFlagVariantKey hook,\n// or you can use the feature flags component - https://posthog.com/docs/libraries/react#feature-flags-react-component\n\n// Method one: using the useFeatureFlagVariantKey hook\nimport { useFeatureFlagVariantKey } from 'posthog-js/react'\n\nfunction App() {\n    const variant = useFeatureFlagVariantKey('${flagKey}')\n    if (variant === '${variant}') {\n        // do something\n    }\n}\n\n// Method two: using the feature flags component\nimport { PostHogFeature } from 'posthog-js/react'\n\nfunction App() {\n    return (\n        <PostHogFeature flag='${flagKey}' match='${variant}'>\n            <div>\n                {/* the component to show */}\n            </div>\n        </PostHogFeature>\n    )\n}\n\n// You can also test your code by overriding the feature flag:\nposthog.featureFlags.overrideFeatureFlags({ flags: {'${flagKey}': '${variant}'} })`}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function RNSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.JavaScript} wrap>\n                {`if (posthog.getFeatureFlag('${flagKey}') === '${variant}') {\n    // Do something differently for this user\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function PHPSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.PHP} wrap>\n                {`if (PostHog::getFeatureFlag('${flagKey}', 'user distinct id') == '${variant}') {\n    // Do something differently for this user\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n            <ServerSideWarning />\n        </>\n    )\n}\n\nexport function GolangSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.Go} wrap>\n                {`experimentFlagValue, err := client.GetFeatureFlag(posthog.FeatureFlagPayload{\n    Key:        '${flagKey}',\n    DistinctId: \"distinct-id\",\n})\nif err != nil {\n    // Handle error (e.g. capture error and fallback to default behaviour)\n}\nif experimentFlagValue == '${variant}' {\n    // Do something differently for this user\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n            <ServerSideWarning />\n        </>\n    )\n}\n\nexport function FlutterSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    const clientSuffix = 'await Posthog().'\n    const flagFunction = 'getFeatureFlag'\n    const variantSuffix = ` == '${variant}'`\n\n    return (\n        <>\n            <CodeSnippet language={Language.Dart} wrap>\n                {`if (${clientSuffix}${flagFunction}('${flagKey}')${variantSuffix}) {\n  // Do something differently for this user\n} else {\n  // It's a good idea to let control variant always be the default behaviour,\n  // so if something goes wrong with flag evaluation, you don't break your app.\n}\n            `}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function RubySnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.Ruby} wrap>\n                {`experimentFlagValue = posthog.get_feature_flag('${flagKey}', 'user distinct id')\n\n\nif experimentFlagValue == '${variant}'\n    # Do something differently for this user\nelse\n    # It's a good idea to let control variant always be the default behaviour,\n    # so if something goes wrong with flag evaluation, you don't break your app.\nend\n`}\n            </CodeSnippet>\n            <ServerSideWarning />\n        </>\n    )\n}\n\nexport function PythonSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.Python} wrap>\n                {`experiment_flag_value = posthog.get_feature_flag(\"${flagKey}\", \"user_distinct_id\"):\n\nif experiment_flag_value == '${variant}':\n    # Do something differently for this user\nelse:\n    # It's a good idea to let control variant always be the default behaviour,\n    # so if something goes wrong with flag evaluation, you don't break your app.\n`}\n            </CodeSnippet>\n            <ServerSideWarning />\n        </>\n    )\n}\n","import { useValues } from 'kea'\n\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nexport interface AndroidSetupProps {\n    includeReplay?: boolean\n}\n\nfunction AndroidInstallSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.Kotlin}>\n            {`dependencies {\n    implementation(\"com.posthog:posthog-android:3.+\")\n}`}\n        </CodeSnippet>\n    )\n}\n\nfunction AndroidSetupSnippet({ includeReplay }: AndroidSetupProps): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.Kotlin}>\n            {`class SampleApp : Application() {\n\n    companion object {\n        const val POSTHOG_API_KEY = \"${currentTeam?.api_token}\"\n        const val POSTHOG_HOST = \"${apiHostOrigin()}\"\n    }\n\n    override fun onCreate() {\n        super.onCreate()\n\n        // Create a PostHog Config with the given API key and host\n        val config = PostHogAndroidConfig(\n            apiKey = POSTHOG_API_KEY,\n            host = POSTHOG_HOST\n        )\n        ${\n            includeReplay\n                ? `\n        // check https://posthog.com/docs/session-replay/installation?tab=Android\n        // for more config and to learn about how we capture sessions on mobile\n        // and what to expect\n        config.sessionReplay = true\n        // choose whether to mask images or text\n        config.sessionReplayConfig.maskAllImages = false\n        config.sessionReplayConfig.maskAllTextInputs = true\n        // screenshot is disabled by default\n        // The screenshot may contain sensitive information, use with caution\n        config.sessionReplayConfig.screenshot = true`\n                : ''\n        }\n\n        // Setup PostHog with the given Context and Config\n        PostHogAndroid.setup(this, config)\n    }\n}`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallAndroidInstructions(props: AndroidSetupProps): JSX.Element {\n    return (\n        <>\n            <h3>Install</h3>\n            <AndroidInstallSnippet />\n            <h3>Configure</h3>\n            <AndroidSetupSnippet {...props} />\n        </>\n    )\n}\n\nexport function SDKInstallAndroidTrackScreenInstructions(): JSX.Element {\n    return (\n        <>\n            <p>\n                With <code>captureScreenViews = true</code>, PostHog will try to record all screen changes\n                automatically.\n            </p>\n            <p>\n                If you want to manually send a new screen capture event, use the <code>screen</code> function.\n            </p>\n            <CodeSnippet language={Language.Kotlin}>{`import com.posthog.PostHog\n\nPostHog.screen(\n    screenTitle = \"Dashboard\",\n    properties = mapOf(\n        \"background\" to \"blue\",\n        \"hero\" to \"superhog\"\n    )\n)`}</CodeSnippet>\n        </>\n    )\n}\n","import { useValues } from 'kea'\n\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { SDK_DEFAULTS_DATE } from './constants'\nimport { JSInstallSnippet } from './js-web'\n\nfunction EnvVarsSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.Bash}>\n            {[`POSTHOG_KEY=${currentTeam?.api_token}`, `POSTHOG_HOST=${apiHostOrigin()}`].join('\\n')}\n        </CodeSnippet>\n    )\n}\n\nfunction AngularInitializeCodeSnippet(): JSX.Element {\n    const { featureFlags } = useValues(featureFlagLogic)\n    const isPersonProfilesDisabled = featureFlags[FEATURE_FLAGS.PERSONLESS_EVENTS_NOT_SUPPORTED]\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`// in src/main.ts\n\nimport { bootstrapApplication } from '@angular/platform-browser';\nimport { appConfig } from './app/app.config';\nimport { AppComponent } from './app/app.component';\nimport posthog from 'posthog-js'\n\nposthog.init(\n  process.env.POSTHOG_KEY,\n  {\n    api_host:process.env.POSTHOG_HOST,\n    ${\n        !isPersonProfilesDisabled\n            ? `person_profiles: 'identified_only', // or 'always' to create profiles for anonymous users as well`\n            : null\n    }\n    defaults: '${SDK_DEFAULTS_DATE}'\n  }\n)\n\nbootstrapApplication(AppComponent, appConfig)\n  .catch((err) => console.error(err));`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallAngularInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install posthog-js using your package manager</h3>\n            <JSInstallSnippet />\n            <h3>Add environment variables</h3>\n            <p>\n                Add your environment variables to your .env.local file and to your hosting provider (e.g. Vercel,\n                Netlify, AWS). You can find your project API key in your project settings.\n            </p>\n            <EnvVarsSnippet />\n\n            <h3>Initialize</h3>\n            <p>\n                In your <code>src/main.ts</code>, initialize PostHog using your project API key and instance address:\n            </p>\n            <AngularInitializeCodeSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\n\nimport { LemonDivider } from '@posthog/lemon-ui'\n\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { useJsSnippet } from 'lib/components/JSSnippet'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\n\nimport SetupWizardBanner from './components/SetupWizardBanner'\n\nfunction CreatePostHogAstroFileSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.Bash}>\n            {`cd ./src/components \n# or 'cd ./src && mkdir components && cd ./components' if your components folder doesn't exist \ntouch posthog.astro`}\n        </CodeSnippet>\n    )\n}\n\nfunction AstroSetupSnippet(): JSX.Element {\n    const jsSnippetScriptTag = useJsSnippet(0, undefined, 'is:inline')\n    return (\n        <>\n            <CodeSnippet language={Language.JavaScript}>\n                {`---\n// src/components/posthog.astro\n---\n${jsSnippetScriptTag}\n`}\n            </CodeSnippet>\n        </>\n    )\n}\n\nfunction CreateLayoutSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.Bash}>\n            {`cd ./src/layouts\n# or 'cd ./src && mkdir layouts && cd ./layouts' if your layouts folder doesn't exist \ntouch PostHogLayout.astro`}\n        </CodeSnippet>\n    )\n}\n\nfunction LayoutCodeSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`---\nimport PostHog from '../components/posthog.astro'\n---\n<head>\n    <PostHog />\n</head>`}\n        </CodeSnippet>\n    )\n}\n\nfunction IndexPageSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`---\nimport PostHogLayout from '../layouts/PostHogLayout.astro';\n---\n<PostHogLayout>\n  <!-- your existing app components -->\n</PostHogLayout>`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallAstroInstructions({ hideWizard }: { hideWizard?: boolean }): JSX.Element {\n    const { isCloudOrDev } = useValues(preflightLogic)\n    const showSetupWizard = !hideWizard && isCloudOrDev\n    return (\n        <>\n            {showSetupWizard && (\n                <>\n                    <h2>Automated Installation</h2>\n                    <SetupWizardBanner integrationName=\"Astro\" />\n                    <LemonDivider label=\"OR\" />\n                    <h2>Manual Installation</h2>\n                </>\n            )}\n            <h3>1. Create the PostHog component</h3>\n            <p>\n                In your <code>src/components</code> folder, create a <code>posthog.astro</code> file:\n            </p>\n            <CreatePostHogAstroFileSnippet />\n            <p>\n                In this file, add your PostHog web snippet. Be sure to include the <code>is:inline</code> directive{' '}\n                <Link\n                    to=\"https://docs.astro.build/en/guides/client-side-scripts/#opting-out-of-processing\"\n                    target=\"_blank\"\n                >\n                    to prevent Astro from processing it\n                </Link>\n                , or you will get TypeScript and build errors that property 'posthog' does not exist on type 'Window &\n                typeof globalThis':\n            </p>\n            <AstroSetupSnippet />\n\n            <h3>2. Create a layout</h3>\n            <p>\n                Create a layout where we will use <code>posthog.astro</code>. Create a new file{' '}\n                <code>PostHogLayout.astro</code> in your <code>src/layouts</code> folder:\n            </p>\n            <CreateLayoutSnippet />\n            <p>\n                Add the following code to <code>PostHogLayout.astro</code>:\n            </p>\n            <LayoutCodeSnippet />\n\n            <h3>3. Use the layout in your pages</h3>\n            <p>\n                Finally, update your pages (like <code>index.astro</code>) to wrap your existing app components with the\n                new layout:\n            </p>\n            <IndexPageSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\n\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nfunction DjangoInstallSnippet(): JSX.Element {\n    return <CodeSnippet language={Language.Bash}>pip install posthog</CodeSnippet>\n}\n\nfunction DjangoAppConfigSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.Python}>\n            {`from django.apps import AppConfig\nimport posthog\n\nclass YourAppConfig(AppConfig):\n    name = \"your_app_name\"\n    def ready(self):\n        posthog.api_key = '${currentTeam?.api_token}'\n        posthog.host = '${apiHostOrigin()}'`}\n        </CodeSnippet>\n    )\n}\n\nfunction DjangoSettingsSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.Python}>\n            {`INSTALLED_APPS = [\n    # other apps\n    'your_app_name.apps.MyAppConfig',  # Add your app config\n] `}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallDjangoInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install</h3>\n            <DjangoInstallSnippet />\n            <h3>Configure</h3>\n            <p>\n                Set the PostHog API key and host in your <code>AppConfig</code> in <code>apps.py</code> so that's it's\n                available everywhere:\n            </p>\n            <DjangoAppConfigSnippet />\n            <p />\n            Next, if you haven't done so already, make sure you add your <code>AppConfig</code> to your{' '}\n            <code>settings.py</code> under <code>INSTALLED_APPS</code>:\n            <DjangoSettingsSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\n\nimport { Link } from '@posthog/lemon-ui'\n\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { useJsSnippet } from 'lib/components/JSSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nexport interface FlutterSetupProps {\n    includeReplay?: boolean\n    includeSurveys?: boolean\n    requiresManualInstall?: boolean\n}\n\nexport interface FlutterInstallProps {\n    apiToken?: string\n}\n\nfunction FlutterInstallSnippet(): JSX.Element {\n    return <CodeSnippet language={Language.YAML}>posthog_flutter: ^5.0.0</CodeSnippet>\n}\n\nfunction FlutterDartSetup(props: FlutterSetupProps & FlutterInstallProps): JSX.Element {\n    const configOptions = [\n        props.includeReplay &&\n            `// check https://posthog.com/docs/session-replay/installation?tab=Flutter\n  // for more config and to learn about how we capture sessions on mobile\n  // and what to expect\n  config.sessionReplay = true;\n  // choose whether to mask images or text\n  config.sessionReplayConfig.maskAllTexts = false;\n  config.sessionReplayConfig.maskAllImages = false;`,\n        props.includeSurveys && `config.surveys = true`,\n    ]\n        .filter(Boolean)\n        .join('\\n')\n\n    return (\n        <CodeSnippet language={Language.Dart}>\n            {`import 'package:flutter/material.dart';\n\nimport 'package:posthog_flutter/posthog_flutter.dart';\n\nFuture<void> main() async {\n  // init WidgetsFlutterBinding if not yet\n  WidgetsFlutterBinding.ensureInitialized();\n  final config = PostHogConfig('${props.apiToken}');\n  config.host = '${apiHostOrigin()}';\n  config.debug = true;\n  config.captureApplicationLifecycleEvents = true;\n  ${configOptions}\n  // Setup PostHog with the given Context and Config\n  await Posthog().setup(config);\n  runApp(MyApp());\n}`}\n        </CodeSnippet>\n    )\n}\n\nfunction InstallFlutterWidgetsAndObsserver(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.Dart}>\n            {`import 'package:flutter/material.dart';\n\nimport 'package:posthog_flutter/posthog_flutter.dart';\n\nclass MyApp extends StatefulWidget {\n  const MyApp({super.key});\n\n  @override\n  State<MyApp> createState() => _MyAppState();\n}\n\nclass _MyAppState extends State<MyApp> {\n  @override\n  void initState() {\n    super.initState();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // Wrap your App with PostHogWidget\n    return PostHogWidget(\n      child: MaterialApp(\n        // Add PosthogObserver to your navigatorObservers\n        navigatorObservers: [PosthogObserver()],\n        title: 'My App',\n        home: const HomeScreen(),\n      ),\n    );\n  }\n}\n// If you're using go_router, check this page to learn how to set up the PosthogObserver\n// https://posthog.com/docs/libraries/flutter#capturing-screen-views`}\n        </CodeSnippet>\n    )\n}\n\nfunction InstallFlutterObserver(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.Dart}>\n            {`import 'package:flutter/material.dart';\n\nimport 'package:posthog_flutter/posthog_flutter.dart';\n\nclass MyApp extends StatefulWidget {\n  const MyApp({super.key});\n\n  @override\n  State<MyApp> createState() => _MyAppState();\n}\n\nclass _MyAppState extends State<MyApp> {\n  @override\n  void initState() {\n    super.initState();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n        // Add PosthogObserver to your navigatorObservers\n        navigatorObservers: [PosthogObserver()],\n        title: 'My App',\n        home: const HomeScreen(),\n    );\n);\n  }\n}\n// If you're using go_router, check this page to learn how to set up the PosthogObserver\n// https://posthog.com/docs/libraries/flutter#capturing-screen-views\n\n`}\n        </CodeSnippet>\n    )\n}\n\nfunction FlutterAndroidSetupSnippet({ requiresManualInstall }: FlutterSetupProps): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n    const url = apiHostOrigin()\n\n    const minSdkVersionInstructions = (\n        <>\n            <p>\n                Update the minimum Android SDK version to <strong>21</strong> in{' '}\n                <strong>android/app/build.gradle</strong>:\n            </p>\n            <CodeSnippet language={Language.Groovy}>\n                {`defaultConfig {\n    minSdkVersion 21\n    // rest of your config\n}`}\n            </CodeSnippet>\n        </>\n    )\n\n    if (requiresManualInstall) {\n        return (\n            <>\n                <CodeSnippet language={Language.XML}>\n                    {\n                        '<application>\\n\\t<activity>\\n\\t\\t[...]\\n\\t</activity>\\n\\t<meta-data android:name=\"com.posthog.posthog.AUTO_INIT\" android:value=\"false\" />\\n</application>'\n                    }\n                </CodeSnippet>\n                {minSdkVersionInstructions}\n            </>\n        )\n    }\n    return (\n        <>\n            <CodeSnippet language={Language.XML}>\n                {'<application>\\n\\t<activity>\\n\\t\\t[...]\\n\\t</activity>\\n\\t<meta-data android:name=\"com.posthog.posthog.API_KEY\" android:value=\"' +\n                    currentTeam?.api_token +\n                    '\" />\\n\\t<meta-data android:name=\"com.posthog.posthog.POSTHOG_HOST\" android:value=\"' +\n                    url +\n                    '\" />\\n\\t<meta-data android:name=\"com.posthog.posthog.TRACK_APPLICATION_LIFECYCLE_EVENTS\" android:value=\"true\" />\\n\\t<meta-data android:name=\"com.posthog.posthog.DEBUG\" android:value=\"true\" />\\n</application>'}\n            </CodeSnippet>\n            {minSdkVersionInstructions}\n        </>\n    )\n}\n\nfunction FlutterIOSSetupSnippet({ requiresManualInstall }: FlutterSetupProps): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n    const url = apiHostOrigin()\n\n    const minPlatformVersionInstructions = (\n        <>\n            <p>\n                Update the minimum platform version to iOS <strong>13.0</strong> in your <strong>Podfile</strong>:\n            </p>\n            <CodeSnippet language={Language.YAML}>\n                {`platform :ios, '13.0'\n    # rest of your config`}\n            </CodeSnippet>\n        </>\n    )\n\n    if (requiresManualInstall) {\n        return (\n            <>\n                <CodeSnippet language={Language.XML}>\n                    {'<dict>\\n\\t[...]\\n\\t<key>com.posthog.posthog.AUTO_INIT</key>\\n\\t<false/>\\n\\t[...]\\n</dict>'}\n                </CodeSnippet>\n                {minPlatformVersionInstructions}\n            </>\n        )\n    }\n    return (\n        <>\n            <CodeSnippet language={Language.XML}>\n                {'<dict>\\n\\t[...]\\n\\t<key>com.posthog.posthog.API_KEY</key>\\n\\t<string>' +\n                    currentTeam?.api_token +\n                    '</string>\\n\\t<key>com.posthog.posthog.POSTHOG_HOST</key>\\n\\t<string>' +\n                    url +\n                    '</string>\\n\\t<key>com.posthog.posthog.CAPTURE_APPLICATION_LIFECYCLE_EVENTS</key>\\n\\t<true/>\\n\\t<key>com.posthog.posthog.DEBUG</key>\\n\\t<true/>\\n</dict>'}\n            </CodeSnippet>\n            {minPlatformVersionInstructions}\n        </>\n    )\n}\n\nfunction FlutterWebSetupSnippet(): JSX.Element {\n    const jsSnippet = useJsSnippet(4)\n\n    return (\n        <CodeSnippet language={Language.HTML}>\n            {`<!DOCTYPE html>\n<html>\n  <head>\n    ...\n${jsSnippet}\n  </head>\n</html>`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallFlutterInstructions(props: FlutterSetupProps): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <>\n            <h3>Install</h3>\n            <FlutterInstallSnippet />\n            <h3>Android Setup</h3>\n            <p className=\"prompt-text\">Add these values in AndroidManifest.xml</p>\n            <FlutterAndroidSetupSnippet {...props} />\n            <h3>iOS/macOS Setup</h3>\n            <p className=\"prompt-text\">Add these values in Info.plist</p>\n            <FlutterIOSSetupSnippet {...props} />\n            {props.requiresManualInstall && (\n                <>\n                    <h3>Dart Setup</h3>\n                    <p className=\"prompt-text\">Add these values in main.dart</p>\n                    <FlutterDartSetup {...props} apiToken={currentTeam?.api_token} />\n                    {props.includeSurveys && (\n                        <>\n                            <p className=\"prompt-text\">\n                                Install the <strong>PosthogObserver</strong> to your app\n                            </p>\n                            <InstallFlutterObserver />\n                        </>\n                    )}\n                    {props.includeReplay && (\n                        <>\n                            <p className=\"prompt-text\">\n                                Wrap your app with the <strong>PostHogWidget</strong> and install the{' '}\n                                <strong>PosthogObserver</strong>\n                            </p>\n                            <InstallFlutterWidgetsAndObsserver />\n                        </>\n                    )}\n                </>\n            )}\n            <h3>Web Setup</h3>\n            <p className=\"prompt-text\">Add these values in index.html</p>\n            <FlutterWebSetupSnippet />\n        </>\n    )\n}\n\nexport function SDKInstallFlutterTrackScreenInstructions(): JSX.Element {\n    return (\n        <>\n            <p>\n                With the <Link to=\"https://posthog.com/docs/libraries/flutter#example\">PosthogObserver</Link> Observer,\n                PostHog will try to record all screen changes automatically.\n            </p>\n            <p>\n                If you want to manually send a new screen capture event, use the <code>screen</code> function.\n            </p>\n            <CodeSnippet language={Language.Dart}>{`import 'package:posthog_flutter/posthog_flutter.dart';\n\nawait Posthog().screen(\n    screenName: 'Dashboard',\n    properties: {\n      'background': 'blue',\n      'hero': 'superhog'\n    });\n`}</CodeSnippet>\n        </>\n    )\n}\n","import { useValues } from 'kea'\n\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nfunction GoInstallSnippet(): JSX.Element {\n    return <CodeSnippet language={Language.Bash}>go get \"github.com/posthog/posthog-go\"</CodeSnippet>\n}\n\nfunction GoSetupSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.Go}>\n            {`package main\nimport (\n    \"github.com/posthog/posthog-go\"\n)\nfunc main() {\n    client, _ := posthog.NewWithConfig(\"${currentTeam?.api_token}\", posthog.Config{Endpoint: \"${apiHostOrigin()}\"})\n    defer client.Close()\n}`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallGoInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install</h3>\n            <GoInstallSnippet />\n            <h3>Configure</h3>\n            <GoSetupSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\n\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nexport interface iOSSetupProps {\n    includeReplay?: boolean\n    includeSurveys?: boolean\n    includeExperimentalSpi?: boolean\n}\n\nfunction IOSInstallCocoaPodsSnippet(): JSX.Element {\n    return <CodeSnippet language={Language.Ruby}>{'pod \"PostHog\", \"~> 3.0\"'}</CodeSnippet>\n}\n\nfunction IOSInstallSPMSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.Swift}>\n            {`dependencies: [\n  .package(url: \"https://github.com/PostHog/posthog-ios.git\", from: \"3.0.0\")\n]`}\n        </CodeSnippet>\n    )\n}\n\nfunction IOSSetupSnippet(props: iOSSetupProps): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    const configOptions = [\n        props.includeReplay &&\n            `// check https://posthog.com/docs/session-replay/installation?tab=iOS\n        // for more config and to learn about how we capture sessions on mobile\n        // and what to expect\n        config.sessionReplay = true\n        // choose whether to mask images or text\n        config.sessionReplayConfig.maskAllImages = false\n        config.sessionReplayConfig.maskAllTextInputs = true\n        // screenshot is disabled by default\n        // The screenshot may contain sensitive information, use with caution\n        config.sessionReplayConfig.screenshotMode = true`,\n        props.includeSurveys && `config.surveys = true`,\n    ]\n        .filter(Boolean)\n        .join('\\n')\n\n    const configSection = configOptions ? configOptions : ''\n\n    return (\n        <CodeSnippet language={Language.Swift}>\n            {`import Foundation\n${props.includeExperimentalSpi ? '@_spi(Experimental) import PostHog' : 'import PostHog'}\nimport UIKit\n\nclass AppDelegate: NSObject, UIApplicationDelegate {\n    func application(_: UIApplication, didFinishLaunchingWithOptions _: [UIApplication.LaunchOptionsKey: Any]? = nil) -> Bool {\n        let POSTHOG_API_KEY = \"${currentTeam?.api_token}\"\n        let POSTHOG_HOST = \"${apiHostOrigin()}\"\n\n        let config = PostHogConfig(apiKey: POSTHOG_API_KEY, host: POSTHOG_HOST)\n        ${configSection}\n        PostHogSDK.shared.setup(config)\n\n        return true\n    }\n}`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallIOSInstructions(props: iOSSetupProps): JSX.Element {\n    return (\n        <>\n            <h3>Install via CocoaPods</h3>\n            <IOSInstallCocoaPodsSnippet />\n            <h3>Or Install via SPM</h3>\n            <IOSInstallSPMSnippet />\n            <h3>Configure</h3>\n            <IOSSetupSnippet {...props} />\n        </>\n    )\n}\n\nexport function SDKInstallIOSTrackScreenInstructions(): JSX.Element {\n    return (\n        <>\n            <p>\n                With <code>configuration.captureScreenViews</code> set as <code>true</code>, PostHog will try to record\n                all screen changes automatically.\n            </p>\n            <p>\n                If you want to manually send a new screen capture event, use the <code>screen</code> function.\n            </p>\n            <CodeSnippet\n                language={Language.Swift}\n            >{`PostHogSDK.shared.screen(\"Dashboard\", properties: [\"fromIcon\": \"bottom\"])`}</CodeSnippet>\n        </>\n    )\n}\n","import { useValues } from 'kea'\n\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nfunction LaravelConfigSnippet(): JSX.Element {\n    return <CodeSnippet language={Language.Bash}>composer require posthog/posthog-php</CodeSnippet>\n}\n\nfunction LaravelInstallSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.PHP}>\n            {`<?php\n\nnamespace App\\\\Providers;\n\nuse Illuminate\\\\Support\\\\ServiceProvider;\nuse PostHog\\\\PostHog;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    public function boot(): void\n    {\n        PostHog::init(\n            '${currentTeam?.api_token}',\n            [\n                'host' => '${apiHostOrigin()}'\n            ]\n        );\n    }\n}\n`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallLaravelInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Dependency Setup</h3>\n            <LaravelConfigSnippet />\n            <h3>Configure</h3>\n            <p>\n                Initialize PostHog in the <code>boot</code> method of <code>app/Providers/AppServiceProvider.php</code>\n            </p>\n            <LaravelInstallSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\n\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\ntype PostHogNodeOptions = {\n    enableExceptionAutocapture?: boolean\n}\n\nexport function NodeInstallSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.Bash}>\n            {`npm install posthog-node\n# OR\nyarn add posthog-node\n# OR\npnpm add posthog-node`}\n        </CodeSnippet>\n    )\n}\n\nexport function NodeSetupSnippet({ enableExceptionAutocapture = false }: PostHogNodeOptions): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    const options = [`host: '${apiHostOrigin()}'`]\n\n    if (enableExceptionAutocapture) {\n        options.push('enableExceptionAutocapture: true')\n    }\n\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`import { PostHog } from 'posthog-node'\n\nconst client = new PostHog(\n    '${currentTeam?.api_token}',\n    {\n        ${options.join(',\\n        ')}\n    }\n)`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallNodeInstructions(props: PostHogNodeOptions): JSX.Element {\n    return (\n        <>\n            <h3>Install</h3>\n            <NodeInstallSnippet />\n            <h3>Configure</h3>\n            <NodeSetupSnippet {...props} />\n        </>\n    )\n}\n","import { useValues } from 'kea'\n\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { SDK_DEFAULTS_DATE } from './constants'\nimport { JSInstallSnippet } from './js-web'\n\nfunction NuxtEnvVarsSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`export default defineNuxtConfig({\n                runtimeConfig: {\n                  public: {\n                    posthogPublicKey: '${currentTeam?.api_token}',\n                    posthogHost: '${apiHostOrigin()}',\n                    posthogDefaults: '${SDK_DEFAULTS_DATE}'\n                  }\n                }\n              })`}\n        </CodeSnippet>\n    )\n}\n\nfunction NuxtAppClientCodeSnippet(): JSX.Element {\n    const { featureFlags } = useValues(featureFlagLogic)\n    const isPersonProfilesDisabled = featureFlags[FEATURE_FLAGS.PERSONLESS_EVENTS_NOT_SUPPORTED]\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`import { defineNuxtPlugin } from '#app'\nimport posthog from 'posthog-js'\nexport default defineNuxtPlugin(nuxtApp => {\n  const runtimeConfig = useRuntimeConfig();\n  const posthogClient = posthog.init(runtimeConfig.public.posthogPublicKey, {\n    api_host: runtimeConfig.public.posthogHost,\n    defaults: runtimeConfig.public.posthogDefaults,\n    ${\n        isPersonProfilesDisabled\n            ? ``\n            : `person_profiles: 'identified_only', // or 'always' to create profiles for anonymous users as well`\n    }\n    loaded: (posthog) => {\n      if (import.meta.env.MODE === 'development') posthog.debug();\n    }\n  })\n\n  return {\n    provide: {\n      posthog: () => posthogClient\n    }\n  }\n})`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallNuxtJSInstructions(): JSX.Element {\n    return (\n        <>\n            <p>\n                The below guide is for Nuxt v3.0 and above. For Nuxt v2.16 and below, see our{' '}\n                <Link to=\"https://posthog.com/docs/libraries/nuxt-js#nuxt-v216-and-below\">Nuxt docs</Link>\n            </p>\n            <h3>Install posthog-js using your package manager</h3>\n            <JSInstallSnippet />\n            <h3>Add environment variables</h3>\n            <p>\n                Add your PostHog API key and host to your <code>nuxt.config.js</code> file.\n            </p>\n            <NuxtEnvVarsSnippet />\n\n            <h3>Create a plugin</h3>\n            <p>\n                Create a new plugin by creating a new file <code>posthog.client.js</code> in your{' '}\n                <Link to=\"https://nuxt.com/docs/guide/directory-structure/plugins\" target=\"_blank\">\n                    plugins directory\n                </Link>\n                :\n            </p>\n            <NuxtAppClientCodeSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\n\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nfunction PHPInstallSnippet(): JSX.Element {\n    return <CodeSnippet language={Language.Bash}>composer require posthog/posthog-php</CodeSnippet>\n}\n\nfunction PHPSetupSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.PHP}>\n            {`PostHog\\\\PostHog::init('${currentTeam?.api_token}',\n    array('host' => '${apiHostOrigin()}')\n);`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallPHPInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install</h3>\n            <PHPInstallSnippet />\n            <h3>Configure</h3>\n            <PHPSetupSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\n\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\ntype PostHogPythonOptions = {\n    enableExceptionAutocapture?: boolean\n    djangoIntegration?: boolean\n}\n\nfunction PythonInstallSnippet(): JSX.Element {\n    return <CodeSnippet language={Language.Bash}>pip install posthog</CodeSnippet>\n}\n\nexport function PythonSetupSnippet({\n    enableExceptionAutocapture = false,\n    djangoIntegration = false,\n}: PostHogPythonOptions): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    const options = [`host='${apiHostOrigin()}'`]\n\n    if (enableExceptionAutocapture) {\n        options.push('enable_exception_autocapture=True')\n    }\n    if (djangoIntegration) {\n        options.push('exception_autocapture_integrations = [Integrations.Django]')\n    }\n\n    return (\n        <CodeSnippet language={Language.Python}>\n            {`from posthog import Posthog\n${djangoIntegration ? 'from posthog.integrations.django import Integrations\\n' : ''}\nposthog = Posthog(\n  project_api_key='${currentTeam?.api_token}',\n  ${options.join(',\\n  ')}\n)`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallPythonInstructions(props: PostHogPythonOptions): JSX.Element {\n    return (\n        <>\n            <h3>Install</h3>\n            <PythonInstallSnippet />\n            <h3>Configure</h3>\n            <PythonSetupSnippet {...props} />\n        </>\n    )\n}\n","import { useValues } from 'kea'\n\nimport { LemonDivider, Link } from '@posthog/lemon-ui'\n\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport SetupWizardBanner from './components/SetupWizardBanner'\n\nexport interface RNSetupProps {\n    hideWizard?: boolean\n    includeReplay?: boolean\n    includeSurveys?: boolean\n}\n\nfunction RNInstallSnippet({ includeReplay, includeSurveys }: RNSetupProps): JSX.Element {\n    return (\n        <CodeSnippet language={Language.Bash}>\n            {`# Expo apps\nnpx expo install posthog-react-native expo-file-system expo-application expo-device expo-localization${\n                includeReplay ? ` posthog-react-native-session-replay` : ''\n            }${includeSurveys ? ` react-native-safe-area-context react-native-svg` : ''}\n\n# Standard React Native apps\nyarn add posthog-react-native @react-native-async-storage/async-storage react-native-device-info react-native-localize${\n                includeReplay ? ` posthog-react-native-session-replay` : ''\n            }${includeSurveys ? ` react-native-safe-area-context react-native-svg` : ''}\n# or\nnpm i -s posthog-react-native @react-native-async-storage/async-storage react-native-device-info react-native-localize${\n                includeReplay ? ` posthog-react-native-session-replay` : ''\n            }${includeSurveys ? ` react-native-safe-area-context react-native-svg` : ''}\n\n# for iOS\ncd ios\npod install`}\n        </CodeSnippet>\n    )\n}\n\nfunction RNSetupSnippet({ includeReplay }: RNSetupProps): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n    const url = apiHostOrigin()\n\n    return (\n        <>\n            <p>\n                PostHog is most easily used via the <code>PostHogProvider</code> component but if you need to\n                instantiate it directly,{' '}\n                <Link to=\"https://posthog.com/docs/libraries/react-native#without-the-posthogprovider\">\n                    check out the docs\n                </Link>{' '}\n                which explain how to do this correctly.\n            </p>\n            <CodeSnippet language={Language.JSX}>\n                {`// App.(js|ts)\nimport { PostHogProvider } from 'posthog-react-native'\n...\n\nexport function MyApp() {\n    return (\n        <PostHogProvider apiKey=\"${currentTeam?.api_token}\" options={{\n            host: \"${url}\",\n            ${\n                includeReplay\n                    ? `\n            // check https://posthog.com/docs/session-replay/installation?tab=React+Native\n            // for more config and to learn about how we capture sessions on mobile\n            // and what to expect\n            enableSessionReplay: true,\n            sessionReplayConfig: {\n                // Whether text inputs are masked. Default is true.\n                // Password inputs are always masked regardless\n                maskAllTextInputs: true,\n                // Whether images are masked. Default is true.\n                maskAllImages: true,\n                // Capture logs automatically. Default is true.\n                // Android only (Native Logcat only)\n                captureLog: true,\n                // Whether network requests are captured in recordings. Default is true\n                // Only metric-like data like speed, size, and response code are captured.\n                // No data is captured from the request or response body.\n                // iOS only\n                captureNetworkTelemetry: true,\n                // Deboucer delay used to reduce the number of snapshots captured and reduce performance impact. Default is 1000ms\n                androidDebouncerDelayMs: 1000,\n                // Deboucer delay used to reduce the number of snapshots captured and reduce performance impact. Default is 1000ms\n                iOSdebouncerDelayMs: 1000,\n            },`\n                    : ''\n            }\n        }}>\n            <RestOfApp />\n        </PostHogProvider>\n    )\n}`}\n            </CodeSnippet>\n        </>\n    )\n}\n\nfunction RNSetupSurveysProvider(): JSX.Element {\n    return (\n        <>\n            <p>\n                Add PostHogSurveyProvider to your app anywhere inside PostHogProvider. This component fetches surveys.\n                It also acts as the root for where popover surveys are rendered.\n            </p>\n            <CodeSnippet language={Language.JSX}>\n                {`<PostHogProvider>\n    <PostHogSurveyProvider>{children}</PostHogSurveyProvider>\n</PostHogProvider>`}\n            </CodeSnippet>\n            <p>\n                If you're not using the PostHogProvider, add PostHogSurveyProvider to your app anywhere inside your app\n                root component.\n            </p>\n            <CodeSnippet language={Language.JSX}>\n                {`<YourAppRoot>\n  <PostHogSurveyProvider>{children}</PostHogSurveyProvider>\n</YourAppRoot>`}\n            </CodeSnippet>\n            <p>You can also pass your client instance to the PostHogSurveyProvider.</p>\n            <CodeSnippet language={Language.JSX}>{`<PostHogSurveyProvider client={posthog}>`}</CodeSnippet>\n        </>\n    )\n}\n\nexport function SDKInstallRNInstructions(props: RNSetupProps): JSX.Element {\n    const { isCloudOrDev } = useValues(preflightLogic)\n    const showSetupWizard = !props.hideWizard && isCloudOrDev\n    return (\n        <>\n            {showSetupWizard && (\n                <>\n                    <h2>Automated Installation</h2>\n                    <SetupWizardBanner integrationName=\"React Native\" />\n                    <LemonDivider label=\"OR\" />\n                    <h2>Manual Installation</h2>\n                </>\n            )}\n            <h3>Install</h3>\n            <RNInstallSnippet includeReplay={props.includeReplay} includeSurveys={props.includeSurveys} />\n            <h3>Configure</h3>\n            <RNSetupSnippet includeReplay={props.includeReplay} />\n            {props.includeSurveys && (\n                <>\n                    <h3>Setup SurveysProvider</h3>\n                    <RNSetupSurveysProvider />\n                </>\n            )}\n        </>\n    )\n}\n","import { useValues } from 'kea'\n\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { SDK_DEFAULTS_DATE } from './constants'\nimport { JSInstallSnippet } from './js-web'\n\nfunction RemixExternalImportSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`// vite.config.ts\n// ... imports and rest of config\n\nexport default defineConfig({\n  plugins: [\n    remix({\n      future: {\n        v3_fetcherPersist: true,\n        v3_relativeSplatPath: true,\n        v3_throwAbortReason: true,\n        v3_singleFetch: true,\n        v3_lazyRouteDiscovery: true,\n      },\n    }),\n    tsconfigPaths(),\n  ],\n  ssr: {\n    noExternal: [\"posthog-js\", \"posthog-js/react\"],\n  },\n});`}\n        </CodeSnippet>\n    )\n}\n\nfunction RemixPHProviderSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n    const { featureFlags } = useValues(featureFlagLogic)\n    const isPersonProfilesDisabled = featureFlags[FEATURE_FLAGS.PERSONLESS_EVENTS_NOT_SUPPORTED]\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`import { useEffect, useState } from \"react\";\nimport posthog from \"posthog-js\";\nimport { PostHogProvider } from \"posthog-js/react\";\n\nexport function PHProvider({ children }: { children: React.ReactNode }) {\n  const [hydrated, setHydrated] = useState(false);\n\n  useEffect(() => {\n    posthog.init(\"${currentTeam?.api_token}\", {\n      api_host: \"${apiHostOrigin()}\",\n      defaults: \"${SDK_DEFAULTS_DATE}\",\n      ${\n          isPersonProfilesDisabled\n              ? ``\n              : `person_profiles: 'identified_only', // or 'always' to create profiles for anonymous users as well`\n      }\n    });\n\n    setHydrated(true);\n  }, []);\n\n  if (!hydrated) return <>{children}</>;\n  return <PostHogProvider client={posthog}>{children}</PostHogProvider>;\n}`}\n        </CodeSnippet>\n    )\n}\n\nfunction RemixAppClientCodeSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`// app/root.tsx\n// ... imports\nimport { PHProvider } from \"./provider\";\n\n// ... links, meta, etc.\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <PHProvider>\n          {children}\n          <ScrollRestoration />\n          <Scripts />\n        </PHProvider>\n      </body>\n    </html>\n  );\n}\n\nexport default function App() {\n  return <Outlet />;\n}`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallRemixJSInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install posthog-js using your package manager</h3>\n            <JSInstallSnippet />\n            <h3>Add PostHog to your app</h3>\n            <p>\n                Start by setting <code>posthog-js</code> and <code>posthog-js/react</code> as external packages in your{' '}\n                <code>vite.config.ts</code> file.\n            </p>\n            <RemixExternalImportSnippet />\n            <p>\n                Next, create a <code>provider.tsx</code> file in the app folder. In it, set up the PostHog provider to\n                initialize after hydration.\n            </p>\n            <RemixPHProviderSnippet />\n            <p>\n                Finally, import the <code>PHProvider</code> component in your <code>app/root.tsx</code> file and use it\n                to wrap your app.\n            </p>\n            <RemixAppClientCodeSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\n\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nfunction RubyInstallSnippet(): JSX.Element {\n    return <CodeSnippet language={Language.Bash}>gem \"posthog-ruby\"</CodeSnippet>\n}\n\nfunction RubySetupSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.Ruby}>\n            {`posthog = PostHog::Client.new({\n    api_key: \"${currentTeam?.api_token}\",\n    host: \"${apiHostOrigin()}\",\n    on_error: Proc.new { |status, msg| print msg }\n})`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallRubyInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install</h3>\n            <RubyInstallSnippet />\n            <h3>Configure</h3>\n            <RubySetupSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\n\nimport { LemonDivider, Link } from '@posthog/lemon-ui'\n\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport SetupWizardBanner from './components/SetupWizardBanner'\nimport { SDK_DEFAULTS_DATE } from './constants'\nimport { JSInstallSnippet } from './js-web'\n\nfunction SvelteAppClientCodeSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n    const { featureFlags } = useValues(featureFlagLogic)\n    const isPersonProfilesDisabled = featureFlags[FEATURE_FLAGS.PERSONLESS_EVENTS_NOT_SUPPORTED]\n\n    const options = [`api_host: '${apiHostOrigin()}'`, `defaults: '${SDK_DEFAULTS_DATE}'`]\n\n    if (!isPersonProfilesDisabled) {\n        options.push(\n            \"person_profiles: 'identified_only', // or 'always' to create profiles for anonymous users as well\"\n        )\n    }\n\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`import posthog from 'posthog-js'\nimport { browser } from '$app/environment';\nimport { onMount } from 'svelte';\n\nexport const load = async () => {\n  if (browser) {\n    posthog.init(\n      '${currentTeam?.api_token}',\n      {\n        ${options.join(',\\n        ')}\n      }\n    )\n  }\n\n  return\n};`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallSvelteJSInstructions({ hideWizard }: { hideWizard?: boolean }): JSX.Element {\n    const { isCloudOrDev } = useValues(preflightLogic)\n    const showSetupWizard = !hideWizard && isCloudOrDev\n    return (\n        <>\n            {showSetupWizard && (\n                <>\n                    <h2>Automated Installation</h2>\n                    <SetupWizardBanner integrationName=\"Svelte\" />\n                    <LemonDivider label=\"OR\" />\n                    <h2>Manual Installation</h2>\n                </>\n            )}\n            <h3>Install posthog-js using your package manager</h3>\n            <JSInstallSnippet />\n\n            <h3>Initialize</h3>\n            <p>\n                If you haven't created a root{' '}\n                <Link to=\"https://kit.svelte.dev/docs/routing#layout\" target=\"_blank\">\n                    layout\n                </Link>{' '}\n                already, create a new file called <code>+layout.js</code> in your <code>src/routes</code> folder. In\n                this file, check the environment is the browser, and initialize PostHog if so:\n            </p>\n            <SvelteAppClientCodeSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\n\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { SDK_DEFAULTS_DATE } from './constants'\nimport { JSInstallSnippet } from './js-web'\n\nfunction VueCreateComposableFileSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n    const { featureFlags } = useValues(featureFlagLogic)\n    const isPersonProfilesDisabled = featureFlags[FEATURE_FLAGS.PERSONLESS_EVENTS_NOT_SUPPORTED]\n\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`import posthog from 'posthog-js'\n\nexport function usePostHog() {\n  posthog.init('${currentTeam?.api_token}', {\n    api_host: '${apiHostOrigin()}',\n    defaults: '${SDK_DEFAULTS_DATE}',\n    ${\n        isPersonProfilesDisabled\n            ? ``\n            : `person_profiles: 'identified_only', // or 'always' to create profiles for anonymous users as well`\n    }\n  })\n\n  return { posthog }\n}`}\n        </CodeSnippet>\n    )\n}\n\nfunction VueComposableCodeSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`import { createRouter, createWebHistory } from 'vue-router'\nimport HomeView from '../views/HomeView.vue'\nimport { usePostHog } from '@/composables/usePostHog'\n\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: '/',\n      name: 'home',\n      component: HomeView,\n    },\n    {\n      path: '/about',\n      name: 'about',\n      component: () => import('../views/AboutView.vue'),\n    },\n  ],\n})\n\nconst { posthog } = usePostHog()\n\nexport default router`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallVueInstructions(): JSX.Element {\n    return (\n        <>\n            <p>\n                The below guide is for integrating using plugins in Vue versions 3 and above. For integrating PostHog\n                using Provide/inject, Vue.prototype, or versions 2.7 and below, see our{' '}\n                <Link to=\"https://posthog.com/docs/libraries/vue-js\">Vue docs</Link>\n            </p>\n            <h3>Install posthog-js using your package manager</h3>\n            <JSInstallSnippet />\n            <h3>Add Posthog to your app</h3>\n            <p>\n                Create a new file <code>src/composables/usePostHog.js</code>:\n            </p>\n            <VueCreateComposableFileSnippet />\n            <br />\n            Next, in <code>router/index.js</code>, import the <code>usePostHog</code> composable and call it:\n            <VueComposableCodeSnippet />\n        </>\n    )\n}\n","import { useActions, useValues } from 'kea'\n\nimport { LemonDivider, LemonTabs } from '@posthog/lemon-ui'\n\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport SetupWizardBanner from './components/SetupWizardBanner'\nimport { SDK_DEFAULTS_DATE } from './constants'\nimport { JSInstallSnippet } from './js-web'\nimport { type NextJSRouter, nextJsInstructionsLogic } from './nextJsInstructionsLogic'\n\nfunction NextEnvVarsSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.Bash}>\n            {[`NEXT_PUBLIC_POSTHOG_KEY=${currentTeam?.api_token}`, `NEXT_PUBLIC_POSTHOG_HOST=${apiHostOrigin()}`].join(\n                '\\n'\n            )}\n        </CodeSnippet>\n    )\n}\n\nfunction NextPagesRouterPageViewSnippet(): JSX.Element {\n    const { featureFlags } = useValues(featureFlagLogic)\n    const isPersonProfilesDisabled = featureFlags[FEATURE_FLAGS.PERSONLESS_EVENTS_NOT_SUPPORTED]\n    return (\n        <CodeSnippet language={Language.TypeScript}>\n            {`// pages/_app.tsx\nimport { useEffect } from 'react'\nimport { Router } from 'next/router'\nimport posthog from 'posthog-js'\nimport { PostHogProvider } from 'posthog-js/react'\nimport type { AppProps } from 'next/app'\n\nexport default function App({ Component, pageProps }: AppProps) {\n\n  useEffect(() => {\n    posthog.init(process.env.NEXT_PUBLIC_POSTHOG_KEY as string, {\n      api_host: process.env.NEXT_PUBLIC_POSTHOG_HOST || '${apiHostOrigin()}',\n      ${\n          isPersonProfilesDisabled\n              ? ``\n              : `person_profiles: 'identified_only', // or 'always' to create profiles for anonymous users as well`\n      }\n      defaults: '${SDK_DEFAULTS_DATE}',\n      // Enable debug mode in development\n      loaded: (posthog) => {\n        if (process.env.NODE_ENV === 'development') posthog.debug()\n      }\n    })\n  }, [])\n\n  return (\n    <PostHogProvider client={posthog}>\n      <Component {...pageProps} />\n    </PostHogProvider>\n  )\n}`}\n        </CodeSnippet>\n    )\n}\n\nfunction NextAppRouterLayoutSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.TypeScript}>\n            {`// app/layout.tsx\n\nimport './globals.css'\nimport { PostHogProvider } from './providers'\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <PostHogProvider>\n          {children}\n        </PostHogProvider>\n      </body>\n    </html>\n  )\n}`}\n        </CodeSnippet>\n    )\n}\n\nfunction NextAppRouterPageViewProviderSnippet(): JSX.Element {\n    const { featureFlags } = useValues(featureFlagLogic)\n    const isPersonProfilesDisabled = featureFlags[FEATURE_FLAGS.PERSONLESS_EVENTS_NOT_SUPPORTED]\n    return (\n        <CodeSnippet language={Language.TypeScript}>\n            {`// app/providers.tsx\n'use client'\n\nimport { usePathname, useSearchParams } from \"next/navigation\"\nimport { useEffect } from \"react\"\nimport { usePostHog } from 'posthog-js/react'\n\nimport posthog from 'posthog-js'\nimport { PostHogProvider as PHProvider } from 'posthog-js/react'\n\nexport function PostHogProvider({ children }: { children: React.ReactNode }) {\n  useEffect(() => {\n    posthog.init(process.env.NEXT_PUBLIC_POSTHOG_KEY as string, {\n      api_host: process.env.NEXT_PUBLIC_POSTHOG_HOST || '${apiHostOrigin()}',\n      ${\n          isPersonProfilesDisabled\n              ? ``\n              : `person_profiles: 'identified_only', // or 'always' to create profiles for anonymous users as well`\n      }\n      defaults: '${SDK_DEFAULTS_DATE}'\n    })\n  }, [])\n\n  return (\n    <PHProvider client={posthog}>\n      {children}\n    </PHProvider>\n  )\n}\n`}\n        </CodeSnippet>\n    )\n}\n\nfunction NextInstrumentationClientSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.TypeScript}>\n            {`// instrumentation-client.js\nimport posthog from 'posthog-js'\n\nposthog.init(process.env.NEXT_PUBLIC_POSTHOG_KEY, {\n    api_host: process.env.NEXT_PUBLIC_POSTHOG_HOST,\n    defaults: '${SDK_DEFAULTS_DATE}'\n});\n            `}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallNextJSInstructions({ hideWizard }: { hideWizard?: boolean }): JSX.Element {\n    const { nextJsRouter } = useValues(nextJsInstructionsLogic)\n    const { setNextJsRouter } = useActions(nextJsInstructionsLogic)\n    const { isCloudOrDev } = useValues(preflightLogic)\n    const showSetupWizard = !hideWizard && isCloudOrDev\n\n    return (\n        <>\n            {showSetupWizard && (\n                <>\n                    <h2>Automated Installation</h2>\n                    <SetupWizardBanner integrationName=\"Next.js\" />\n                    <LemonDivider label=\"OR\" />\n                    <h2>Manual Installation</h2>\n                </>\n            )}\n            <h3>Install posthog-js using your package manager</h3>\n            <JSInstallSnippet />\n            <h3>Add environment variables</h3>\n            <p>\n                Add your environment variables to your .env.local file and to your hosting provider (e.g. Vercel,\n                Netlify, AWS). You can find your project API key in your project settings.\n            </p>\n            <p>\n                These values need to start with <code>NEXT_PUBLIC_</code> to be accessible on the client-side.\n            </p>\n            <NextEnvVarsSnippet />\n\n            <h3>Initialize</h3>\n\n            <LemonTabs\n                activeKey={nextJsRouter}\n                onChange={(key) => setNextJsRouter(key as NextJSRouter)}\n                tabs={[\n                    {\n                        key: 'instrumentation-client',\n                        label: 'Next.js 15.3+',\n                    },\n                    {\n                        key: 'app',\n                        label: 'App router',\n                    },\n                    {\n                        key: 'pages',\n                        label: 'Pages router',\n                    },\n                ]}\n            />\n            {nextJsRouter === 'instrumentation-client' && (\n                <>\n                    <p>\n                        If you're using Next.js 15.3+ you can use <code>instrumentation-client.ts|js</code> for a\n                        light-weight, fast integration\n                    </p>\n                    <NextInstrumentationClientSnippet />\n                </>\n            )}\n            {nextJsRouter === 'app' && (\n                <>\n                    <p>\n                        If your Next.js app uses the{' '}\n                        <Link to=\"https://nextjs.org/docs/app\" target=\"_blank\">\n                            app router\n                        </Link>\n                        , you can integrate PostHog by creating a <code>providers</code> file in your <code>app</code>{' '}\n                        folder. This is because the <code>posthog-js</code> library needs to be initialized on the\n                        client-side using the Next.js{' '}\n                        <Link\n                            to=\"https://nextjs.org/docs/getting-started/react-essentials#client-components\"\n                            target=\"_blank\"\n                        >\n                            <code>'use client'</code> directive\n                        </Link>\n                        .\n                    </p>\n                    <NextAppRouterPageViewProviderSnippet />\n                    <p>\n                        Afterwards, import the <code>PostHogProvider</code> component in your{' '}\n                        <code>app/layout.tsx</code> file and wrap your app with it.\n                    </p>\n                    <NextAppRouterLayoutSnippet />\n                </>\n            )}\n            {nextJsRouter === 'pages' && (\n                <>\n                    <p>\n                        If your Next.js app uses the{' '}\n                        <Link to=\"https://nextjs.org/docs/pages\" target=\"_blank\">\n                            pages router\n                        </Link>\n                        , you can integrate PostHog at the root of your app.\n                    </p>\n                    <NextPagesRouterPageViewSnippet />\n                </>\n            )}\n        </>\n    )\n}\n","import { useValues } from 'kea'\n\nimport { LemonDivider } from '@posthog/lemon-ui'\n\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport SetupWizardBanner from './components/SetupWizardBanner'\nimport { SDK_DEFAULTS_DATE } from './constants'\nimport { JSInstallSnippet } from './js-web'\n\nfunction ReactEnvVarsSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.Bash}>\n            {[`VITE_PUBLIC_POSTHOG_KEY=${currentTeam?.api_token}`, `VITE_PUBLIC_POSTHOG_HOST=${apiHostOrigin()}`].join(\n                '\\n'\n            )}\n        </CodeSnippet>\n    )\n}\n\nfunction ReactSetupSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`import { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport './index.css'\nimport App from './App.jsx'\nimport { PostHogProvider } from 'posthog-js/react'\n\nconst options = {\n  api_host: import.meta.env.VITE_PUBLIC_POSTHOG_HOST,\n  defaults: '${SDK_DEFAULTS_DATE}',\n}\n\ncreateRoot(document.getElementById('root')).render(\n  <StrictMode>\n    <PostHogProvider apiKey={import.meta.env.VITE_PUBLIC_POSTHOG_KEY} options={options}>\n      <App />\n    </PostHogProvider>\n  </StrictMode>,\n);`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallReactInstructions({ hideWizard }: { hideWizard?: boolean }): JSX.Element {\n    const { isCloudOrDev } = useValues(preflightLogic)\n    const showSetupWizard = !hideWizard && isCloudOrDev\n    return (\n        <>\n            {showSetupWizard && (\n                <>\n                    <h2>Automated Installation</h2>\n                    <SetupWizardBanner integrationName=\"React\" />\n                    <LemonDivider label=\"OR\" />\n                    <h2>Manual Installation</h2>\n                </>\n            )}\n            <h3>Install the package</h3>\n            <JSInstallSnippet />\n            <h3>Add environment variables</h3>\n            <ReactEnvVarsSnippet />\n            <h3>Initialize</h3>\n            <p>\n                Integrate PostHog at the root of your app (such as <code>main.tsx</code> if you're using Vite).\n            </p>\n            <ReactSetupSnippet />\n        </>\n    )\n}\n","import { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { WebAnalyticsMobileFinalSteps } from 'scenes/onboarding/sdks/web-analytics/FinalSteps'\n\nimport { SDKInstallRNInstructions } from '../sdk-install-instructions'\n\nexport function WebAnalyticsRNInstructions(): JSX.Element {\n    return (\n        <>\n            <SDKInstallRNInstructions />\n            <h3 className=\"mt-4\">Optional: Send a manual event</h3>\n            <p>Our package will autocapture events for you, but you can manually define events, too!</p>\n            <CodeSnippet language={Language.JSX}>{`// With hooks\nimport { usePostHog } from 'posthog-react-native'\n\nconst MyComponent = () => {\n    const posthog = usePostHog()\n\n    useEffect(() => {\n        posthog.capture(\"MyComponent loaded\", { foo: \"bar\" })\n    }, [])\n}\n        `}</CodeSnippet>\n            <WebAnalyticsMobileFinalSteps />\n        </>\n    )\n}\n","import { BindLogic, useActions, useValues } from 'kea'\n\nimport { LemonSkeleton } from '@posthog/lemon-ui'\n\nimport { NewSourcesWizard } from 'scenes/data-warehouse/new/NewSourceWizard'\nimport { availableSourcesDataLogic } from 'scenes/data-warehouse/new/availableSourcesDataLogic'\nimport { sourceWizardLogic } from 'scenes/data-warehouse/new/sourceWizardLogic'\n\nimport { OnboardingStepKey } from '~/types'\n\nimport { OnboardingStep } from '../OnboardingStep'\nimport { onboardingLogic } from '../onboardingLogic'\n\nexport function OnboardingDataWarehouseSourcesStep({\n    stepKey = OnboardingStepKey.INSTALL,\n}: {\n    stepKey?: OnboardingStepKey\n}): JSX.Element {\n    const { goToNextStep } = useActions(onboardingLogic)\n    const { currentStep } = useValues(sourceWizardLogic)\n    const { availableSources, availableSourcesLoading } = useValues(availableSourcesDataLogic)\n\n    return (\n        <OnboardingStep\n            title=\"Link data\"\n            stepKey={stepKey}\n            continueOverride={<></>}\n            showSkip={currentStep == 1}\n            subtitle={\n                currentStep == 1\n                    ? `Link all your important data from your CRM, payment processor, \n                or database and query across them seamlessly.`\n                    : undefined\n            }\n        >\n            {availableSourcesLoading || availableSources === null ? (\n                <LemonSkeleton />\n            ) : (\n                <BindLogic logic={sourceWizardLogic} props={{ availableSources }}>\n                    <NewSourcesWizard disableConnectedSources onComplete={() => goToNextStep()} />\n                </BindLogic>\n            )}\n        </OnboardingStep>\n    )\n}\n","import { actions, afterMount, connect, events, kea, listeners, path, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport { urlToAction } from 'kea-router'\n\nimport api from 'lib/api'\nimport { LemonSelectOptions } from 'lib/lemon-ui/LemonSelect/LemonSelect'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\nimport { liveEventsTableLogic } from 'scenes/activity/live/liveEventsTableLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { hogql } from '~/queries/utils'\nimport { ProductKey, SDK, SDKInstructionsMap, SDKTag } from '~/types'\n\nimport { onboardingLogic } from '../onboardingLogic'\nimport { allSDKs } from './allSDKs'\nimport type { sdksLogicType } from './sdksLogicType'\n\n/*\nTo add SDK instructions for your product:\n    1. If needed, add a new ProductKey enum value in ~/types.ts\n    2. Create a folder in this directory for your product\n    3. Create and export the instruction components\n    4. Create a file like ProductAnalyticsSDKInstructions.tsx and export the instructions object with the SDKKey:Component mapping\n    6. Add the SDK component to your product onboarding component\n*/\n\nconst getSourceOptions = (availableSDKInstructionsMap: SDKInstructionsMap): LemonSelectOptions<string> => {\n    const filteredSDKsTags = allSDKs\n        .filter((sdk) => Object.keys(availableSDKInstructionsMap).includes(sdk.key))\n        .flatMap((sdk) => sdk.tags)\n    const uniqueTags = filteredSDKsTags.filter((item, index) => filteredSDKsTags.indexOf(item) === index)\n    const selectOptions = uniqueTags.map((tag) => ({\n        label: tag,\n        value: tag,\n    }))\n    return selectOptions\n}\n\n/*\nProducts that will often be installed in multiple places, eg. web and mobile\n*/\nexport const multiInstallProducts = [ProductKey.PRODUCT_ANALYTICS, ProductKey.FEATURE_FLAGS]\n\nexport const sdksLogic = kea<sdksLogicType>([\n    path(['scenes', 'onboarding', 'sdks', 'sdksLogic']),\n    connect(() => ({\n        values: [\n            onboardingLogic,\n            ['productKey'],\n            liveEventsTableLogic({ tabId: 'onboarding' }),\n            ['eventHosts'],\n            featureFlagLogic,\n            ['featureFlags'],\n            userLogic,\n            ['user', 'isUserNonTechnical'],\n        ],\n        actions: [eventUsageLogic, ['reportSDKSelected']],\n    })),\n    actions({\n        setSourceFilter: (sourceFilter: string | null) => ({ sourceFilter }),\n        filterSDKs: true,\n        setSDKs: (sdks: SDK[]) => ({ sdks }),\n        setSelectedSDK: (sdk: SDK | null) => ({ sdk }),\n        setSearchTerm: (searchTerm: string) => ({ searchTerm }),\n        setSelectedTag: (selectedTag: SDKTag | null) => ({ selectedTag }),\n        setSourceOptions: (sourceOptions: LemonSelectOptions<string>) => ({ sourceOptions }),\n        resetSDKs: true,\n        setAvailableSDKInstructionsMap: (sdkInstructionMap: SDKInstructionsMap) => ({ sdkInstructionMap }),\n        setShowSideBySide: (showSideBySide: boolean) => ({ showSideBySide }),\n        setPanel: (panel: 'instructions' | 'options') => ({ panel }),\n        setHasSnippetEvents: (hasSnippetEvents: boolean) => ({ hasSnippetEvents }),\n        setSnippetHosts: (snippetHosts: string[]) => ({ snippetHosts }),\n        selectSDK: (sdk: SDK) => ({ sdk }),\n    }),\n    reducers({\n        sourceFilter: [\n            null as string | null,\n            {\n                setSourceFilter: (_, { sourceFilter }) => sourceFilter,\n            },\n        ],\n        sdks: [\n            [] as SDK[] | null,\n            {\n                setSDKs: (_, { sdks }) => sdks,\n            },\n        ],\n        selectedSDK: [\n            null as SDK | null,\n            {\n                setSelectedSDK: (_, { sdk }) => sdk,\n            },\n        ],\n        sourceOptions: [\n            [] as LemonSelectOptions<string>,\n            {\n                setSourceOptions: (_, { sourceOptions }) => sourceOptions,\n            },\n        ],\n        availableSDKInstructionsMap: [\n            {} as SDKInstructionsMap,\n            {\n                setAvailableSDKInstructionsMap: (_, { sdkInstructionMap }) => sdkInstructionMap,\n            },\n        ],\n        showSideBySide: [\n            null as boolean | null,\n            {\n                setShowSideBySide: (_, { showSideBySide }) => showSideBySide,\n            },\n        ],\n        panel: [\n            'options' as 'instructions' | 'options',\n            {\n                setPanel: (_, { panel }) => panel,\n            },\n        ],\n        hasSnippetEvents: {\n            setHasSnippetEvents: (_, { hasSnippetEvents }) => hasSnippetEvents,\n        },\n        snippetHosts: [\n            [] as string[],\n            {\n                setSnippetHosts: (_, { snippetHosts }) => snippetHosts,\n            },\n        ],\n        searchTerm: [\n            '' as string,\n            {\n                setSearchTerm: (_, { searchTerm }) => searchTerm,\n            },\n        ],\n        selectedTag: [\n            null as SDKTag | null,\n            {\n                setSelectedTag: (_, { selectedTag }) => selectedTag,\n            },\n        ],\n    }),\n    selectors({\n        showSourceOptionsSelect: [\n            (selectors) => [selectors.sourceOptions, selectors.availableSDKInstructionsMap],\n            (sourceOptions: LemonSelectOptions<string>, availableSDKInstructionsMap: SDKInstructionsMap): boolean => {\n                // more than two source options since one will almost always be \"recommended\"\n                // more than 5 sdks since with fewer you don't really need to filter\n                return Object.keys(availableSDKInstructionsMap).length > 5 && sourceOptions.length > 2\n            },\n        ],\n        combinedSnippetAndLiveEventsHosts: [\n            (selectors) => [selectors.snippetHosts, selectors.eventHosts],\n            // if the connected kea hasn't mounted for some reason, eventHosts can be undefined\n            (snippetHosts: string[], eventHosts?: string[]): string[] => {\n                const combinedSnippetAndLiveEventsHosts = snippetHosts\n                for (const host of eventHosts ?? []) {\n                    const hostProtocol = new URL(host).protocol\n                    const currentProtocol = window.location.protocol\n                    if (hostProtocol === currentProtocol && !combinedSnippetAndLiveEventsHosts.includes(host)) {\n                        combinedSnippetAndLiveEventsHosts.push(host)\n                    }\n                }\n                return combinedSnippetAndLiveEventsHosts\n            },\n        ],\n        tags: [\n            (s) => [s.sdks],\n            (sdks: SDK[]): string[] => {\n                const tagsWithSDKs = Object.values(SDKTag).filter((tag: SDKTag) =>\n                    sdks.some((sdk) => sdk.tags.includes(tag))\n                )\n                return ['All', ...tagsWithSDKs]\n            },\n        ],\n    }),\n    loaders(({ actions }) => ({\n        hasSnippetEvents: [\n            null as boolean | null,\n            {\n                loadSnippetEvents: async () => {\n                    const query = hogql`\n                        SELECT\n                            max(timestamp) AS latest_timestamp,\n                            concat(\n                                concat({protocol}, '//'),\n                                properties.$host\n                            ) AS full_host,\n                        FROM events\n                        WHERE timestamp >= now() - INTERVAL 3 DAY\n                        AND timestamp <= now()\n                        AND properties.$lib = 'web'\n                        AND properties.$host is not null\n                        AND startsWith(properties.$current_url, {protocol})\n                        GROUP BY full_host\n                        ORDER BY latest_timestamp DESC\n                        LIMIT 7`\n\n                    const res = await api.queryHogQL(query, {\n                        queryParams: {\n                            values: {\n                                protocol: window.location.protocol,\n                            },\n                        },\n                    })\n                    const hasEvents = !!(res.results?.length ?? 0 > 0)\n                    const snippetHosts = res.results?.map((result) => result[1]).filter((val) => !!val) ?? []\n                    if (hasEvents) {\n                        actions.setSnippetHosts(snippetHosts)\n                    }\n                    return hasEvents\n                },\n            },\n        ],\n    })),\n    selectors({\n        filteredSDKs: [\n            (s) => [s.sdks, s.searchTerm, s.selectedTag],\n            (sdks: SDK[], searchTerm: string, selectedTag: SDKTag | null): SDK[] => {\n                return sdks.filter((sdk) => {\n                    if (selectedTag && !sdk.tags.includes(selectedTag)) {\n                        return false\n                    }\n                    if (searchTerm && !sdk.name.toLowerCase().includes(searchTerm.toLowerCase())) {\n                        return false\n                    }\n                    return true\n                })\n            },\n        ],\n    }),\n    listeners(({ actions, values }) => ({\n        filterSDKs: () => {\n            const filteredSDks: SDK[] = allSDKs\n                .filter((sdk) => {\n                    if (!values.sourceFilter || !sdk) {\n                        return true\n                    }\n                    return sdk.tags.includes(values.sourceFilter as SDKTag)\n                })\n                .filter((sdk) => Object.keys(values.availableSDKInstructionsMap).includes(sdk.key))\n            actions.setSDKs(filteredSDks)\n            actions.setSourceOptions(getSourceOptions(values.availableSDKInstructionsMap))\n        },\n        setAvailableSDKInstructionsMap: () => {\n            actions.filterSDKs()\n        },\n        setSDKs: () => {\n            if (!values.selectedSDK && values.showSideBySide == true) {\n                actions.setSelectedSDK(values.sdks?.[0] || null)\n            }\n        },\n        setSourceFilter: () => {\n            actions.setSelectedSDK(null)\n            actions.filterSDKs()\n        },\n        [onboardingLogic.actionTypes.setProductKey]: () => {\n            // TODO: This doesn't seem to run when the setProductKey action is called in onboardingLogic...\n            actions.resetSDKs()\n        },\n        resetSDKs: () => {\n            actions.filterSDKs()\n            actions.setSelectedSDK(null)\n            actions.setSourceFilter(null)\n            actions.setSourceOptions(getSourceOptions(values.availableSDKInstructionsMap))\n        },\n        setSelectedSDK: () => {\n            if (values.selectedSDK) {\n                actions.setPanel('instructions')\n            }\n        },\n        setShowSideBySide: () => {\n            if (values.showSideBySide && !values.selectedSDK) {\n                actions.setSelectedSDK(values.sdks?.[0] || null)\n            }\n        },\n        selectSDK: ({ sdk }) => {\n            actions.setSelectedSDK(sdk)\n            actions.reportSDKSelected(sdk)\n        },\n    })),\n    events(({ actions }) => ({\n        afterMount: () => {\n            actions.filterSDKs()\n        },\n    })),\n    afterMount(({ actions }) => {\n        actions.loadSnippetEvents()\n    }),\n    urlToAction(({ actions }) => ({\n        '/onboarding/:productKey': (_productKey, { sdk }) => {\n            const matchedSDK = allSDKs.find((s) => s.key === sdk)\n            if (matchedSDK) {\n                actions.setSelectedSDK(matchedSDK)\n            }\n        },\n    })),\n])\n","import { CodeSnippet, Language } from 'lib/components/CodeSnippet'\n\nimport { SDKInstallAngularInstructions } from '../sdk-install-instructions'\nimport { JSManualCapture } from './FinalSteps'\n\nexport function AngularInstructions(): JSX.Element {\n    return (\n        <>\n            <SDKInstallAngularInstructions />\n            <Autocapture />\n            <JSManualCapture />\n        </>\n    )\n}\n\nconst Autocapture = (): JSX.Element => {\n    return (\n        <>\n            <h3>Capturing exceptions</h3>\n            <p>\n                Exception autocapture can be enabled during initialization of the PostHog client to automatically\n                capture any exception thrown by your Angular application.\n            </p>\n            <p>You will need to override Angular's default ErrorHandler provider:</p>\n            <CodeSnippet language={Language.JavaScript}>{autocaptureHandler}</CodeSnippet>\n            <p>\n                Then, in your <code>src/app/app.config.ts</code>, import the <code>providePostHogErrorHandler</code>{' '}\n                function and add it to the providers array:\n            </p>\n            <CodeSnippet language={Language.JavaScript}>{appConfig}</CodeSnippet>\n        </>\n    )\n}\n\nconst autocaptureHandler = `// src/app/posthog-error-handler.ts\n\nimport { ErrorHandler, Injectable, Provider } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport posthog from 'posthog-js';\n\n/**\n * Implementation of Angular's ErrorHandler provider that can be used as a drop-in replacement for the stock one.\n */\n@Injectable({ providedIn: 'root' })\nclass PostHogErrorHandler implements ErrorHandler {\n  public constructor() {}\n\n  /**\n   * Method called for every value captured through the ErrorHandler\n   */\n  public handleError(error: unknown): void {\n    const extractedError = this._extractError(error) || 'Unknown error';\n    runOutsideAngular(() => posthog.captureException(extractedError));\n  }\n\n  protected _extractError(errorCandidate: unknown): unknown {\n    const error = tryToUnwrapZonejsError(errorCandidate);\n\n    if (error instanceof HttpErrorResponse) {\n      return extractHttpModuleError(error);\n    }\n\n    if (typeof error === 'string' || isErrorOrErrorLikeObject(error)) {\n      return error;\n    }\n\n    return null;\n  }\n}\n\n// https://github.com/angular/angular/blob/master/packages/core/src/util/errors.ts\nfunction tryToUnwrapZonejsError(error: unknown): unknown | Error {\n  // TODO: once Angular14 is the minimum requirement ERROR_ORIGINAL_ERROR and\n  //  getOriginalError from error.ts can be used directly.\n  return error && (error as { ngOriginalError: Error }).ngOriginalError\n    ? (error as { ngOriginalError: Error }).ngOriginalError\n    : error;\n}\n\nfunction extractHttpModuleError(error: HttpErrorResponse): string | Error {\n  // The \\`error\\` property of http exception can be either an \\`Error\\` object, which we can use directly...\n  if (isErrorOrErrorLikeObject(error.error)) {\n    return error.error;\n  }\n\n  // ... or an \\`ErrorEvent\\`, which can provide us with the message but no stack...\n  // guarding \\`ErrorEvent\\` against \\`undefined\\` as it's not defined in Node environments\n  if (\n    typeof ErrorEvent !== 'undefined' &&\n    error.error instanceof ErrorEvent &&\n    error.error.message\n  ) {\n    return error.error.message;\n  }\n\n  // ...or the request body itself, which we can use as a message instead.\n  if (typeof error.error === 'string') {\n    return \\`Server returned code \\${error.status} with body \"\\${error.error}\"\\`;\n  }\n\n  // If we don't have any detailed information, fallback to the request message itself.\n  return error.message;\n}\n\nfunction isErrorOrErrorLikeObject(value: unknown): value is Error {\n  if (value instanceof Error) {\n    return true;\n  }\n\n  if (value === null || typeof value !== 'object' || Array.isArray(value)) {\n    return false;\n  }\n\n  return 'name' in value && 'message' in value && 'stack' in value;\n}\n\n// This would be exposed in the global environment whenever \\`zone.js\\` is\n// included in the \\`polyfills\\` configuration property. Starting from Angular 17,\n// users can opt-in to use zoneless change detection.\ndeclare const Zone: any;\n\n// In Angular 17 and future versions, zoneless support is forthcoming.\n// Therefore, it's advisable to safely check whether the \\`run\\` function is\n// available in the \\`<root>\\` context.\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst isNgZoneEnabled = typeof Zone !== 'undefined' && Zone.root?.run;\n\nexport function runOutsideAngular<T>(callback: () => T): T {\n  // Running the \\`callback\\` within the root execution context enables Angular\n  // processes (such as SSR and hydration) to continue functioning normally without\n  // timeouts and delays that could affect the user experience. This approach is\n  // necessary because some of the error tracking functionality continues to run in the background.\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return isNgZoneEnabled ? Zone.root.run(callback) : callback();\n}\n\nexport function providePostHogErrorHandler(): Provider {\n  return {\n    provide: ErrorHandler,\n    useValue: new PostHogErrorHandler(),\n  };\n}\n`\n\nconst appConfig = `// src/app/app.config.ts\n\nimport { ApplicationConfig } from '@angular/core';\nimport { providePostHogErrorHandler } from './posthog-error-handler';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    ...\n    providePostHogErrorHandler(),\n  ],\n};\n`\n","import { useValues } from 'kea'\n\nimport { Link } from '@posthog/lemon-ui'\n\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { NodeInstallSnippet } from '../sdk-install-instructions'\nimport { SDKInstallNextJSInstructions } from '../sdk-install-instructions/next-js'\nimport { JSManualCapture } from './FinalSteps'\n\nexport function NextJSInstructions(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n    const host = apiHostOrigin()\n\n    return (\n        <>\n            <h2>Client-side installation</h2>\n            <SDKInstallNextJSInstructions />\n            <h3>Capturing component render errors</h3>\n            <p>\n                Next.js uses{' '}\n                <Link\n                    target=\"_blank\"\n                    to=\"https://nextjs.org/docs/app/building-your-application/routing/error-handling#using-error-boundaries\"\n                >\n                    error boundaries\n                </Link>{' '}\n                to handle uncaught exceptions by rendering a fallback UI instead of the crashing components.\n            </p>\n            <p>\n                To set one up, create a <code>error.jsx</code> file in any of your route directories. This triggers when\n                there is an error rendering your component and should look like this:\n            </p>\n            <CodeSnippet language={Language.JavaScript}>{errorComponent}</CodeSnippet>\n            <p>\n                You can also create a{' '}\n                <Link\n                    target=\"_blank\"\n                    to=\"https://nextjs.org/docs/app/building-your-application/routing/error-handling#handling-global-errors\"\n                >\n                    Global Error component\n                </Link>{' '}\n                in your root layout to capture unhandled exceptions in your root layout.\n            </p>\n            <CodeSnippet language={Language.JavaScript}>{globalErrorComponent}</CodeSnippet>\n            <JSManualCapture />\n            <h2>Server-side installation</h2>\n            <p>\n                Next.js enables you to capture exceptions on both server-side render pages and within server-side\n                functionality. To integrate PostHog into your Next.js app on the server-side, you can use the Node SDK.\n            </p>\n            <h3>Install posthog-node using your package manager</h3>\n            <NodeInstallSnippet />\n            <h3>Create a reusable client</h3>\n            <CodeSnippet language={Language.JavaScript}>\n                {serverClient(currentTeam?.api_token ?? '<API_KEY>', host)}\n            </CodeSnippet>\n            <h3>Capturing server errors</h3>\n            <p>\n                To capture errors that occur in your server-side code, you can set up a{' '}\n                <Link\n                    target=\"_blank\"\n                    to=\"https://nextjs.org/docs/app/building-your-application/optimizing/instrumentation\"\n                >\n                    instrumentation.js\n                </Link>{' '}\n                file at the root of your project. This provides a <code>onRequestError</code> hook that you can use to\n                capture errors.\n            </p>\n            <p>\n                You can check the runtime to ensure PostHog works and fetch the <code>distinct_id</code> from the cookie\n                to connect the error to a specific user\n            </p>\n            <CodeSnippet language={Language.TypeScript}>{instrumentationComponent}</CodeSnippet>\n        </>\n    )\n}\n\nconst globalErrorComponent = `// app/global-error.jsx\n\n'use client' // Error boundaries must be Client Components\n\nimport posthog from \"posthog-js\";\nimport NextError from \"next/error\";\nimport { useEffect } from \"react\";\n\nexport default function GlobalError({\n  error,\n  reset,\n}) {\n  useEffect(() => {\n    posthog.captureException(error);\n  }, [error]);\n\n  return (\n    // global-error must include html and body tags\n    <html>\n      <body>\n        {/* \\`NextError\\` is the default Next.js error page component */}\n        <NextError statusCode={0} />\n      </body>\n    </html>\n  )\n}\n`\nconst errorComponent = `// error.jsx\n\n\"use client\";  // Error boundaries must be Client Components\n\nimport posthog from \"posthog-js\";\nimport { useEffect } from \"react\";\n\nexport default function Error({\n  error,\n  reset,\n}) {\n  useEffect(() => {\n    posthog.captureException(error);\n  }, [error]);\n\n  return (\n    ...\n  );\n}\n`\n\nconst instrumentationComponent = `// instrumentation.js\n\nexport function register() {\n  // No-op for initialization\n}\n\nexport const onRequestError = async (err, request, context) => {\n  if (process.env.NEXT_RUNTIME === 'nodejs') {\n    const { getPostHogServer } = require('./app/posthog-server')\n    const posthog = await getPostHogServer()\n\n    let distinctId = null\n    if (request.headers.cookie) {\n      const cookieString = request.headers.cookie\n      const postHogCookieMatch = cookieString.match(/ph_phc_.*?_posthog=([^;]+)/)\n\n      if (postHogCookieMatch && postHogCookieMatch[1]) {\n        try {\n          const decodedCookie = decodeURIComponent(postHogCookieMatch[1])\n          const postHogData = JSON.parse(decodedCookie)\n          distinctId = postHogData.distinct_id\n        } catch (e) {\n          console.error('Error parsing PostHog cookie:', e)\n        }\n      }\n    }\n\n    await posthog.captureException(err, distinctId || undefined)\n  }\n}\n`\n\nconst serverClient = (api_key: string, host: string): string => `// app/posthog-server.js\n\nimport { PostHog } from 'posthog-node'\n\nlet posthogInstance = null\n\nexport function getPostHogServer() {\n  if (!posthogInstance) {\n    posthogInstance = new PostHog(\n      '${api_key}',\n      {\n        host: '${host}',\n        flushAt: 1,\n        flushInterval: 0 // Because server-side functions in Next.js can be short-lived we flush regularly\n      }\n    )\n  }\n  return posthogInstance\n}\n`\n","import { useValues } from 'kea'\n\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { SDKInstallNodeInstructions } from '../sdk-install-instructions'\nimport { NodeManualCapture } from './FinalSteps'\n\nexport function NodeInstructions(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <>\n            <SDKInstallNodeInstructions enableExceptionAutocapture />\n            <p>\n                If you are using the Express framework you will need to call <code>setupExpressErrorHandler</code> with\n                your PostHog client and Express app. This is because Express handles uncaught errors internally meaning\n                exception autocapture will not work by default.\n            </p>\n            <CodeSnippet language={Language.TypeScript}>\n                {expressHandler(currentTeam?.api_token ?? '<API_TOKEN>')}\n            </CodeSnippet>\n            <NodeManualCapture />\n        </>\n    )\n}\n\nconst expressHandler = (api_token: string): string => `// server.ts\n\nimport express from 'express'\nimport { PostHog, setupExpressErrorHandler } from 'posthog-node'\n\nconst app = express()\nconst posthog = new PostHog('${api_token}')\n\nsetupExpressErrorHandler(posthog, app)\n`\n","import { useValues } from 'kea'\n\nimport { Link } from '@posthog/lemon-ui'\n\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { SDKInstallNodeInstructions } from '../sdk-install-instructions'\nimport { SDKInstallSvelteJSInstructions } from '../sdk-install-instructions/svelte'\nimport { JSManualCapture, NodeManualCapture } from './FinalSteps'\n\nexport function SvelteInstructions(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <>\n            <p>\n                PostHog exception autocapture relies on{' '}\n                <Link to=\"https://svelte.dev/docs/kit/hooks\" target=\"_blank\">\n                    SvelteKit Hooks\n                </Link>{' '}\n                to capture exceptions in the client and server-side.\n            </p>\n            <h2>Client-side</h2>\n            <SDKInstallSvelteJSInstructions hideWizard />\n            <p>You will need to capture exceptions in the handleError callback in your client-side hooks file.</p>\n            <CodeSnippet language={Language.JavaScript}>{clientSideHooks}</CodeSnippet>\n            <JSManualCapture />\n            <h2>Server-side</h2>\n            <SDKInstallNodeInstructions />\n            <p>\n                To capture exceptions on the server-side, you will also need to implement the <code>handleError</code>{' '}\n                callback\n            </p>\n            <CodeSnippet language={Language.JavaScript}>\n                {serverSideHooks(currentTeam?.api_token ?? '<API_TOKEN>')}\n            </CodeSnippet>\n            <NodeManualCapture />\n        </>\n    )\n}\n\nconst clientSideHooks = `// src/hooks.client.js\n\nimport posthog from 'posthog-js';\nimport type { HandleClientError } from '@sveltejs/kit';\n\nexport const handleError = ({ error, status }: HandleClientError) => {\n    // SvelteKit 2.0 offers a reliable way to check for a 404 error:\n    if (status !== 404) {\n        posthog.captureException(error);\n    }\n};\n`\n\nconst serverSideHooks = (api_token: string): string => `// src/hooks.server.js\n\nimport type { HandleServerError } from '@sveltejs/kit';\nimport { PostHog } from 'posthog-node';\n\nconst client = new PostHog('${api_token}')\n\nexport const handleError = async ({ error, status }: HandleServerError) => {\n    if (status !== 404) {\n        client.captureException(error);\n        await client.shutdown();\n    }\n};\n`\n","import { CodeSnippet, Language } from 'lib/components/CodeSnippet'\n\nimport { SDKInstallDjangoInstructions } from '../sdk-install-instructions'\nimport { PersonModeEventPropertyInstructions } from '../shared-snippets'\n\nfunction DjangoCaptureSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.Python}>{`import posthog\n\nposthog.capture(\"user_signed_up\", properties={\"example_property\": \"with_some_value\"})`}</CodeSnippet>\n    )\n}\n\nexport function ProductAnalyticsDjangoInstructions(): JSX.Element {\n    return (\n        <>\n            <SDKInstallDjangoInstructions />\n            <h3>Send an Event</h3>\n            <DjangoCaptureSnippet />\n            <PersonModeEventPropertyInstructions />\n        </>\n    )\n}\n","import { useValues } from 'kea'\n\nimport { Link } from '@posthog/lemon-ui'\n\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nexport function ProductAnalyticsHeliconeInstructions(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <>\n            <h3>Install</h3>\n            <p>\n                <Link to=\"https://helicone.ai/\" target=\"_blank\">\n                    Helicone\n                </Link>{' '}\n                supports most popular LLM models and you can bring your Helicone data into PostHog for analysis. To get\n                started:\n            </p>\n            <ol className=\"deprecated-space-y-4\">\n                <li>\n                    Sign up to{' '}\n                    <Link to=\"https://www.helicone.ai/\" target=\"_blank\">\n                        Helicone\n                    </Link>{' '}\n                    and add it to your LLM app.\n                </li>\n                <li>\n                    Similar to how you add a{' '}\n                    <Link\n                        to=\"https://docs.helicone.ai/helicone-headers/header-directory#supported-headers\"\n                        target=\"_blank\"\n                    >\n                        Helicone-Auth header\n                    </Link>{' '}\n                    when installing Helicone, add two new headers\n                    <strong> Helicone-Posthog-Key</strong> and <strong>Helicone-Posthog-Host</strong> with your PostHog\n                    details:\n                    <CodeSnippet language={Language.Python}>\n                        {`# Example for adding it to OpenAI in Python\n                        \nclient = OpenAI(\napi_key=\"your-api-key-here\",  # Replace with your OpenAI API key\nbase_url=\"https://oai.hconeai.com/v1\",  # Set the API endpoint\ndefault_headers= { \n    \"Helicone-Auth\": f\"Bearer {HELICONE_API_KEY}\",\n    \"Helicone-Posthog-Key\": \"${currentTeam?.api_token}}\",\n    \"Helicone-Posthog-Host\": \"${apiHostOrigin()}\",\n    }\n)\n                        `}\n                    </CodeSnippet>\n                </li>\n            </ol>\n            <p>Helicone events will now be exported into PostHog as soon as they're available.</p>\n        </>\n    )\n}\n","import { CodeSnippet, Language } from 'lib/components/CodeSnippet'\n\nimport { SDKInstallNodeInstructions } from '../sdk-install-instructions'\n\nfunction NodeCaptureSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`client.capture({\n    distinctId: 'test-id',\n    event: 'test-event'\n})\n\n// Send queued events immediately. Use for example in a serverless environment\n// where the program may terminate before everything is sent.\n// Use \\`client.flush()\\` instead if you still need to send more events or fetch feature flags.\nclient.shutdown()`}\n        </CodeSnippet>\n    )\n}\n\nexport function ProductAnalyticsNodeInstructions(): JSX.Element {\n    return (\n        <>\n            <SDKInstallNodeInstructions />\n            <h3>Send an Event</h3>\n            <NodeCaptureSnippet />\n        </>\n    )\n}\n","import { CodeSnippet, Language } from 'lib/components/CodeSnippet'\n\nimport { SDKKey } from '~/types'\n\nimport { SDKInstallRNInstructions } from '../sdk-install-instructions'\nimport { AdvertiseMobileReplay } from '../session-replay/SessionReplaySDKInstructions'\n\nfunction RNCaptureSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.JSX}>{`// With hooks\nimport { usePostHog } from 'posthog-react-native'\n\nconst MyComponent = () => {\n    const posthog = usePostHog()\n\n    useEffect(() => {\n        posthog.capture(\"MyComponent loaded\", { foo: \"bar\" })\n    }, [])\n}\n`}</CodeSnippet>\n    )\n}\n\nexport function ProductAnalyticsRNInstructions(): JSX.Element {\n    return (\n        <>\n            <SDKInstallRNInstructions />\n            <h3 className=\"mt-4\">Optional: Send a manual event</h3>\n            <p>Our package will autocapture events for you, but you can manually define events, too!</p>\n            <RNCaptureSnippet />\n            <AdvertiseMobileReplay context=\"product-analytics-onboarding\" sdkKey={SDKKey.REACT_NATIVE} />\n        </>\n    )\n}\n","import { useActions, useValues } from 'kea'\nimport { useEffect, useState } from 'react'\n\nimport { Spinner } from '@posthog/lemon-ui'\n\nimport { RestrictionScope, useRestrictedArea } from 'lib/components/RestrictedArea'\nimport { FEATURE_FLAGS, OrganizationMembershipLevel, SESSION_REPLAY_MINIMUM_DURATION_OPTIONS } from 'lib/constants'\nimport { useFeatureFlag } from 'lib/hooks/useFeatureFlag'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { billingLogic } from 'scenes/billing/billingLogic'\nimport { newDashboardLogic } from 'scenes/dashboard/newDashboardLogic'\nimport { WebAnalyticsSDKInstructions } from 'scenes/onboarding/sdks/web-analytics/WebAnalyticsSDKInstructions'\nimport { organizationLogic } from 'scenes/organizationLogic'\nimport { productsLogic } from 'scenes/products/productsLogic'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { getMaskingConfigFromLevel, getMaskingLevelFromConfig } from 'scenes/session-recordings/utils'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { AvailableFeature, OnboardingStepKey, ProductKey, type SessionRecordingMaskingLevel } from '~/types'\n\nimport { OnboardingInviteTeammates } from './OnboardingInviteTeammates'\nimport { OnboardingProductConfiguration } from './OnboardingProductConfiguration'\nimport { OnboardingReverseProxy } from './OnboardingReverseProxy'\nimport { OnboardingSessionReplayConfiguration } from './OnboardingSessionReplayConfiguration'\nimport { OnboardingUpgradeStep } from './billing/OnboardingUpgradeStep'\nimport { OnboardingDataWarehouseSourcesStep } from './data-warehouse/OnboardingDataWarehouseSourcesStep'\nimport { OnboardingErrorTrackingAlertsStep } from './error-tracking/OnboardingErrorTrackingAlertsStep'\nimport { OnboardingErrorTrackingSourceMapsStep } from './error-tracking/OnboardingErrorTrackingSourceMapsStep'\nimport { OnboardingLogicProps, onboardingLogic } from './onboardingLogic'\nimport { ProductConfigOption } from './onboardingProductConfigurationLogic'\nimport { OnboardingDashboardTemplateConfigureStep } from './productAnalyticsSteps/DashboardTemplateConfigureStep'\nimport { OnboardingDashboardTemplateSelectStep } from './productAnalyticsSteps/DashboardTemplateSelectStep'\nimport { OnboardingInstallStep } from './sdks/OnboardingInstallStep'\nimport { ErrorTrackingSDKInstructions } from './sdks/error-tracking/ErrorTrackingSDKInstructions'\nimport { ExperimentsSDKInstructions } from './sdks/experiments/ExperimentsSDKInstructions'\nimport { FeatureFlagsSDKInstructions } from './sdks/feature-flags/FeatureFlagsSDKInstructions'\nimport { ProductAnalyticsSDKInstructions } from './sdks/product-analytics/ProductAnalyticsSDKInstructions'\nimport { sdksLogic } from './sdks/sdksLogic'\nimport { SessionReplaySDKInstructions } from './sdks/session-replay/SessionReplaySDKInstructions'\nimport { SurveysSDKInstructions } from './sdks/surveys/SurveysSDKInstructions'\nimport { OnboardingWebAnalyticsAuthorizedDomainsStep } from './web-analytics/OnboardingWebAnalyticsAuthorizedDomainsStep'\n\nexport const scene: SceneExport = {\n    component: Onboarding,\n    logic: onboardingLogic,\n}\n\n/**\n * Wrapper for custom onboarding content. This automatically includes billing, other products, and invite steps.\n */\nconst OnboardingWrapper = ({\n    children,\n    ...logicProps\n}: { children: React.ReactNode } & OnboardingLogicProps): JSX.Element => {\n    const logic = onboardingLogic(logicProps)\n    const {\n        productKey,\n        currentOnboardingStep,\n        shouldShowBillingStep,\n        shouldShowReverseProxyStep,\n        shouldShowDataWarehouseStep,\n        product,\n        waitForBilling,\n    } = useValues(logic)\n    const { setAllOnboardingSteps } = useActions(logic)\n    const { billing, billingLoading } = useValues(billingLogic)\n    const { currentOrganization } = useValues(organizationLogic)\n    const [allSteps, setAllSteps] = useState<JSX.Element[]>([])\n\n    const minAdminRestrictionReason = useRestrictedArea({\n        minimumAccessLevel: OrganizationMembershipLevel.Admin,\n        scope: RestrictionScope.Organization,\n    })\n\n    useEffect(() => {\n        let steps = []\n        if (Array.isArray(children)) {\n            steps = [...children]\n        } else {\n            steps = [children as JSX.Element]\n        }\n\n        if (shouldShowDataWarehouseStep) {\n            const DataWarehouseStep = <OnboardingDataWarehouseSourcesStep stepKey={OnboardingStepKey.LINK_DATA} />\n            steps = [...steps, DataWarehouseStep]\n        }\n\n        if (shouldShowReverseProxyStep) {\n            const ReverseProxyStep = <OnboardingReverseProxy stepKey={OnboardingStepKey.REVERSE_PROXY} />\n            steps = [...steps, ReverseProxyStep]\n        }\n\n        const billingProduct = billing?.products.find((p) => p.type === productKey)\n        if (shouldShowBillingStep && billingProduct) {\n            const BillingStep = <OnboardingUpgradeStep product={billingProduct} stepKey={OnboardingStepKey.PLANS} />\n\n            steps = [...steps, BillingStep]\n        }\n\n        const userCannotInvite = minAdminRestrictionReason && !currentOrganization?.members_can_invite\n        if (!userCannotInvite) {\n            const inviteTeammatesStep = <OnboardingInviteTeammates stepKey={OnboardingStepKey.INVITE_TEAMMATES} />\n            steps = [...steps, inviteTeammatesStep]\n        }\n\n        steps = steps.filter(Boolean)\n\n        setAllSteps(steps)\n    }, [children, billingLoading, minAdminRestrictionReason, currentOrganization]) // oxlint-disable-line react-hooks/exhaustive-deps\n\n    useEffect(() => {\n        if (!allSteps.length || (billingLoading && waitForBilling)) {\n            return\n        }\n\n        setAllOnboardingSteps(allSteps)\n    }, [allSteps]) // oxlint-disable-line react-hooks/exhaustive-deps\n\n    if (!product || !children) {\n        return <></>\n    }\n\n    if (!currentOnboardingStep) {\n        return (\n            <div className=\"flex items-center justify-center my-20\">\n                <Spinner className=\"text-2xl text-secondary w-10 h-10\" />\n            </div>\n        )\n    }\n\n    return currentOnboardingStep\n}\n\nconst ProductAnalyticsOnboarding = (): JSX.Element => {\n    const { currentTeam } = useValues(teamLogic)\n    const { featureFlags } = useValues(featureFlagLogic)\n    const { combinedSnippetAndLiveEventsHosts } = useValues(sdksLogic)\n    const { selectedProducts } = useValues(productsLogic)\n    // mount the logic here so that it stays mounted for the entire onboarding flow\n    // not sure if there is a better way to do this\n    useValues(newDashboardLogic)\n\n    const showTemplateSteps =\n        featureFlags[FEATURE_FLAGS.ONBOARDING_DASHBOARD_TEMPLATES] == 'test' &&\n        window.innerWidth > 1000 &&\n        combinedSnippetAndLiveEventsHosts.length > 0\n\n    const showSessionReplayStep =\n        useFeatureFlag('ONBOARDING_SESSION_REPLAY_SEPARATE_STEP', 'test') &&\n        !selectedProducts.includes(ProductKey.SESSION_REPLAY)\n\n    const options: ProductConfigOption[] = [\n        {\n            title: 'Autocapture frontend interactions',\n            description: `If you use our JavaScript, React Native or iOS libraries, we'll automagically \n            capture frontend interactions like clicks, submits, and more. Fine-tune what you \n            capture directly in your code snippet.`,\n            teamProperty: 'autocapture_opt_out',\n            value: !currentTeam?.autocapture_opt_out,\n            type: 'toggle',\n            inverseToggle: true,\n            visible: true,\n        },\n        {\n            title: 'Enable heatmaps',\n            description: `If you use our JavaScript libraries, we can capture general clicks, mouse movements,\n                   and scrolling to create heatmaps. \n                   No additional events are created, and you can disable this at any time.`,\n            teamProperty: 'heatmaps_opt_in',\n            value: currentTeam?.heatmaps_opt_in ?? true,\n            type: 'toggle',\n            visible: true,\n        },\n        {\n            title: 'Enable web vitals autocapture',\n            description: `Uses Google's web vitals library to automagically capture performance information.`,\n            teamProperty: 'autocapture_web_vitals_opt_in',\n            value: currentTeam?.autocapture_web_vitals_opt_in ?? true,\n            type: 'toggle',\n            visible: true,\n        },\n        {\n            title: 'Enable session recordings',\n            description: `Turn on session recordings and watch how users experience your app. We will also turn on console log and network performance recording. You can change these settings any time in the settings panel.`,\n            teamProperty: 'session_recording_opt_in',\n            // TRICKY: if someone has shown secondary product intent for replay we want to include it as enabled\n            // particularly while we're not taking people through every product onboarding they showed interest in\n            value:\n                (currentTeam?.session_recording_opt_in || selectedProducts.includes(ProductKey.SESSION_REPLAY)) ?? true,\n            type: 'toggle',\n            visible: true,\n        },\n        {\n            title: 'Capture console logs',\n            description: `Automatically enable console log capture`,\n            teamProperty: 'capture_console_log_opt_in',\n            value: true,\n            type: 'toggle',\n            visible: false,\n        },\n        {\n            title: 'Capture network performance',\n            description: `Automatically enable network performance capture`,\n            teamProperty: 'capture_performance_opt_in',\n            value: true,\n            type: 'toggle',\n            visible: false,\n        },\n    ]\n\n    const filteredOptions = showSessionReplayStep\n        ? options.filter((option) => option.teamProperty !== 'session_recording_opt_in')\n        : options\n\n    return (\n        <OnboardingWrapper>\n            <OnboardingInstallStep\n                sdkInstructionMap={ProductAnalyticsSDKInstructions}\n                productKey={ProductKey.PRODUCT_ANALYTICS}\n                stepKey={OnboardingStepKey.INSTALL}\n            />\n            <OnboardingProductConfiguration\n                stepKey={OnboardingStepKey.PRODUCT_CONFIGURATION}\n                options={filteredOptions}\n            />\n\n            {showSessionReplayStep && (\n                <OnboardingSessionReplayConfiguration stepKey={OnboardingStepKey.SESSION_REPLAY} />\n            )}\n\n            {/* this is two conditionals because they need to be direct children of the wrapper */}\n            {showTemplateSteps ? (\n                <OnboardingDashboardTemplateSelectStep stepKey={OnboardingStepKey.DASHBOARD_TEMPLATE} />\n            ) : null}\n            {showTemplateSteps ? (\n                <OnboardingDashboardTemplateConfigureStep stepKey={OnboardingStepKey.DASHBOARD_TEMPLATE_CONFIGURE} />\n            ) : null}\n        </OnboardingWrapper>\n    )\n}\n\nconst WebAnalyticsOnboarding = (): JSX.Element => {\n    const { currentTeam } = useValues(teamLogic)\n    const { selectedProducts } = useValues(productsLogic)\n\n    const options: ProductConfigOption[] = [\n        {\n            title: 'Autocapture frontend interactions',\n            description: `If you use our JavaScript, React Native or iOS libraries, we'll automagically \n            capture frontend interactions like clicks, submits, and more. Fine-tune what you \n            capture directly in your code snippet.`,\n            teamProperty: 'autocapture_opt_out',\n            value: !currentTeam?.autocapture_opt_out,\n            type: 'toggle',\n            inverseToggle: true,\n            visible: true,\n        },\n        {\n            title: 'Enable heatmaps',\n            description: `If you use our JavaScript libraries, we can capture general clicks, mouse movements,\n                   and scrolling to create heatmaps. \n                   No additional events are created, and you can disable this at any time.`,\n            teamProperty: 'heatmaps_opt_in',\n            value: currentTeam?.heatmaps_opt_in ?? true,\n            type: 'toggle',\n            visible: true,\n        },\n        {\n            title: 'Enable web vitals autocapture',\n            description: `Uses Google's web vitals library to automagically capture performance information.`,\n            teamProperty: 'autocapture_web_vitals_opt_in',\n            value: currentTeam?.autocapture_web_vitals_opt_in ?? true,\n            type: 'toggle',\n            visible: true,\n        },\n        {\n            title: 'Enable session recordings',\n            description: `Turn on session recordings and watch how users experience your app. We will also turn on console log and network performance recording. You can change these settings any time in the settings panel.`,\n            teamProperty: 'session_recording_opt_in',\n            value:\n                (currentTeam?.session_recording_opt_in || selectedProducts.includes(ProductKey.SESSION_REPLAY)) ?? true,\n            type: 'toggle',\n            visible: true,\n        },\n        {\n            title: 'Capture network performance',\n            description: `Automatically enable network performance capture`,\n            teamProperty: 'capture_performance_opt_in',\n            value: true,\n            type: 'toggle',\n            visible: false,\n        },\n    ]\n\n    return (\n        <OnboardingWrapper>\n            <OnboardingInstallStep\n                sdkInstructionMap={WebAnalyticsSDKInstructions}\n                productKey={ProductKey.WEB_ANALYTICS}\n                stepKey={OnboardingStepKey.INSTALL}\n            />\n            <OnboardingWebAnalyticsAuthorizedDomainsStep stepKey={OnboardingStepKey.AUTHORIZED_DOMAINS} />\n            <OnboardingProductConfiguration stepKey={OnboardingStepKey.PRODUCT_CONFIGURATION} options={options} />\n        </OnboardingWrapper>\n    )\n}\n\nconst SessionReplayOnboarding = (): JSX.Element => {\n    const { hasAvailableFeature } = useValues(userLogic)\n    const { currentTeam } = useValues(teamLogic)\n\n    const configOptions: ProductConfigOption[] = [\n        {\n            type: 'toggle',\n            title: 'Capture console logs',\n            description: `Capture console logs as a part of user session recordings. \n                            Use the console logs alongside recordings to debug any issues with your app.`,\n            teamProperty: 'capture_console_log_opt_in',\n            value: currentTeam?.capture_console_log_opt_in ?? true,\n            visible: true,\n        },\n        {\n            type: 'toggle',\n            title: 'Capture network performance',\n            description: `Capture performance and network information alongside recordings. Use the\n                            network requests and timings in the recording player to help you debug issues with your app.`,\n            teamProperty: 'capture_performance_opt_in',\n            value: currentTeam?.capture_performance_opt_in ?? true,\n            visible: true,\n        },\n        {\n            type: 'toggle',\n            title: 'Record user sessions',\n            description: 'Watch recordings of how users interact with your web app to see what can be improved.',\n            teamProperty: 'session_recording_opt_in',\n            value: true,\n            visible: false,\n        },\n        {\n            type: 'select',\n            title: 'Masking',\n            description: 'Choose the level of masking for your recordings.',\n            value: getMaskingLevelFromConfig(currentTeam?.session_recording_masking_config ?? {}),\n            teamProperty: 'session_recording_masking_config',\n            onChange: (value: string | number | null) => {\n                return {\n                    session_recording_masking_config: getMaskingConfigFromLevel(value as SessionRecordingMaskingLevel),\n                }\n            },\n            selectOptions: [\n                { value: 'total-privacy', label: 'Total privacy (mask all text/images)' },\n                { value: 'normal', label: 'Normal (mask inputs but not text/images)' },\n                { value: 'free-love', label: 'Free love (mask only passwords)' },\n            ],\n            visible: true,\n        },\n    ]\n\n    if (hasAvailableFeature(AvailableFeature.REPLAY_RECORDING_DURATION_MINIMUM)) {\n        configOptions.push({\n            type: 'select',\n            title: 'Minimum session duration (seconds)',\n            description: `Only record sessions that are longer than the specified duration. \n                            Start with it low and increase it later if you're getting too many short sessions.`,\n            teamProperty: 'session_recording_minimum_duration_milliseconds',\n            value: currentTeam?.session_recording_minimum_duration_milliseconds || null,\n            selectOptions: SESSION_REPLAY_MINIMUM_DURATION_OPTIONS,\n            visible: true,\n        })\n    }\n\n    return (\n        <OnboardingWrapper>\n            <OnboardingInstallStep\n                sdkInstructionMap={SessionReplaySDKInstructions}\n                productKey={ProductKey.SESSION_REPLAY}\n                stepKey={OnboardingStepKey.INSTALL}\n            />\n            <OnboardingProductConfiguration\n                stepKey={OnboardingStepKey.PRODUCT_CONFIGURATION}\n                options={configOptions}\n                product={ProductKey.SESSION_REPLAY}\n            />\n        </OnboardingWrapper>\n    )\n}\n\nconst FeatureFlagsOnboarding = (): JSX.Element => {\n    return (\n        <OnboardingWrapper>\n            <OnboardingInstallStep\n                sdkInstructionMap={FeatureFlagsSDKInstructions}\n                productKey={ProductKey.FEATURE_FLAGS}\n                stepKey={OnboardingStepKey.INSTALL}\n            />\n        </OnboardingWrapper>\n    )\n}\n\nconst ExperimentsOnboarding = (): JSX.Element => {\n    return (\n        <OnboardingWrapper>\n            <OnboardingInstallStep\n                sdkInstructionMap={ExperimentsSDKInstructions}\n                productKey={ProductKey.EXPERIMENTS}\n                stepKey={OnboardingStepKey.INSTALL}\n            />\n        </OnboardingWrapper>\n    )\n}\n\nconst SurveysOnboarding = (): JSX.Element => {\n    return (\n        <OnboardingWrapper>\n            <OnboardingInstallStep\n                sdkInstructionMap={SurveysSDKInstructions}\n                productKey={ProductKey.SURVEYS}\n                stepKey={OnboardingStepKey.INSTALL}\n            />\n        </OnboardingWrapper>\n    )\n}\n\nconst DataWarehouseOnboarding = (): JSX.Element => {\n    return (\n        <OnboardingWrapper>\n            <OnboardingDataWarehouseSourcesStep stepKey={OnboardingStepKey.LINK_DATA} />\n        </OnboardingWrapper>\n    )\n}\n\nconst ErrorTrackingOnboarding = (): JSX.Element => {\n    const { updateCurrentTeam } = useActions(teamLogic)\n\n    return (\n        <OnboardingWrapper\n            onCompleteOnboarding={(productKey) => {\n                if (productKey === ProductKey.ERROR_TRACKING) {\n                    updateCurrentTeam({ autocapture_exceptions_opt_in: true })\n                }\n            }}\n        >\n            <OnboardingInstallStep\n                sdkInstructionMap={ErrorTrackingSDKInstructions}\n                productKey={ProductKey.ERROR_TRACKING}\n                stepKey={OnboardingStepKey.INSTALL}\n            />\n            <OnboardingErrorTrackingSourceMapsStep stepKey={OnboardingStepKey.SOURCE_MAPS} />\n            <OnboardingErrorTrackingAlertsStep stepKey={OnboardingStepKey.ALERTS} />\n        </OnboardingWrapper>\n    )\n}\n\nexport const onboardingViews = {\n    [ProductKey.PRODUCT_ANALYTICS]: ProductAnalyticsOnboarding,\n    [ProductKey.WEB_ANALYTICS]: WebAnalyticsOnboarding,\n    [ProductKey.SESSION_REPLAY]: SessionReplayOnboarding,\n    [ProductKey.FEATURE_FLAGS]: FeatureFlagsOnboarding,\n    [ProductKey.EXPERIMENTS]: ExperimentsOnboarding,\n    [ProductKey.SURVEYS]: SurveysOnboarding,\n    [ProductKey.DATA_WAREHOUSE]: DataWarehouseOnboarding,\n    [ProductKey.ERROR_TRACKING]: ErrorTrackingOnboarding,\n}\n\nexport function Onboarding(): JSX.Element | null {\n    const { product, productKey } = useValues(onboardingLogic)\n\n    if (!product || !productKey) {\n        return <></>\n    }\n    const OnboardingView = onboardingViews[productKey as keyof typeof onboardingViews]\n\n    return (\n        <div className=\"pt-4 pb-10\">\n            <OnboardingView />\n        </div>\n    )\n}\n"],"names":[],"sourceRoot":""}