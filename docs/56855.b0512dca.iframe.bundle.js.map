{"version":3,"file":"56855.b0512dca.iframe.bundle.js","mappings":";;;;;;;AA+HA;;ACrHA;;;AAaA;AACA;;;;;;;;;;;;;;AAcA;;;;;;ACaA;;;;;;;AAOA;;;;;ACvCA;;AAEA;;ACPA;;;;;;AAgBA;AACA;;;;;;;AAOA;;ACrBA;;;;ACLA;;;AAaA;AACA;AACA;;;;ACfA;AAeA;AACA;;ACZA;;AAEA;;;;;;;;;;ACMA;;;;;;AAkBA;AACA;;;;;AAKA;ACjCA;AACA;;AAEA;ACNA;;;;;;;;;;;;;;;;;;;;;;;AAkCA;;;;;;;;;;;;AAoBA;;;;;;;;;;;;AAoBA;AC3EA;;;;;;;;;;;;;;;;;;;;;AAiCA;;;;;;;;AC7BA;;;;;;;;;;ACKA;;ACqEA;AAkBA;AAQA;AAWA","sources":["webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdksLogic.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/android.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/flutter.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/go.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/ios.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/js-web.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/nodejs.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/php.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/python.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/react-native.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/ruby.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/next-js.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/react.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/product-analytics/nodejs.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/product-analytics/react-native.tsx","webpack://posthog/./frontend/src/scenes/onboarding/Onboarding.tsx"],"sourcesContent":["import { actions, afterMount, connect, events, kea, listeners, path, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { LemonSelectOptions } from 'lib/lemon-ui/LemonSelect/LemonSelect'\n\nimport { HogQLQuery, NodeKind } from '~/queries/schema'\nimport { hogql } from '~/queries/utils'\nimport { ProductKey, SDK, SDKInstructionsMap } from '~/types'\n\nimport { onboardingLogic } from '../onboardingLogic'\nimport { allSDKs } from './allSDKs'\nimport type { sdksLogicType } from './sdksLogicType'\n\n/* \nTo add SDK instructions for your product:\n    1. If needed, add a new ProductKey enum value in ~/types.ts\n    2. Create a folder in this directory for your product\n    3. Create and export the instruction components\n    4. Create a file like ProductAnalyticsSDKInstructions.tsx and export the instructions object with the SDKKey:Component mapping\n    6. Add the SDK component to your product onboarding component\n*/\n\nconst getSourceOptions = (availableSDKInstructionsMap: SDKInstructionsMap): LemonSelectOptions<string> => {\n    const filteredSDKsTags = allSDKs\n        .filter((sdk) => Object.keys(availableSDKInstructionsMap).includes(sdk.key))\n        .flatMap((sdk) => sdk.tags)\n    const uniqueTags = filteredSDKsTags.filter((item, index) => filteredSDKsTags.indexOf(item) === index)\n    const selectOptions = uniqueTags.map((tag) => ({\n        label: tag,\n        value: tag,\n    }))\n    return selectOptions\n}\n\n/*\nProducts that will often be installed in multiple places, eg. web and mobile\n*/\nexport const multiInstallProducts = [ProductKey.PRODUCT_ANALYTICS, ProductKey.FEATURE_FLAGS]\n\nexport const sdksLogic = kea<sdksLogicType>([\n    path(['scenes', 'onboarding', 'sdks', 'sdksLogic']),\n    connect({\n        values: [onboardingLogic, ['productKey']],\n    }),\n    actions({\n        setSourceFilter: (sourceFilter: string | null) => ({ sourceFilter }),\n        filterSDKs: true,\n        setSDKs: (sdks: SDK[]) => ({ sdks }),\n        setSelectedSDK: (sdk: SDK | null) => ({ sdk }),\n        setSourceOptions: (sourceOptions: LemonSelectOptions<string>) => ({ sourceOptions }),\n        resetSDKs: true,\n        setAvailableSDKInstructionsMap: (sdkInstructionMap: SDKInstructionsMap) => ({ sdkInstructionMap }),\n        setShowSideBySide: (showSideBySide: boolean) => ({ showSideBySide }),\n        setPanel: (panel: 'instructions' | 'options') => ({ panel }),\n        setHasSnippetEvents: (hasSnippetEvents: boolean) => ({ hasSnippetEvents }),\n    }),\n    reducers({\n        sourceFilter: [\n            null as string | null,\n            {\n                setSourceFilter: (_, { sourceFilter }) => sourceFilter,\n            },\n        ],\n        sdks: [\n            [] as SDK[] | null,\n            {\n                setSDKs: (_, { sdks }) => sdks,\n            },\n        ],\n        selectedSDK: [\n            null as SDK | null,\n            {\n                setSelectedSDK: (_, { sdk }) => sdk,\n            },\n        ],\n        sourceOptions: [\n            [] as LemonSelectOptions<string>,\n            {\n                setSourceOptions: (_, { sourceOptions }) => sourceOptions,\n            },\n        ],\n        availableSDKInstructionsMap: [\n            {} as SDKInstructionsMap,\n            {\n                setAvailableSDKInstructionsMap: (_, { sdkInstructionMap }) => sdkInstructionMap,\n            },\n        ],\n        showSideBySide: [\n            null as boolean | null,\n            {\n                setShowSideBySide: (_, { showSideBySide }) => showSideBySide,\n            },\n        ],\n        panel: [\n            'options' as 'instructions' | 'options',\n            {\n                setPanel: (_, { panel }) => panel,\n            },\n        ],\n        hasSnippetEvents: {\n            setHasSnippetEvents: (_, { hasSnippetEvents }) => hasSnippetEvents,\n        },\n    }),\n    selectors({\n        showSourceOptionsSelect: [\n            (selectors) => [selectors.sourceOptions, selectors.availableSDKInstructionsMap],\n            (sourceOptions: LemonSelectOptions<string>, availableSDKInstructionsMap: SDKInstructionsMap): boolean => {\n                // more than two source options since one will almost always be \"recommended\"\n                // more than 5 sdks since with fewer you don't really need to filter\n                return Object.keys(availableSDKInstructionsMap).length > 5 && sourceOptions.length > 2\n            },\n        ],\n    }),\n    loaders({\n        hasSnippetEvents: [\n            null as boolean | null,\n            {\n                loadSnippetEvents: async () => {\n                    const query: HogQLQuery = {\n                        kind: NodeKind.HogQLQuery,\n                        query: hogql`SELECT properties.$lib_version AS lib_version, max(timestamp) AS latest_timestamp, count(lib_version) as count\n                                FROM events\n                                WHERE timestamp >= now() - INTERVAL 3 DAY \n                                AND timestamp <= now()\n                                AND properties.$lib = 'web'\n                                GROUP BY lib_version\n                                ORDER BY latest_timestamp DESC\n                                limit 10`,\n                    }\n\n                    const res = await api.query(query)\n                    return !!(res.results?.length ?? 0 > 0)\n                },\n            },\n        ],\n    }),\n    listeners(({ actions, values }) => ({\n        filterSDKs: () => {\n            const filteredSDks: SDK[] = allSDKs\n                .filter((sdk) => {\n                    if (!values.sourceFilter || !sdk) {\n                        return true\n                    }\n                    return sdk.tags.includes(values.sourceFilter)\n                })\n                .filter((sdk) => Object.keys(values.availableSDKInstructionsMap).includes(sdk.key))\n            actions.setSDKs(filteredSDks)\n            actions.setSourceOptions(getSourceOptions(values.availableSDKInstructionsMap))\n        },\n        setAvailableSDKInstructionsMap: () => {\n            actions.filterSDKs()\n        },\n        setSDKs: () => {\n            if (!values.selectedSDK && values.showSideBySide == true) {\n                actions.setSelectedSDK(values.sdks?.[0] || null)\n            }\n        },\n        setSourceFilter: () => {\n            actions.setSelectedSDK(null)\n            actions.filterSDKs()\n        },\n        [onboardingLogic.actionTypes.setProductKey]: () => {\n            // TODO: This doesn't seem to run when the setProductKey action is called in onboardingLogic...\n            actions.resetSDKs()\n        },\n        resetSDKs: () => {\n            actions.filterSDKs()\n            actions.setSelectedSDK(null)\n            actions.setSourceFilter(null)\n            actions.setSourceOptions(getSourceOptions(values.availableSDKInstructionsMap))\n        },\n        setSelectedSDK: () => {\n            if (values.selectedSDK) {\n                actions.setPanel('instructions')\n            }\n        },\n        setShowSideBySide: () => {\n            if (values.showSideBySide && !values.selectedSDK) {\n                actions.setSelectedSDK(values.sdks?.[0] || null)\n            }\n        },\n    })),\n    events(({ actions }) => ({\n        afterMount: () => {\n            actions.filterSDKs()\n        },\n    })),\n    afterMount(({ actions }) => {\n        actions.loadSnippetEvents()\n    }),\n])\n","import { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nfunction AndroidInstallSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.Kotlin}>\n            {`dependencies {\n    implementation(\"com.posthog:posthog-android:3.+\")\n}`}\n        </CodeSnippet>\n    )\n}\n\nfunction AndroidSetupSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.Kotlin}>\n            {`class SampleApp : Application() {\n\n    companion object {\n        const val POSTHOG_API_KEY = \"${currentTeam?.api_token}\"\n        const val POSTHOG_HOST = \"${apiHostOrigin()}\"\n    }\n\n    override fun onCreate() {\n        super.onCreate()\n\n        // Create a PostHog Config with the given API key and host\n        val config = PostHogAndroidConfig(\n            apiKey = POSTHOG_API_KEY,\n            host = POSTHOG_HOST\n        )\n\n        // Setup PostHog with the given Context and Config\n        PostHogAndroid.setup(this, config)\n    }`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallAndroidInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install</h3>\n            <AndroidInstallSnippet />\n            <h3>Configure</h3>\n            <AndroidSetupSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nfunction FlutterInstallSnippet(): JSX.Element {\n    return <CodeSnippet language={Language.YAML}>posthog_flutter: ^4.0.0</CodeSnippet>\n}\n\nfunction FlutterAndroidSetupSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n    const url = apiHostOrigin()\n\n    return (\n        <CodeSnippet language={Language.XML}>\n            {'<application>\\n\\t<activity>\\n\\t\\t[...]\\n\\t</activity>\\n\\t<meta-data android:name=\"com.posthog.posthog.API_KEY\" android:value=\"' +\n                currentTeam?.api_token +\n                '\" />\\n\\t<meta-data android:name=\"com.posthog.posthog.POSTHOG_HOST\" android:value=\"' +\n                url +\n                '\" />\\n\\t<meta-data android:name=\"com.posthog.posthog.TRACK_APPLICATION_LIFECYCLE_EVENTS\" android:value=\"true\" />\\n\\t<meta-data android:name=\"com.posthog.posthog.DEBUG\" android:value=\"true\" />\\n</application>'}\n        </CodeSnippet>\n    )\n}\n\nfunction FlutterIOSSetupSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n    const url = apiHostOrigin()\n\n    return (\n        <CodeSnippet language={Language.XML}>\n            {'<dict>\\n\\t[...]\\n\\t<key>com.posthog.posthog.API_KEY</key>\\n\\t<string>' +\n                currentTeam?.api_token +\n                '</string>\\n\\t<key>com.posthog.posthog.POSTHOG_HOST</key>\\n\\t<string>' +\n                url +\n                '</string>\\n\\t<key>com.posthog.posthog.CAPTURE_APPLICATION_LIFECYCLE_EVENTS</key>\\n\\t<true/>\\n\\t[...]\\n</dict>'}\n        </CodeSnippet>\n    )\n}\n\nfunction FlutterWebSetupSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n    const url = apiHostOrigin()\n\n    return (\n        <CodeSnippet language={Language.HTML}>\n            {`<!DOCTYPE html>\n<html>\n  <head>\n    ...\n    <script>\n      !function(t,e){var o,n,p,r;e.__SV||(window.posthog=e,e._i=[],e.init=function(i,s,a){function g(t,e){var o=e.split(\".\");2==o.length&&(t=t[o[0]],e=o[1]),t[e]=function(){t.push([e].concat(Array.prototype.slice.call(arguments,0)))}}(p=t.createElement(\"script\")).type=\"text/javascript\",p.async=!0,p.src=s.api_host+\"/static/array.js\",(r=t.getElementsByTagName(\"script\")[0]).parentNode.insertBefore(p,r);var u=e;for(void 0!==a?u=e[a]=[]:a=\"posthog\",u.people=u.people||[],u.toString=function(t){var e=\"posthog\";return\"posthog\"!==a&&(e+=\".\"+a),t||(e+=\" (stub)\"),e},u.people.toString=function(){return u.toString(1)+\".people (stub)\"},o=\"capture identify alias people.set people.set_once set_config register register_once unregister opt_out_capturing has_opted_out_capturing opt_in_capturing reset isFeatureEnabled onFeatureFlags getFeatureFlag getFeatureFlagPayload reloadFeatureFlags group updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures getActiveMatchingSurveys getSurveys\".split(\" \"),n=0;n<o.length;n++)g(u,o[n]);e._i.push([i,s,a])},e.__SV=1)}(document,window.posthog||[]);\n      posthog.init('${currentTeam?.api_token}', {api_host: '${url}'})\n    </script>\n  </head>\n\n  <body>\n    ...\n  </body>\n</html>`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallFlutterInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install</h3>\n            <FlutterInstallSnippet />\n            <h3>Android Setup</h3>\n            <p className=\"prompt-text\">Add these values in AndroidManifest.xml</p>\n            <FlutterAndroidSetupSnippet />\n            <h3>iOS/macOS Setup</h3>\n            <p className=\"prompt-text\">Add these values in Info.plist</p>\n            <FlutterIOSSetupSnippet />\n            <h3>Web Setup</h3>\n            <p className=\"prompt-text\">Add these values in index.html</p>\n            <FlutterWebSetupSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nfunction GoInstallSnippet(): JSX.Element {\n    return <CodeSnippet language={Language.Bash}>go get \"github.com/posthog/posthog-go\"</CodeSnippet>\n}\n\nfunction GoSetupSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.Go}>\n            {`package main\nimport (\n    \"github.com/posthog/posthog-go\"\n)\nfunc main() {\n    client, _ := posthog.NewWithConfig(\"${currentTeam?.api_token}\", posthog.Config{Endpoint: \"${apiHostOrigin()}\"})\n    defer client.Close()\n}`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallGoInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install</h3>\n            <GoInstallSnippet />\n            <h3>Configure</h3>\n            <GoSetupSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nfunction IOSInstallCocoaPodsSnippet(): JSX.Element {\n    return <CodeSnippet language={Language.Ruby}>{'pod \"PostHog\", \"~> 3.0.0\"'}</CodeSnippet>\n}\n\nfunction IOSInstallSPMSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.Swift}>\n            {`dependencies: [\n  .package(url: \"https://github.com/PostHog/posthog-ios.git\", from: \"3.0.0\")\n]`}\n        </CodeSnippet>\n    )\n}\n\nfunction IOSSetupSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.Swift}>\n            {`import Foundation\nimport PostHog\nimport UIKit\n\nclass AppDelegate: NSObject, UIApplicationDelegate {\n    func application(_: UIApplication, didFinishLaunchingWithOptions _: [UIApplication.LaunchOptionsKey: Any]? = nil) -> Bool {\n        let POSTHOG_API_KEY = \"${currentTeam?.api_token}\"\n        let POSTHOG_HOST = \"${apiHostOrigin()}\"\n\n        let config = PostHogConfig(apiKey: POSTHOG_API_KEY, host: POSTHOG_HOST)\n        PostHogSDK.shared.setup(config)\n\n        return true\n    }\n}`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallIOSInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install via CocoaPods</h3>\n            <IOSInstallCocoaPodsSnippet />\n            <h3>Or Install via SPM</h3>\n            <IOSInstallSPMSnippet />\n            <h3>Configure</h3>\n            <IOSSetupSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nexport function JSInstallSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.Bash}>\n            {['npm install posthog-js', '# OR', 'yarn add posthog-js', '# OR', 'pnpm add posthog-js'].join('\\n')}\n        </CodeSnippet>\n    )\n}\n\nexport function JSSetupSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {[\n                \"import posthog from 'posthog-js'\",\n                '',\n                `posthog.init('${currentTeam?.api_token}', { api_host: '${apiHostOrigin()}' })`,\n            ].join('\\n')}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallJSWebInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install</h3>\n            <JSInstallSnippet />\n            <h3>Initialize</h3>\n            <JSSetupSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nexport function NodeInstallSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.Bash}>\n            {`npm install posthog-node\n# OR\nyarn add posthog-node\n# OR\npnpm add posthog-node`}\n        </CodeSnippet>\n    )\n}\n\nexport function NodeSetupSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`import { PostHog } from 'posthog-node'\n\nconst client = new PostHog(\n    '${currentTeam?.api_token}',\n    { host: '${apiHostOrigin()}' }\n)`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallNodeInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install</h3>\n            <NodeInstallSnippet />\n            <h3>Configure</h3>\n            <NodeSetupSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nfunction PHPConfigSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.JSON}>\n            {`{\n    \"require\": {\n        \"posthog/posthog-php\": \"1.0.*\"\n    }\n}`}\n        </CodeSnippet>\n    )\n}\n\nfunction PHPInstallSnippet(): JSX.Element {\n    return <CodeSnippet language={Language.Bash}>php composer.phar install</CodeSnippet>\n}\n\nfunction PHPSetupSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.PHP}>\n            {`PostHog::init('${currentTeam?.api_token}',\n    array('host' => '${apiHostOrigin()}')\n);`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallPHPInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Dependency Setup</h3>\n            <PHPConfigSnippet />\n            <h3>Install</h3>\n            <PHPInstallSnippet />\n            <h3>Configure</h3>\n            <PHPSetupSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nfunction PythonInstallSnippet(): JSX.Element {\n    return <CodeSnippet language={Language.Bash}>pip install posthog</CodeSnippet>\n}\n\nfunction PythonSetupSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.Python}>\n            {`from posthog import Posthog\n\nposthog = Posthog(project_api_key='${currentTeam?.api_token}', host='${apiHostOrigin()}')\n\n            `}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallPythonInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install</h3>\n            <PythonInstallSnippet />\n            <h3>Configure</h3>\n            <PythonSetupSnippet />\n        </>\n    )\n}\n","import { Link } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nexport function SDKInstallRNInstructions(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n    const url = apiHostOrigin()\n\n    return (\n        <>\n            <h3 className=\"mt-4\">Install</h3>\n            <CodeSnippet language={Language.Bash}>\n                {`# Expo apps\nexpo install posthog-react-native expo-file-system expo-application expo-device expo-localization\n\n# Standard React Native apps\nyarn add posthog-react-native @react-native-async-storage/async-storage react-native-device-info\n# or\nnpm i -s posthog-react-native @react-native-async-storage/async-storage react-native-device-info\n\n# for iOS\ncd ios\npod install`}\n            </CodeSnippet>\n            <h3 className=\"mt-4\">Configure</h3>\n            <p>\n                PostHog is most easily used via the <code>PostHogProvider</code> component but if you need to\n                instantiate it directly,{' '}\n                <Link to=\"https://posthog.com/docs/integrate/client/react-native#without-the-posthogprovider\">\n                    check out the docs\n                </Link>{' '}\n                which explain how to do this correctly.\n            </p>\n            <CodeSnippet language={Language.JSX}>\n                {`// App.(js|ts)\nimport { PostHogProvider } from 'posthog-react-native'\n...\n\nexport function MyApp() {\n    return (\n        <PostHogProvider apiKey=\"${currentTeam?.api_token}\" options={{\n            host: \"${url}\",\n        }}>\n            <RestOfApp />\n        </PostHogProvider>\n    )\n}`}\n            </CodeSnippet>\n        </>\n    )\n}\n","import { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nfunction RubyInstallSnippet(): JSX.Element {\n    return <CodeSnippet language={Language.Bash}>gem \"posthog-ruby\"</CodeSnippet>\n}\n\nfunction RubySetupSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.Ruby}>\n            {`posthog = PostHog::Client.new({\n    api_key: \"${currentTeam?.api_token}\",\n    host: \"${apiHostOrigin()}\",\n    on_error: Proc.new { |status, msg| print msg }\n})`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallRubyInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install</h3>\n            <RubyInstallSnippet />\n            <h3>Configure</h3>\n            <RubySetupSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { JSInstallSnippet } from './js-web'\n\nfunction NextEnvVarsSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.Bash}>\n            {[`NEXT_PUBLIC_POSTHOG_KEY=${currentTeam?.api_token}`, `NEXT_PUBLIC_POSTHOG_HOST=${apiHostOrigin()}`].join(\n                '\\n'\n            )}\n        </CodeSnippet>\n    )\n}\n\nfunction NextPagesRouterCodeSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`// pages/_app.js\nimport posthog from \"posthog-js\"\nimport { PostHogProvider } from 'posthog-js/react'\n\nif (typeof window !== 'undefined') { // checks that we are client-side\n  posthog.init(process.env.NEXT_PUBLIC_POSTHOG_KEY, {\n    api_host: process.env.NEXT_PUBLIC_POSTHOG_HOST || 'https://app.posthog.com',\n    loaded: (posthog) => {\n      if (process.env.NODE_ENV === 'development') posthog.debug() // debug mode in development\n    },\n  })\n}\n\nexport default function App(\n    { Component, pageProps: { session, ...pageProps } }\n) {\n    return (\n        <>\n            <PostHogProvider client={posthog}>\n                <Component {...pageProps} />\n            </PostHogProvider>\n        </>\n    )\n}`}\n        </CodeSnippet>\n    )\n}\n\nfunction NextAppRouterCodeSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`// app/providers.js\n'use client'\nimport posthog from 'posthog-js'\nimport { PostHogProvider } from 'posthog-js/react'\n\nif (typeof window !== 'undefined') {\n  posthog.init(process.env.NEXT_PUBLIC_POSTHOG_KEY, {\n    api_host: process.env.NEXT_PUBLIC_POSTHOG_HOST,\n  })\n}\nexport function CSPostHogProvider({ children }) {\n    return <PostHogProvider client={posthog}>{children}</PostHogProvider>\n}`}\n        </CodeSnippet>\n    )\n}\n\nfunction NextAppRouterLayoutSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`// app/layout.js\nimport './globals.css'\nimport { CSPostHogProvider } from './providers'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <CSPostHogProvider>\n        <body>{children}</body>\n      </CSPostHogProvider>\n    </html>\n  )\n}`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallNextJSInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install posthog-js using your package manager</h3>\n            <JSInstallSnippet />\n            <h3>Add environment variables</h3>\n            <p>\n                Add your environment variables to your .env.local file and to your hosting provider (e.g. Vercel,\n                Netlify, AWS). You can find your project API key in your project settings.\n            </p>\n            <p className=\"italic\">\n                These values need to start with <code className=\"not-italic\">NEXT_PUBLIC_</code> to be accessible on the\n                client-side.\n            </p>\n            <NextEnvVarsSnippet />\n\n            <h3>Initialize</h3>\n            <h4>With App router</h4>\n            <p>\n                If your Next.js app to uses the <Link to=\"https://nextjs.org/docs/app\">app router</Link>, you can\n                integrate PostHog by creating a providers file in your app folder. This is because the posthog-js\n                library needs to be initialized on the client-side using the Next.js{' '}\n                <Link to=\"https://nextjs.org/docs/getting-started/react-essentials#client-components\" target=\"_blank\">\n                    <code>'use client'</code> directive\n                </Link>\n                .\n            </p>\n            <NextAppRouterCodeSnippet />\n            <p>\n                Afterwards, import the <code>PHProvider</code> component in your <code>app/layout.js</code> file and\n                wrap your app with it.\n            </p>\n            <NextAppRouterLayoutSnippet />\n            <h4>With Pages router</h4>\n            <p>\n                If your Next.js app uses the <Link to=\"https://nextjs.org/docs/pages\">pages router</Link>, you can\n                integrate PostHog at the root of your app (pages/_app.js).\n            </p>\n            <NextPagesRouterCodeSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { JSInstallSnippet } from './js-web'\n\nfunction ReactEnvVarsSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.Bash}>\n            {[\n                `REACT_APP_PUBLIC_POSTHOG_KEY=${currentTeam?.api_token}`,\n                `REACT_APP_PUBLIC_POSTHOG_HOST=${apiHostOrigin()}`,\n            ].join('\\n')}\n        </CodeSnippet>\n    )\n}\n\nfunction ReactSetupSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nimport { PostHogProvider} from 'posthog-js/react'\n\nconst options = {\n  api_host: process.env.REACT_APP_PUBLIC_POSTHOG_HOST,\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <PostHogProvider \n      apiKey={process.env.REACT_APP_PUBLIC_POSTHOG_KEY}\n      options={options}\n    >\n      <App />\n    </PostHogProvider>\n  </React.StrictMode>\n);`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallReactInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install the package</h3>\n            <JSInstallSnippet />\n            <h3>Add environment variables</h3>\n            <ReactEnvVarsSnippet />\n            <h3>Initialize</h3>\n            <p>\n                Integrate PostHog at the root of your app (<code>src/index.js</code> for the default{' '}\n                <code>create-react-app</code>).\n            </p>\n            <ReactSetupSnippet />\n        </>\n    )\n}\n","import { CodeSnippet, Language } from 'lib/components/CodeSnippet'\n\nimport { SDKInstallNodeInstructions } from '../sdk-install-instructions'\n\nfunction NodeCaptureSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`client.capture({\n    distinctId: 'test-id',\n    event: 'test-event'\n})\n\n// Send queued events immediately. Use for example in a serverless environment\n// where the program may terminate before everything is sent.\n// Use \\`client.flush()\\` instead if you still need to send more events or fetch feature flags.\nclient.shutdownAsync()`}\n        </CodeSnippet>\n    )\n}\n\nexport function ProductAnalyticsNodeInstructions(): JSX.Element {\n    return (\n        <>\n            <SDKInstallNodeInstructions />\n            <h3>Send an Event</h3>\n            <NodeCaptureSnippet />\n        </>\n    )\n}\n","import { CodeSnippet, Language } from 'lib/components/CodeSnippet'\n\nimport { SDKInstallRNInstructions } from '../sdk-install-instructions'\n\nexport function ProductAnalyticsRNInstructions(): JSX.Element {\n    return (\n        <>\n            <SDKInstallRNInstructions />\n            <h3 className=\"mt-4\">Optional: Send a manual event</h3>\n            <p>Our package will autocapture events for you, but you can manually define events, too!</p>\n            <CodeSnippet language={Language.JSX}>{`// With hooks\nimport { usePostHog } from 'posthog-react-native'\n\nconst MyComponent = () => {\n    const posthog = usePostHog()\n\n    useEffect(() => {\n        posthog.capture(\"MyComponent loaded\", { foo: \"bar\" })\n    }, [])\n}\n        `}</CodeSnippet>\n        </>\n    )\n}\n","import { useActions, useValues } from 'kea'\nimport { SESSION_REPLAY_MINIMUM_DURATION_OPTIONS } from 'lib/constants'\nimport { useEffect, useState } from 'react'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { AvailableFeature, ProductKey } from '~/types'\n\nimport { OnboardingBillingStep } from './OnboardingBillingStep'\nimport { OnboardingInviteTeammates } from './OnboardingInviteTeammates'\nimport { onboardingLogic, OnboardingStepKey } from './onboardingLogic'\nimport { OnboardingProductConfiguration } from './OnboardingProductConfiguration'\nimport { ProductConfigOption } from './onboardingProductConfigurationLogic'\nimport { OnboardingProductIntroduction } from './OnboardingProductIntroduction'\nimport { FeatureFlagsSDKInstructions } from './sdks/feature-flags/FeatureFlagsSDKInstructions'\nimport { ProductAnalyticsSDKInstructions } from './sdks/product-analytics/ProductAnalyticsSDKInstructions'\nimport { SDKs } from './sdks/SDKs'\nimport { SessionReplaySDKInstructions } from './sdks/session-replay/SessionReplaySDKInstructions'\nimport { SurveysSDKInstructions } from './sdks/surveys/SurveysSDKInstructions'\n\nexport const scene: SceneExport = {\n    component: Onboarding,\n    logic: onboardingLogic,\n}\n\n/**\n * Wrapper for custom onboarding content. This automatically includes billing, other products, and invite steps.\n */\nconst OnboardingWrapper = ({ children }: { children: React.ReactNode }): JSX.Element => {\n    const { currentOnboardingStep, shouldShowBillingStep, product, includeIntro } = useValues(onboardingLogic)\n    const { setAllOnboardingSteps } = useActions(onboardingLogic)\n    const [allSteps, setAllSteps] = useState<JSX.Element[]>([])\n\n    useEffect(() => {\n        createAllSteps()\n    }, [children])\n\n    useEffect(() => {\n        if (!allSteps.length) {\n            return\n        }\n        setAllOnboardingSteps(allSteps)\n    }, [allSteps])\n\n    if (!product || !children) {\n        return <></>\n    }\n\n    const createAllSteps = (): void => {\n        let steps = []\n        if (Array.isArray(children)) {\n            steps = [...children]\n        } else {\n            steps = [children as JSX.Element]\n        }\n        if (includeIntro) {\n            const IntroStep = <OnboardingProductIntroduction stepKey={OnboardingStepKey.PRODUCT_INTRO} />\n            steps = [IntroStep, ...steps]\n        }\n        if (shouldShowBillingStep) {\n            const BillingStep = <OnboardingBillingStep product={product} stepKey={OnboardingStepKey.PLANS} />\n            steps = [...steps, BillingStep]\n        }\n        const inviteTeammatesStep = <OnboardingInviteTeammates stepKey={OnboardingStepKey.INVITE_TEAMMATES} />\n        steps = [...steps, inviteTeammatesStep]\n        setAllSteps(steps)\n    }\n\n    return (currentOnboardingStep as JSX.Element) || <></>\n}\n\nconst ProductAnalyticsOnboarding = (): JSX.Element => {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <OnboardingWrapper>\n            <SDKs\n                usersAction=\"collecting events\"\n                sdkInstructionMap={ProductAnalyticsSDKInstructions}\n                stepKey={OnboardingStepKey.INSTALL}\n            />\n            <OnboardingProductConfiguration\n                stepKey={OnboardingStepKey.PRODUCT_CONFIGURATION}\n                options={[\n                    {\n                        title: 'Autocapture frontend interactions',\n                        description: `If you use our JavaScript or React Native libraries, we'll automagically \n                        capture frontend interactions like pageviews, clicks, and more. Fine-tune what you \n                        capture directly in your code snippet.`,\n                        teamProperty: 'autocapture_opt_out',\n                        value: !currentTeam?.autocapture_opt_out,\n                        type: 'toggle',\n                        inverseToggle: true,\n                    },\n                ]}\n            />\n        </OnboardingWrapper>\n    )\n}\nconst SessionReplayOnboarding = (): JSX.Element => {\n    const { hasAvailableFeature } = useValues(userLogic)\n    const configOptions: ProductConfigOption[] = [\n        {\n            type: 'toggle',\n            title: 'Capture console logs',\n            description: `Capture console logs as a part of user session recordings. \n                            Use the console logs alongside recordings to debug any issues with your app.`,\n            teamProperty: 'capture_console_log_opt_in',\n            value: true,\n        },\n        {\n            type: 'toggle',\n            title: 'Capture network performance',\n            description: `Capture performance and network information alongside recordings. Use the\n                            network requests and timings in the recording player to help you debug issues with your app.`,\n            teamProperty: 'capture_performance_opt_in',\n            value: true,\n        },\n    ]\n\n    if (hasAvailableFeature(AvailableFeature.REPLAY_RECORDING_DURATION_MINIMUM)) {\n        configOptions.push({\n            type: 'select',\n            title: 'Minimum session duration (seconds)',\n            description: `Only record sessions that are longer than the specified duration. \n                            Start with it low and increase it later if you're getting too many short sessions.`,\n            teamProperty: 'session_recording_minimum_duration_milliseconds',\n            value: null,\n            selectOptions: SESSION_REPLAY_MINIMUM_DURATION_OPTIONS,\n        })\n    }\n\n    return (\n        <OnboardingWrapper>\n            <SDKs\n                usersAction=\"recording sessions\"\n                sdkInstructionMap={SessionReplaySDKInstructions}\n                subtitle=\"Choose the framework your frontend is built on, or use our all-purpose JavaScript library. If you already have the snippet installed, you can skip this step!\"\n                stepKey={OnboardingStepKey.INSTALL}\n            />\n            <OnboardingProductConfiguration stepKey={OnboardingStepKey.PRODUCT_CONFIGURATION} options={configOptions} />\n        </OnboardingWrapper>\n    )\n}\nconst FeatureFlagsOnboarding = (): JSX.Element => {\n    return (\n        <OnboardingWrapper>\n            <SDKs\n                usersAction=\"loading flags & experiments\"\n                sdkInstructionMap={FeatureFlagsSDKInstructions}\n                subtitle=\"Choose the framework where you want to use feature flags and/or run experiments, or use our all-purpose JavaScript library. If you already have the snippet installed, you can skip this step!\"\n                stepKey={OnboardingStepKey.INSTALL}\n            />\n        </OnboardingWrapper>\n    )\n}\n\nconst SurveysOnboarding = (): JSX.Element => {\n    return (\n        <OnboardingWrapper>\n            <SDKs\n                usersAction=\"taking surveys\"\n                sdkInstructionMap={SurveysSDKInstructions}\n                subtitle=\"Choose the framework your frontend is built on, or use our all-purpose JavaScript library. If you already have the snippet installed, you can skip this step!\"\n                stepKey={OnboardingStepKey.INSTALL}\n            />\n        </OnboardingWrapper>\n    )\n}\n\nexport function Onboarding(): JSX.Element | null {\n    const { product } = useValues(onboardingLogic)\n\n    if (!product) {\n        return <></>\n    }\n    const onboardingViews = {\n        [ProductKey.PRODUCT_ANALYTICS]: ProductAnalyticsOnboarding,\n        [ProductKey.SESSION_REPLAY]: SessionReplayOnboarding,\n        [ProductKey.FEATURE_FLAGS]: FeatureFlagsOnboarding,\n        [ProductKey.SURVEYS]: SurveysOnboarding,\n    }\n    const OnboardingView = onboardingViews[product.type]\n\n    return <OnboardingView />\n}\n"],"names":[],"sourceRoot":""}