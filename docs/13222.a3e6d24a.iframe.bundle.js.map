{"version":3,"file":"13222.a3e6d24a.iframe.bundle.js","mappings":";AAuUA","sources":["webpack://posthog/./frontend/src/scenes/batch_exports/batchExportEditLogic.ts"],"sourcesContent":["import { actions, afterMount, connect, kea, key, listeners, path, props, selectors } from 'kea'\nimport { forms } from 'kea-forms'\nimport { beforeUnload, router } from 'kea-router'\nimport api from 'lib/api'\nimport { Dayjs, dayjs } from 'lib/dayjs'\nimport { Scene } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport {\n    BatchExportConfiguration,\n    BatchExportService,\n    BatchExportServiceBigQuery,\n    BatchExportServiceHTTP,\n    BatchExportServicePostgres,\n    BatchExportServiceRedshift,\n    BatchExportServiceS3,\n    BatchExportServiceSnowflake,\n    Breadcrumb,\n} from '~/types'\n\nimport type { batchExportsEditLogicType } from './batchExportEditLogicType'\nimport { batchExportLogic } from './batchExportLogic'\n\nexport type BatchExportsEditLogicProps = {\n    id: string\n}\n\nexport type BatchExportConfigurationForm = Omit<\n    BatchExportConfiguration,\n    'id' | 'destination' | 'start_at' | 'end_at'\n> &\n    Partial<BatchExportServicePostgres['config']> &\n    Partial<BatchExportServiceRedshift['config']> &\n    Partial<BatchExportServiceBigQuery['config']> &\n    Partial<BatchExportServiceS3['config']> &\n    Partial<BatchExportServiceSnowflake['config']> &\n    Partial<BatchExportServiceHTTP['config']> & {\n        destination: 'S3' | 'Snowflake' | 'Postgres' | 'BigQuery' | 'Redshift' | 'HTTP'\n        start_at: Dayjs | null\n        end_at: Dayjs | null\n        json_config_file?: File[] | null\n    }\n\nexport const batchExportFormFields = (\n    isNew: boolean,\n    { name, destination, interval, start_at, end_at, paused, ...config }: BatchExportConfigurationForm,\n    { isPipeline }: { isPipeline?: boolean } = {}\n): Record<string, any> => {\n    // Important! All fields that are required must be checked here as it is used also to sanitise the existing\n\n    return {\n        name: !name && !isPipeline ? 'Please enter a name' : '', // In pipeline UI the name is in the top bar\n        destination: !destination ? 'Please select a destination' : '',\n        interval: !interval ? 'Please select a frequency' : '',\n        model: !name && !isPipeline ? 'Please choose a model' : '',\n        paused: '',\n        start_at: '',\n        end_at: '',\n        ...(destination === 'Postgres'\n            ? {\n                  user: isNew ? (!config.user ? 'This field is required' : '') : '',\n                  password: isNew ? (!config.password ? 'This field is required' : '') : '',\n                  host: !config.host ? 'This field is required' : '',\n                  port: !config.port ? 'This field is required' : '',\n                  database: !config.database ? 'This field is required' : '',\n                  schema: !config.schema ? 'This field is required' : '',\n                  table_name: !config.table_name ? 'This field is required' : '',\n                  has_self_signed_cert: false,\n                  exclude_events: '',\n                  include_events: '',\n              }\n            : destination === 'Redshift'\n            ? {\n                  user: isNew ? (!config.user ? 'This field is required' : '') : '',\n                  password: isNew ? (!config.password ? 'This field is required' : '') : '',\n                  host: !config.host ? 'This field is required' : '',\n                  port: !config.port ? 'This field is required' : '',\n                  database: !config.database ? 'This field is required' : '',\n                  schema: !config.schema ? 'This field is required' : '',\n                  table_name: !config.table_name ? 'This field is required' : '',\n                  properties_data_type: '',\n                  exclude_events: '',\n                  include_events: '',\n              }\n            : destination === 'S3'\n            ? {\n                  bucket_name: !config.bucket_name ? 'This field is required' : '',\n                  region: !config.region ? 'This field is required' : '',\n                  prefix: !config.prefix ? 'This field is required' : '',\n                  aws_access_key_id: isNew ? (!config.aws_access_key_id ? 'This field is required' : '') : '',\n                  aws_secret_access_key: isNew ? (!config.aws_secret_access_key ? 'This field is required' : '') : '',\n                  compression: '',\n                  encryption: '',\n                  file_format: isNew ? (!config.file_format ? 'This field is required' : '') : '',\n                  kms_key_id: !config.kms_key_id && config.encryption == 'aws:kms' ? 'This field is required' : '',\n                  exclude_events: '',\n                  include_events: '',\n                  endpoint_url: null,\n              }\n            : destination === 'BigQuery'\n            ? {\n                  json_config_file: isNew\n                      ? !config.json_config_file\n                          ? 'This field is required'\n                          : !config.project_id ||\n                            !config.private_key ||\n                            !config.private_key_id ||\n                            !config.client_email ||\n                            !config.token_uri\n                          ? 'The config file is not valid'\n                          : ''\n                      : '',\n                  dataset_id: !config.dataset_id ? 'This field is required' : '',\n                  table_id: !config.table_id ? 'This field is required' : '',\n                  exclude_events: '',\n                  include_events: '',\n                  use_json_type: '',\n              }\n            : destination === 'HTTP'\n            ? {\n                  url: !config.url ? 'This field is required' : '',\n                  token: !config.token ? 'This field is required' : '',\n                  exclude_events: '',\n                  include_events: '',\n              }\n            : destination === 'Snowflake'\n            ? {\n                  account: !config.account ? 'This field is required' : '',\n                  database: !config.database ? 'This field is required' : '',\n                  warehouse: !config.warehouse ? 'This field is required' : '',\n                  user: isNew ? (!config.user ? 'This field is required' : '') : '',\n                  password: isNew ? (!config.password ? 'This field is required' : '') : '',\n                  schema: !config.schema ? 'This field is required' : '',\n                  table_name: !config.table_name ? 'This field is required' : '',\n                  role: '',\n                  exclude_events: '',\n                  include_events: '',\n              }\n            : {}),\n    }\n}\n\nexport const batchExportsEditLogic = kea<batchExportsEditLogicType>([\n    props({} as BatchExportsEditLogicProps),\n    key(({ id }) => id),\n    path((key) => ['scenes', 'batch_exports', 'batchExportsEditLogic', key]),\n    connect((props: BatchExportsEditLogicProps) => ({\n        values: [batchExportLogic(props), ['batchExportConfig', 'batchExportConfigLoading']],\n        actions: [batchExportLogic(props), ['loadBatchExportConfig', 'loadBatchExportConfigSuccess']],\n    })),\n\n    actions({\n        cancelEditing: true,\n    }),\n\n    forms(({ props, actions }) => ({\n        batchExportConfigForm: {\n            defaults: {\n                name: '',\n                model: 'events',\n            } as BatchExportConfigurationForm,\n            errors: (form) => batchExportFormFields(props.id === 'new', form),\n            submit: async ({ name, destination, interval, start_at, end_at, paused, model, ...config }) => {\n                const destinationObject: BatchExportService =\n                    destination === 'Postgres'\n                        ? ({\n                              type: 'Postgres',\n                              config: config,\n                          } as unknown as BatchExportServicePostgres)\n                        : destination === 'S3'\n                        ? ({\n                              type: 'S3',\n                              config: config,\n                          } as unknown as BatchExportServiceS3)\n                        : destination === 'Redshift'\n                        ? ({\n                              type: 'Redshift',\n                              config: config,\n                          } as unknown as BatchExportServiceRedshift)\n                        : destination === 'BigQuery'\n                        ? ({\n                              type: 'BigQuery',\n                              config: config,\n                          } as unknown as BatchExportServiceBigQuery)\n                        : destination === 'HTTP'\n                        ? ({\n                              type: 'HTTP',\n                              config: config,\n                          } as unknown as BatchExportServiceHTTP)\n                        : ({\n                              type: 'Snowflake',\n                              config: config,\n                          } as unknown as BatchExportServiceSnowflake)\n\n                const data: Omit<BatchExportConfiguration, 'id' | 'created_at' | 'team_id'> = {\n                    paused,\n                    name,\n                    interval,\n                    model,\n                    start_at: start_at?.toISOString() ?? null,\n                    end_at: end_at?.toISOString() ?? null,\n                    destination: destinationObject,\n                }\n\n                const result =\n                    props.id === 'new'\n                        ? await api.batchExports.create(data)\n                        : await api.batchExports.update(props.id, data)\n\n                await new Promise((resolve) => setTimeout(resolve, 1000))\n\n                actions.resetBatchExportConfigForm()\n                router.actions.replace(urls.batchExport(result.id))\n\n                return\n            },\n        },\n    })),\n\n    listeners(({ values, props, actions }) => ({\n        cancelEditing: () => {\n            if (values.isNew) {\n                router.actions.push(urls.batchExports())\n            } else {\n                router.actions.push(urls.batchExport(props.id))\n            }\n        },\n\n        setBatchExportConfigFormValue: async ({ name, value }) => {\n            if (name[0] === 'json_config_file' && value) {\n                try {\n                    const loadedFile: string = await new Promise((resolve, reject) => {\n                        const filereader = new FileReader()\n                        filereader.onload = (e) => resolve(e.target?.result as string)\n                        filereader.onerror = (e) => reject(e)\n                        filereader.readAsText(value[0])\n                    })\n                    const jsonConfig = JSON.parse(loadedFile)\n                    actions.setBatchExportConfigFormValues({\n                        ...values.batchExportConfigForm,\n                        project_id: jsonConfig.project_id,\n                        private_key: jsonConfig.private_key,\n                        private_key_id: jsonConfig.private_key_id,\n                        client_email: jsonConfig.client_email,\n                        token_uri: jsonConfig.token_uri,\n                    })\n                } catch (e) {\n                    actions.setBatchExportConfigFormManualErrors({\n                        json_config_file: 'The config file is not valid',\n                    })\n                }\n            }\n        },\n\n        loadBatchExportConfigSuccess: ({ batchExportConfig }) => {\n            if (!batchExportConfig) {\n                return\n            }\n\n            const destination = batchExportConfig.destination.type\n\n            const transformedConfig: BatchExportConfigurationForm = {\n                ...batchExportConfig,\n                destination,\n                start_at: batchExportConfig.start_at ? dayjs(batchExportConfig.start_at) : null,\n                end_at: batchExportConfig.end_at ? dayjs(batchExportConfig.end_at) : null,\n                ...batchExportConfig.destination.config,\n            }\n\n            // Filter out any values that aren't part of our from\n\n            const validFormFields = Object.keys(batchExportFormFields(props.id === 'new', transformedConfig))\n\n            Object.keys(transformedConfig).forEach((key) => {\n                if (!validFormFields.includes(key)) {\n                    delete transformedConfig[key]\n                }\n            })\n\n            actions.resetBatchExportConfigForm(transformedConfig)\n        },\n    })),\n\n    selectors({\n        isNew: [() => [(_, props) => props], (props): boolean => props.id === 'new'],\n        breadcrumbs: [\n            (s) => [s.batchExportConfig, s.isNew],\n            (config, isNew): Breadcrumb[] => [\n                {\n                    key: Scene.BatchExports,\n                    name: 'Batch Exports',\n                    path: urls.batchExports(),\n                },\n                ...(isNew\n                    ? [\n                          {\n                              key: 'new',\n                              name: 'New',\n                          },\n                      ]\n                    : [\n                          {\n                              key: config?.id ?? 'loading',\n                              name: config?.name,\n                              path: config?.id ? urls.batchExport(config.id) : undefined,\n                          },\n                          {\n                              key: 'edit',\n                              name: 'Edit',\n                          },\n                      ]),\n            ],\n        ],\n    }),\n\n    afterMount(({ values, actions }) => {\n        if (!values.isNew) {\n            if (values.batchExportConfig) {\n                actions.loadBatchExportConfigSuccess(values.batchExportConfig)\n            } else {\n                actions.loadBatchExportConfig()\n            }\n        }\n    }),\n\n    beforeUnload(({ values }) => ({\n        enabled: () => values.batchExportConfigFormChanged,\n        message: `Leave?\\nChanges you made will be discarded.`,\n    })),\n])\n"],"names":[],"sourceRoot":""}