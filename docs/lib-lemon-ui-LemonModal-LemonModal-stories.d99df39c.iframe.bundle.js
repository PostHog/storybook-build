"use strict";(self.webpackChunkposthog=self.webpackChunkposthog||[]).push([[6646],{"./frontend/src/lib/lemon-ui/LemonModal/LemonModal.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Inline:()=>Inline,WithCustomContent:()=>WithCustomContent,WithoutContent:()=>WithoutContent,_LemonModal:()=>_LemonModal,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var lib_lemon_ui_LemonButton__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./frontend/src/lib/lemon-ui/LemonButton/index.ts"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),_LemonModal__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./frontend/src/lib/lemon-ui/LemonModal/LemonModal.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");let meta={title:"Lemon UI/Lemon Modal",component:_LemonModal__WEBPACK_IMPORTED_MODULE_2__.fQ,tags:["autodocs"]},__WEBPACK_DEFAULT_EXPORT__=meta,_LemonModal=props=>{let[isOpen,setIsOpen]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(lib_lemon_ui_LemonButton__WEBPACK_IMPORTED_MODULE_0__.J,{type:"primary",onClick:()=>setIsOpen(!0),children:"Show control panel"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(_LemonModal__WEBPACK_IMPORTED_MODULE_2__.fQ,{...props,isOpen:isOpen,onClose:()=>setIsOpen(!1),title:"My Amazing Modal",description:"Helpful description content here",footer:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div",{className:"flex-1",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(lib_lemon_ui_LemonButton__WEBPACK_IMPORTED_MODULE_0__.J,{type:"secondary",children:"Tertiary action"})}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(lib_lemon_ui_LemonButton__WEBPACK_IMPORTED_MODULE_0__.J,{type:"secondary",children:"Secondary"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(lib_lemon_ui_LemonButton__WEBPACK_IMPORTED_MODULE_0__.J,{type:"primary",children:"Primary"})]}),children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("p",{children:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("p",{children:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("p",{children:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."})]})]})},WithoutContent=props=>{let[isOpen,setIsOpen]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(lib_lemon_ui_LemonButton__WEBPACK_IMPORTED_MODULE_0__.J,{type:"primary",onClick:()=>setIsOpen(!0),children:"Show control panel"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_LemonModal__WEBPACK_IMPORTED_MODULE_2__.fQ,{...props,isOpen:isOpen,onClose:()=>setIsOpen(!1),title:"I don't have content",description:"But thats okay",footer:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div",{className:"flex-1",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(lib_lemon_ui_LemonButton__WEBPACK_IMPORTED_MODULE_0__.J,{type:"secondary",children:"Tertiary action"})}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(lib_lemon_ui_LemonButton__WEBPACK_IMPORTED_MODULE_0__.J,{type:"secondary",children:"Secondary"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(lib_lemon_ui_LemonButton__WEBPACK_IMPORTED_MODULE_0__.J,{type:"primary",children:"Primary"})]})})]})},Inline=()=>{let[isOpen,setIsOpen]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div",{className:"bg-default p-4",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_LemonModal__WEBPACK_IMPORTED_MODULE_2__.fQ,{isOpen:isOpen,onClose:()=>setIsOpen(!1),title:"Inline Modals",description:"You can display modal inline (i.e. just the content, no actual modal. This is mostly useful for creating Storybooks of modals",inline:!0,footer:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(lib_lemon_ui_LemonButton__WEBPACK_IMPORTED_MODULE_0__.J,{type:"secondary",children:"Amazing"})}),children:"If you use this pattern in a Story for a modal, it is recommended to wrap it in a div with a dark background (like this example)"})})},WithCustomContent=()=>{let[isOpen,setIsOpen]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div",{className:"bg-default p-4",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_LemonModal__WEBPACK_IMPORTED_MODULE_2__.fQ,{isOpen:isOpen,onClose:()=>setIsOpen(!1),title:"Inline Modals",description:"You can display modal inline (i.e. just the content, no actual modal. This is mostly useful for creating Storybooks of modals",inline:!0,simple:!0,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div",{className:"bg-muted-alt rounded",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_LemonModal__WEBPACK_IMPORTED_MODULE_2__.fQ.Header,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("h3",{children:"I am a custom header"})}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(_LemonModal__WEBPACK_IMPORTED_MODULE_2__.fQ.Content,{children:["In some situations it may be necessary to have greater control over the modal contents. The most common use case is ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("b",{children:"Forms with submit buttons in the footer"}),". Using the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("code",{children:"simple"})," ","property on the modal you can implement the Header, Footer and Content components yourself. See this story's code for the example"]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_LemonModal__WEBPACK_IMPORTED_MODULE_2__.fQ.Footer,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("p",{children:"I am a custom footer"})})]})})})};_LemonModal.parameters={..._LemonModal.parameters,docs:{..._LemonModal.parameters?.docs,source:{originalSource:'(props: LemonModalProps) => {\n  const [isOpen, setIsOpen] = useState(false);\n  return <>\n            <LemonButton type="primary" onClick={() => setIsOpen(true)}>\n                Show control panel\n            </LemonButton>\n            <LemonModal {...props} isOpen={isOpen} onClose={() => setIsOpen(false)} title="My Amazing Modal" description="Helpful description content here" footer={<>\n                        <div className="flex-1">\n                            <LemonButton type="secondary">Tertiary action</LemonButton>\n                        </div>\n                        <LemonButton type="secondary">Secondary</LemonButton>\n                        <LemonButton type="primary">Primary</LemonButton>\n                    </>}>\n                <p>\n                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore\n                    et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n                    aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\n                    cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n                    culpa qui officia deserunt mollit anim id est laborum.\n                </p>\n\n                <p>\n                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore\n                    et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n                    aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\n                    cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n                    culpa qui officia deserunt mollit anim id est laborum.\n                </p>\n\n                <p>\n                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore\n                    et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n                    aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\n                    cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n                    culpa qui officia deserunt mollit anim id est laborum.\n                </p>\n            </LemonModal>\n        </>;\n}',..._LemonModal.parameters?.docs?.source}}},WithoutContent.parameters={...WithoutContent.parameters,docs:{...WithoutContent.parameters?.docs,source:{originalSource:'(props: LemonModalProps) => {\n  const [isOpen, setIsOpen] = useState(false);\n  return <>\n            <LemonButton type="primary" onClick={() => setIsOpen(true)}>\n                Show control panel\n            </LemonButton>\n            <LemonModal {...props} isOpen={isOpen} onClose={() => setIsOpen(false)} title="I don\'t have content" description="But thats okay" footer={<>\n                        <div className="flex-1">\n                            <LemonButton type="secondary">Tertiary action</LemonButton>\n                        </div>\n                        <LemonButton type="secondary">Secondary</LemonButton>\n                        <LemonButton type="primary">Primary</LemonButton>\n                    </>} />\n        </>;\n}',...WithoutContent.parameters?.docs?.source}}},Inline.parameters={...Inline.parameters,docs:{...Inline.parameters?.docs,source:{originalSource:'() => {\n  const [isOpen, setIsOpen] = useState(false);\n  return <div className="bg-default p-4">\n            <LemonModal isOpen={isOpen} onClose={() => setIsOpen(false)} title="Inline Modals" description="You can display modal inline (i.e. just the content, no actual modal. This is mostly useful for creating Storybooks of modals" inline footer={<>\n                        <LemonButton type="secondary">Amazing</LemonButton>\n                    </>}>\n                If you use this pattern in a Story for a modal, it is recommended to wrap it in a div with a dark\n                background (like this example)\n            </LemonModal>\n        </div>;\n}',...Inline.parameters?.docs?.source}}},WithCustomContent.parameters={...WithCustomContent.parameters,docs:{...WithCustomContent.parameters?.docs,source:{originalSource:'() => {\n  const [isOpen, setIsOpen] = useState(false);\n  return <div className="bg-default p-4">\n            <LemonModal isOpen={isOpen} onClose={() => setIsOpen(false)} title="Inline Modals" description="You can display modal inline (i.e. just the content, no actual modal. This is mostly useful for creating Storybooks of modals" inline simple>\n                <div className="bg-muted-alt rounded">\n                    <LemonModal.Header>\n                        <h3>I am a custom header</h3>\n                    </LemonModal.Header>\n                    <LemonModal.Content>\n                        In some situations it may be necessary to have greater control over the modal contents. The most\n                        common use case is <b>Forms with submit buttons in the footer</b>. Using the <code>simple</code>{\' \'}\n                        property on the modal you can implement the Header, Footer and Content components yourself. See\n                        this story\'s code for the example\n                    </LemonModal.Content>\n                    <LemonModal.Footer>\n                        <p>I am a custom footer</p>\n                    </LemonModal.Footer>\n                </div>\n            </LemonModal>\n        </div>;\n}',...WithCustomContent.parameters?.docs?.source}}};let __namedExportsOrder=["_LemonModal","WithoutContent","Inline","WithCustomContent"]}}]);