"use strict";(self.webpackChunkposthog=self.webpackChunkposthog||[]).push([[12398],{"./frontend/src/lib/lemon-ui/LemonTable/LemonTable.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Basic:()=>Basic,Embedded:()=>Embedded,Empty:()=>Empty,EmptyLoading:()=>EmptyLoading,EmptyLoadingWithManySkeletonRows:()=>EmptyLoadingWithManySkeletonRows,Grouped:()=>Grouped,Loading:()=>Loading,PaginatedAutomatically:()=>PaginatedAutomatically,Small:()=>Small,Stealth:()=>Stealth,WithColorCodedRows:()=>WithColorCodedRows,WithExpandableRows:()=>WithExpandableRows,WithFooter:()=>WithFooter,WithHighlightedRows:()=>WithHighlightedRows,WithMandatorySorting:()=>WithMandatorySorting,WithStickyFirstColumn:()=>WithStickyFirstColumn,WithoutHeader:()=>WithoutHeader,WithoutUppercasingInHeader:()=>WithoutUppercasingInHeader,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),_LemonButton__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./frontend/src/lib/lemon-ui/LemonButton/index.ts"),_LemonTable__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./frontend/src/lib/lemon-ui/LemonTable/LemonTable.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");let meta={title:"Lemon UI/Lemon Table",component:_LemonTable__WEBPACK_IMPORTED_MODULE_2__.g,tags:["autodocs"]},__WEBPACK_DEFAULT_EXPORT__=meta,BasicTemplate=props=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_LemonTable__WEBPACK_IMPORTED_MODULE_2__.g,{...props,columns:[{title:"Name",dataIndex:"name",sorter:(a,b)=>a.name.split(" ")[1].localeCompare(b.name.split(" ")[1])},{title:"Occupation",dataIndex:"occupation",tooltip:"What they are primarily working on.",sorter:(a,b)=>a.occupation.localeCompare(b.occupation)}],dataSource:[{name:"Werner C.",occupation:"Engineer"},{name:"Ursula Z.",occupation:"Retired"},{name:"Ludwig A.",occupation:"Painter"},{name:"Arnold S.",occupation:"Body-builder"},{name:"Franz B.",occupation:"Teacher"}]}),EmptyTemplate=props=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_LemonTable__WEBPACK_IMPORTED_MODULE_2__.g,{...props,columns:[{title:"Name",dataIndex:"name"},{title:"Occupation",dataIndex:"occupation"}],dataSource:[]}),Basic=BasicTemplate.bind({});Basic.args={};let Grouped=(props=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_LemonTable__WEBPACK_IMPORTED_MODULE_2__.g,{...props,columns:[{children:[{title:"Breakdown",dataIndex:"name"}]},{title:"1. Pageview",children:[{title:"Completed",render:(_,record)=>record.stepResults[0][0]},{title:"Dropped off",render:(_,record)=>record.stepResults[0][1]}]},{title:"2. Signup",children:[{title:"Completed",render:(_,record)=>record.stepResults[1][0]},{title:"Dropped off",render:(_,record)=>record.stepResults[1][1]}]}],dataSource:[{name:"United States",stepResults:[[4325,0],[4324,1]]},{name:"France",stepResults:[[53,0],[12,41]]},{name:"Germany",stepResults:[[92,0],[1,91]]}]})).bind({});Grouped.args={};let Empty=EmptyTemplate.bind({});Empty.args={};let PaginatedAutomatically=BasicTemplate.bind({});PaginatedAutomatically.args={nouns:["person","people"],pagination:{pageSize:3}};let WithExpandableRows=BasicTemplate.bind({});WithExpandableRows.args={expandable:{rowExpandable:record=>"Retired"!==record.occupation,expandedRowRender:function RenderCow(){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("img",{src:"https://c.tenor.com/WAFH6TX2VIYAAAAC/polish-cow.gif"})}}};let Small=BasicTemplate.bind({});Small.args={size:"small"};let Embedded=BasicTemplate.bind({});Embedded.args={embedded:!0};let Stealth=BasicTemplate.bind({});Stealth.args={stealth:!0};let Loading=BasicTemplate.bind({});Loading.args={loading:!0},Loading.parameters={testOptions:{waitForLoadersToDisappear:!1,waitForSelector:".LemonTableLoader"}};let EmptyLoading=EmptyTemplate.bind({});EmptyLoading.args={loading:!0},EmptyLoading.parameters={testOptions:{waitForLoadersToDisappear:!1,waitForSelector:".LemonTableLoader"}};let EmptyLoadingWithManySkeletonRows=EmptyTemplate.bind({});EmptyLoadingWithManySkeletonRows.args={loading:!0,loadingSkeletonRows:10},EmptyLoadingWithManySkeletonRows.parameters={testOptions:{waitForLoadersToDisappear:!1,waitForSelector:".LemonTableLoader"}};let WithoutHeader=BasicTemplate.bind({});WithoutHeader.args={showHeader:!1};let WithoutUppercasingInHeader=BasicTemplate.bind({});WithoutUppercasingInHeader.args={uppercaseHeader:!1};let WithFooter=BasicTemplate.bind({});WithFooter.args={footer:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div",{className:"flex items-center m-2",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_LemonButton__WEBPACK_IMPORTED_MODULE_1__.J,{center:!0,fullWidth:!0,children:"Load more rows"})})})};let WithColorCodedRows=BasicTemplate.bind({});WithColorCodedRows.args={rowRibbonColor:_ref=>{let{occupation}=_ref;return"Engineer"===occupation?"var(--success)":"Retired"===occupation?"var(--warning)":"Body-builder"===occupation?"var(--danger)":null}};let WithHighlightedRows=BasicTemplate.bind({});WithHighlightedRows.args={rowStatus:_ref2=>{let{occupation}=_ref2;return["Retired","Body-builder"].includes(occupation)?"highlighted":null}};let WithMandatorySorting=BasicTemplate.bind({});WithMandatorySorting.args={defaultSorting:{columnKey:"name",order:1},noSortingCancellation:!0};let WithStickyFirstColumn=()=>((0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{let scrollableInner=document.querySelector("#story--lemon-ui-lemon-table--with-sticky-first-column .scrollable__inner");scrollableInner&&(scrollableInner.scrollLeft=20)},[]),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_LemonTable__WEBPACK_IMPORTED_MODULE_2__.g,{className:"max-w-100",firstColumnSticky:!0,columns:[{title:"Name",dataIndex:"name",sorter:(a,b)=>a.name.split(" ")[1].localeCompare(b.name.split(" ")[1])},{title:"Occupation",dataIndex:"occupation",tooltip:"What they are primarily working on.",sorter:(a,b)=>a.occupation.localeCompare(b.occupation)},{title:"Age",key:"age",render:(_,person)=>`${12*person.name.length} years`},{title:"Zodiac sign",key:"zodiac",render:()=>"Gemini"},{title:"Favorite color",key:"color",render:(_,person)=>"Engineer"===person.occupation?"Blue":"Red"}],dataSource:[{name:"Werner C.",occupation:"Engineer"},{name:"Ursula Z.",occupation:"Retired"},{name:"Ludwig A.",occupation:"Painter"},{name:"Arnold S.",occupation:"Body-builder"},{name:"Franz B.",occupation:"Teacher"}]}));Basic.parameters={...Basic.parameters,docs:{...Basic.parameters?.docs,source:{originalSource:"(props: LemonTableProps<MockPerson>) => {\n  return <LemonTable {...props} columns={[{\n    title: 'Name',\n    dataIndex: 'name',\n    sorter: (a, b) => a.name.split(' ')[1].localeCompare(b.name.split(' ')[1])\n  }, {\n    title: 'Occupation',\n    dataIndex: 'occupation',\n    tooltip: 'What they are primarily working on.',\n    sorter: (a, b) => a.occupation.localeCompare(b.occupation)\n  }]} dataSource={([{\n    name: 'Werner C.',\n    occupation: 'Engineer'\n  }, {\n    name: 'Ursula Z.',\n    occupation: 'Retired'\n  }, {\n    name: 'Ludwig A.',\n    occupation: 'Painter'\n  }, {\n    name: 'Arnold S.',\n    occupation: 'Body-builder'\n  }, {\n    name: 'Franz B.',\n    occupation: 'Teacher'\n  }] as MockPerson[])} />;\n}",...Basic.parameters?.docs?.source}}},Grouped.parameters={...Grouped.parameters,docs:{...Grouped.parameters?.docs,source:{originalSource:"(props: LemonTableProps<MockFunnelSeries>) => {\n  return <LemonTable {...props} columns={[{\n    children: [{\n      title: 'Breakdown',\n      dataIndex: 'name'\n    }]\n  }, {\n    title: '1. Pageview',\n    children: [{\n      title: 'Completed',\n      render: (_, record) => record.stepResults[0][0]\n    }, {\n      title: 'Dropped off',\n      render: (_, record) => record.stepResults[0][1]\n    }]\n  }, {\n    title: '2. Signup',\n    children: [{\n      title: 'Completed',\n      render: (_, record) => record.stepResults[1][0]\n    }, {\n      title: 'Dropped off',\n      render: (_, record) => record.stepResults[1][1]\n    }]\n  }]} dataSource={([{\n    name: 'United States',\n    stepResults: [[4325, 0], [4324, 1]]\n  }, {\n    name: 'France',\n    stepResults: [[53, 0], [12, 41]]\n  }, {\n    name: 'Germany',\n    stepResults: [[92, 0], [1, 91]]\n  }] as MockFunnelSeries[])} />;\n}",...Grouped.parameters?.docs?.source}}},Empty.parameters={...Empty.parameters,docs:{...Empty.parameters?.docs,source:{originalSource:"(props: LemonTableProps<Record<string, any>>) => {\n  return <LemonTable {...props} columns={[{\n    title: 'Name',\n    dataIndex: 'name'\n  }, {\n    title: 'Occupation',\n    dataIndex: 'occupation'\n  }]} dataSource={[]} />;\n}",...Empty.parameters?.docs?.source}}},PaginatedAutomatically.parameters={...PaginatedAutomatically.parameters,docs:{...PaginatedAutomatically.parameters?.docs,source:{originalSource:"(props: LemonTableProps<MockPerson>) => {\n  return <LemonTable {...props} columns={[{\n    title: 'Name',\n    dataIndex: 'name',\n    sorter: (a, b) => a.name.split(' ')[1].localeCompare(b.name.split(' ')[1])\n  }, {\n    title: 'Occupation',\n    dataIndex: 'occupation',\n    tooltip: 'What they are primarily working on.',\n    sorter: (a, b) => a.occupation.localeCompare(b.occupation)\n  }]} dataSource={([{\n    name: 'Werner C.',\n    occupation: 'Engineer'\n  }, {\n    name: 'Ursula Z.',\n    occupation: 'Retired'\n  }, {\n    name: 'Ludwig A.',\n    occupation: 'Painter'\n  }, {\n    name: 'Arnold S.',\n    occupation: 'Body-builder'\n  }, {\n    name: 'Franz B.',\n    occupation: 'Teacher'\n  }] as MockPerson[])} />;\n}",...PaginatedAutomatically.parameters?.docs?.source}}},WithExpandableRows.parameters={...WithExpandableRows.parameters,docs:{...WithExpandableRows.parameters?.docs,source:{originalSource:"(props: LemonTableProps<MockPerson>) => {\n  return <LemonTable {...props} columns={[{\n    title: 'Name',\n    dataIndex: 'name',\n    sorter: (a, b) => a.name.split(' ')[1].localeCompare(b.name.split(' ')[1])\n  }, {\n    title: 'Occupation',\n    dataIndex: 'occupation',\n    tooltip: 'What they are primarily working on.',\n    sorter: (a, b) => a.occupation.localeCompare(b.occupation)\n  }]} dataSource={([{\n    name: 'Werner C.',\n    occupation: 'Engineer'\n  }, {\n    name: 'Ursula Z.',\n    occupation: 'Retired'\n  }, {\n    name: 'Ludwig A.',\n    occupation: 'Painter'\n  }, {\n    name: 'Arnold S.',\n    occupation: 'Body-builder'\n  }, {\n    name: 'Franz B.',\n    occupation: 'Teacher'\n  }] as MockPerson[])} />;\n}",...WithExpandableRows.parameters?.docs?.source}}},Small.parameters={...Small.parameters,docs:{...Small.parameters?.docs,source:{originalSource:"(props: LemonTableProps<MockPerson>) => {\n  return <LemonTable {...props} columns={[{\n    title: 'Name',\n    dataIndex: 'name',\n    sorter: (a, b) => a.name.split(' ')[1].localeCompare(b.name.split(' ')[1])\n  }, {\n    title: 'Occupation',\n    dataIndex: 'occupation',\n    tooltip: 'What they are primarily working on.',\n    sorter: (a, b) => a.occupation.localeCompare(b.occupation)\n  }]} dataSource={([{\n    name: 'Werner C.',\n    occupation: 'Engineer'\n  }, {\n    name: 'Ursula Z.',\n    occupation: 'Retired'\n  }, {\n    name: 'Ludwig A.',\n    occupation: 'Painter'\n  }, {\n    name: 'Arnold S.',\n    occupation: 'Body-builder'\n  }, {\n    name: 'Franz B.',\n    occupation: 'Teacher'\n  }] as MockPerson[])} />;\n}",...Small.parameters?.docs?.source}}},Embedded.parameters={...Embedded.parameters,docs:{...Embedded.parameters?.docs,source:{originalSource:"(props: LemonTableProps<MockPerson>) => {\n  return <LemonTable {...props} columns={[{\n    title: 'Name',\n    dataIndex: 'name',\n    sorter: (a, b) => a.name.split(' ')[1].localeCompare(b.name.split(' ')[1])\n  }, {\n    title: 'Occupation',\n    dataIndex: 'occupation',\n    tooltip: 'What they are primarily working on.',\n    sorter: (a, b) => a.occupation.localeCompare(b.occupation)\n  }]} dataSource={([{\n    name: 'Werner C.',\n    occupation: 'Engineer'\n  }, {\n    name: 'Ursula Z.',\n    occupation: 'Retired'\n  }, {\n    name: 'Ludwig A.',\n    occupation: 'Painter'\n  }, {\n    name: 'Arnold S.',\n    occupation: 'Body-builder'\n  }, {\n    name: 'Franz B.',\n    occupation: 'Teacher'\n  }] as MockPerson[])} />;\n}",...Embedded.parameters?.docs?.source}}},Stealth.parameters={...Stealth.parameters,docs:{...Stealth.parameters?.docs,source:{originalSource:"(props: LemonTableProps<MockPerson>) => {\n  return <LemonTable {...props} columns={[{\n    title: 'Name',\n    dataIndex: 'name',\n    sorter: (a, b) => a.name.split(' ')[1].localeCompare(b.name.split(' ')[1])\n  }, {\n    title: 'Occupation',\n    dataIndex: 'occupation',\n    tooltip: 'What they are primarily working on.',\n    sorter: (a, b) => a.occupation.localeCompare(b.occupation)\n  }]} dataSource={([{\n    name: 'Werner C.',\n    occupation: 'Engineer'\n  }, {\n    name: 'Ursula Z.',\n    occupation: 'Retired'\n  }, {\n    name: 'Ludwig A.',\n    occupation: 'Painter'\n  }, {\n    name: 'Arnold S.',\n    occupation: 'Body-builder'\n  }, {\n    name: 'Franz B.',\n    occupation: 'Teacher'\n  }] as MockPerson[])} />;\n}",...Stealth.parameters?.docs?.source}}},Loading.parameters={...Loading.parameters,docs:{...Loading.parameters?.docs,source:{originalSource:"(props: LemonTableProps<MockPerson>) => {\n  return <LemonTable {...props} columns={[{\n    title: 'Name',\n    dataIndex: 'name',\n    sorter: (a, b) => a.name.split(' ')[1].localeCompare(b.name.split(' ')[1])\n  }, {\n    title: 'Occupation',\n    dataIndex: 'occupation',\n    tooltip: 'What they are primarily working on.',\n    sorter: (a, b) => a.occupation.localeCompare(b.occupation)\n  }]} dataSource={([{\n    name: 'Werner C.',\n    occupation: 'Engineer'\n  }, {\n    name: 'Ursula Z.',\n    occupation: 'Retired'\n  }, {\n    name: 'Ludwig A.',\n    occupation: 'Painter'\n  }, {\n    name: 'Arnold S.',\n    occupation: 'Body-builder'\n  }, {\n    name: 'Franz B.',\n    occupation: 'Teacher'\n  }] as MockPerson[])} />;\n}",...Loading.parameters?.docs?.source}}},EmptyLoading.parameters={...EmptyLoading.parameters,docs:{...EmptyLoading.parameters?.docs,source:{originalSource:"(props: LemonTableProps<Record<string, any>>) => {\n  return <LemonTable {...props} columns={[{\n    title: 'Name',\n    dataIndex: 'name'\n  }, {\n    title: 'Occupation',\n    dataIndex: 'occupation'\n  }]} dataSource={[]} />;\n}",...EmptyLoading.parameters?.docs?.source}}},EmptyLoadingWithManySkeletonRows.parameters={...EmptyLoadingWithManySkeletonRows.parameters,docs:{...EmptyLoadingWithManySkeletonRows.parameters?.docs,source:{originalSource:"(props: LemonTableProps<Record<string, any>>) => {\n  return <LemonTable {...props} columns={[{\n    title: 'Name',\n    dataIndex: 'name'\n  }, {\n    title: 'Occupation',\n    dataIndex: 'occupation'\n  }]} dataSource={[]} />;\n}",...EmptyLoadingWithManySkeletonRows.parameters?.docs?.source}}},WithoutHeader.parameters={...WithoutHeader.parameters,docs:{...WithoutHeader.parameters?.docs,source:{originalSource:"(props: LemonTableProps<MockPerson>) => {\n  return <LemonTable {...props} columns={[{\n    title: 'Name',\n    dataIndex: 'name',\n    sorter: (a, b) => a.name.split(' ')[1].localeCompare(b.name.split(' ')[1])\n  }, {\n    title: 'Occupation',\n    dataIndex: 'occupation',\n    tooltip: 'What they are primarily working on.',\n    sorter: (a, b) => a.occupation.localeCompare(b.occupation)\n  }]} dataSource={([{\n    name: 'Werner C.',\n    occupation: 'Engineer'\n  }, {\n    name: 'Ursula Z.',\n    occupation: 'Retired'\n  }, {\n    name: 'Ludwig A.',\n    occupation: 'Painter'\n  }, {\n    name: 'Arnold S.',\n    occupation: 'Body-builder'\n  }, {\n    name: 'Franz B.',\n    occupation: 'Teacher'\n  }] as MockPerson[])} />;\n}",...WithoutHeader.parameters?.docs?.source}}},WithoutUppercasingInHeader.parameters={...WithoutUppercasingInHeader.parameters,docs:{...WithoutUppercasingInHeader.parameters?.docs,source:{originalSource:"(props: LemonTableProps<MockPerson>) => {\n  return <LemonTable {...props} columns={[{\n    title: 'Name',\n    dataIndex: 'name',\n    sorter: (a, b) => a.name.split(' ')[1].localeCompare(b.name.split(' ')[1])\n  }, {\n    title: 'Occupation',\n    dataIndex: 'occupation',\n    tooltip: 'What they are primarily working on.',\n    sorter: (a, b) => a.occupation.localeCompare(b.occupation)\n  }]} dataSource={([{\n    name: 'Werner C.',\n    occupation: 'Engineer'\n  }, {\n    name: 'Ursula Z.',\n    occupation: 'Retired'\n  }, {\n    name: 'Ludwig A.',\n    occupation: 'Painter'\n  }, {\n    name: 'Arnold S.',\n    occupation: 'Body-builder'\n  }, {\n    name: 'Franz B.',\n    occupation: 'Teacher'\n  }] as MockPerson[])} />;\n}",...WithoutUppercasingInHeader.parameters?.docs?.source}}},WithFooter.parameters={...WithFooter.parameters,docs:{...WithFooter.parameters?.docs,source:{originalSource:"(props: LemonTableProps<MockPerson>) => {\n  return <LemonTable {...props} columns={[{\n    title: 'Name',\n    dataIndex: 'name',\n    sorter: (a, b) => a.name.split(' ')[1].localeCompare(b.name.split(' ')[1])\n  }, {\n    title: 'Occupation',\n    dataIndex: 'occupation',\n    tooltip: 'What they are primarily working on.',\n    sorter: (a, b) => a.occupation.localeCompare(b.occupation)\n  }]} dataSource={([{\n    name: 'Werner C.',\n    occupation: 'Engineer'\n  }, {\n    name: 'Ursula Z.',\n    occupation: 'Retired'\n  }, {\n    name: 'Ludwig A.',\n    occupation: 'Painter'\n  }, {\n    name: 'Arnold S.',\n    occupation: 'Body-builder'\n  }, {\n    name: 'Franz B.',\n    occupation: 'Teacher'\n  }] as MockPerson[])} />;\n}",...WithFooter.parameters?.docs?.source}}},WithColorCodedRows.parameters={...WithColorCodedRows.parameters,docs:{...WithColorCodedRows.parameters?.docs,source:{originalSource:"(props: LemonTableProps<MockPerson>) => {\n  return <LemonTable {...props} columns={[{\n    title: 'Name',\n    dataIndex: 'name',\n    sorter: (a, b) => a.name.split(' ')[1].localeCompare(b.name.split(' ')[1])\n  }, {\n    title: 'Occupation',\n    dataIndex: 'occupation',\n    tooltip: 'What they are primarily working on.',\n    sorter: (a, b) => a.occupation.localeCompare(b.occupation)\n  }]} dataSource={([{\n    name: 'Werner C.',\n    occupation: 'Engineer'\n  }, {\n    name: 'Ursula Z.',\n    occupation: 'Retired'\n  }, {\n    name: 'Ludwig A.',\n    occupation: 'Painter'\n  }, {\n    name: 'Arnold S.',\n    occupation: 'Body-builder'\n  }, {\n    name: 'Franz B.',\n    occupation: 'Teacher'\n  }] as MockPerson[])} />;\n}",...WithColorCodedRows.parameters?.docs?.source}}},WithHighlightedRows.parameters={...WithHighlightedRows.parameters,docs:{...WithHighlightedRows.parameters?.docs,source:{originalSource:"(props: LemonTableProps<MockPerson>) => {\n  return <LemonTable {...props} columns={[{\n    title: 'Name',\n    dataIndex: 'name',\n    sorter: (a, b) => a.name.split(' ')[1].localeCompare(b.name.split(' ')[1])\n  }, {\n    title: 'Occupation',\n    dataIndex: 'occupation',\n    tooltip: 'What they are primarily working on.',\n    sorter: (a, b) => a.occupation.localeCompare(b.occupation)\n  }]} dataSource={([{\n    name: 'Werner C.',\n    occupation: 'Engineer'\n  }, {\n    name: 'Ursula Z.',\n    occupation: 'Retired'\n  }, {\n    name: 'Ludwig A.',\n    occupation: 'Painter'\n  }, {\n    name: 'Arnold S.',\n    occupation: 'Body-builder'\n  }, {\n    name: 'Franz B.',\n    occupation: 'Teacher'\n  }] as MockPerson[])} />;\n}",...WithHighlightedRows.parameters?.docs?.source}}},WithMandatorySorting.parameters={...WithMandatorySorting.parameters,docs:{...WithMandatorySorting.parameters?.docs,source:{originalSource:"(props: LemonTableProps<MockPerson>) => {\n  return <LemonTable {...props} columns={[{\n    title: 'Name',\n    dataIndex: 'name',\n    sorter: (a, b) => a.name.split(' ')[1].localeCompare(b.name.split(' ')[1])\n  }, {\n    title: 'Occupation',\n    dataIndex: 'occupation',\n    tooltip: 'What they are primarily working on.',\n    sorter: (a, b) => a.occupation.localeCompare(b.occupation)\n  }]} dataSource={([{\n    name: 'Werner C.',\n    occupation: 'Engineer'\n  }, {\n    name: 'Ursula Z.',\n    occupation: 'Retired'\n  }, {\n    name: 'Ludwig A.',\n    occupation: 'Painter'\n  }, {\n    name: 'Arnold S.',\n    occupation: 'Body-builder'\n  }, {\n    name: 'Franz B.',\n    occupation: 'Teacher'\n  }] as MockPerson[])} />;\n}",...WithMandatorySorting.parameters?.docs?.source}}},WithStickyFirstColumn.parameters={...WithStickyFirstColumn.parameters,docs:{...WithStickyFirstColumn.parameters?.docs,source:{originalSource:"(): JSX.Element => {\n  useEffect(() => {\n    const scrollableInner = document.querySelector('#story--lemon-ui-lemon-table--with-sticky-first-column .scrollable__inner');\n    if (scrollableInner) {\n      scrollableInner.scrollLeft = 20;\n    }\n  }, []);\n  return <LemonTable className=\"max-w-100\" firstColumnSticky columns={[{\n    title: 'Name',\n    dataIndex: 'name',\n    sorter: (a, b) => a.name.split(' ')[1].localeCompare(b.name.split(' ')[1])\n  }, {\n    title: 'Occupation',\n    dataIndex: 'occupation',\n    tooltip: 'What they are primarily working on.',\n    sorter: (a, b) => a.occupation.localeCompare(b.occupation)\n  }, {\n    title: 'Age',\n    key: 'age',\n    render: (_, person) => `${person.name.length * 12} years`\n  }, {\n    title: 'Zodiac sign',\n    key: 'zodiac',\n    render: () => 'Gemini'\n  }, {\n    title: 'Favorite color',\n    key: 'color',\n    render: (_, person) => person.occupation === 'Engineer' ? 'Blue' : 'Red'\n  }]} dataSource={([{\n    name: 'Werner C.',\n    occupation: 'Engineer'\n  }, {\n    name: 'Ursula Z.',\n    occupation: 'Retired'\n  }, {\n    name: 'Ludwig A.',\n    occupation: 'Painter'\n  }, {\n    name: 'Arnold S.',\n    occupation: 'Body-builder'\n  }, {\n    name: 'Franz B.',\n    occupation: 'Teacher'\n  }] as MockPerson[])} />;\n}",...WithStickyFirstColumn.parameters?.docs?.source}}};let __namedExportsOrder=["Basic","Grouped","Empty","PaginatedAutomatically","WithExpandableRows","Small","Embedded","Stealth","Loading","EmptyLoading","EmptyLoadingWithManySkeletonRows","WithoutHeader","WithoutUppercasingInHeader","WithFooter","WithColorCodedRows","WithHighlightedRows","WithMandatorySorting","WithStickyFirstColumn"]}}]);