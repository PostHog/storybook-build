(window.webpackJsonp=window.webpackJsonp||[]).push([[97,98],{5770:function(module,exports,__webpack_require__){"use strict";function javadoclike(Prism){!function(Prism){var javaDocLike=Prism.languages.javadoclike={parameter:{pattern:/(^\s*(?:\/{3}|\*|\/\*\*)\s*@(?:param|arg|arguments)\s+)\w+/m,lookbehind:!0},keyword:{pattern:/(^\s*(?:\/{3}|\*|\/\*\*)\s*|\{)@[a-z][a-zA-Z-]+\b/m,lookbehind:!0},punctuation:/[{}]/};Object.defineProperty(javaDocLike,"addSupport",{value:function addSupport(languages,docLanguage){"string"==typeof languages&&(languages=[languages]),languages.forEach((function(lang){!function docCommentSupport(lang,callback){var grammar=Prism.languages[lang];if(grammar){var token=grammar["doc-comment"];if(!token){var definition={"doc-comment":{pattern:/(^|[^\\])\/\*\*[^/][\s\S]*?(?:\*\/|$)/,lookbehind:!0,alias:"comment"}};token=(grammar=Prism.languages.insertBefore(lang,"comment",definition))["doc-comment"]}if(token instanceof RegExp&&(token=grammar["doc-comment"]={pattern:token}),Array.isArray(token))for(var i=0,l=token.length;i<l;i++)token[i]instanceof RegExp&&(token[i]={pattern:token[i]}),callback(token[i]);else callback(token)}}(lang,(function(pattern){pattern.inside||(pattern.inside={}),pattern.inside.rest=docLanguage}))}))}}),javaDocLike.addSupport(["java","javascript","php"],javaDocLike)}(Prism)}module.exports=javadoclike,javadoclike.displayName="javadoclike",javadoclike.aliases=[]},6028:function(module,exports,__webpack_require__){"use strict";var refractorJava=__webpack_require__(1836),refractorJavadoclike=__webpack_require__(5770);function javadoc(Prism){Prism.register(refractorJava),Prism.register(refractorJavadoclike),function(Prism){var codeLinePattern=/(^(?:\s*(?:\*\s*)*)).*[^*\s].*$/m,memberReference=/#\s*\w+(?:\s*\([^()]*\))?/.source,reference=/(?:[a-zA-Z]\w+\s*\.\s*)*[A-Z]\w*(?:\s*<mem>)?|<mem>/.source.replace(/<mem>/g,(function(){return memberReference}));Prism.languages.javadoc=Prism.languages.extend("javadoclike",{}),Prism.languages.insertBefore("javadoc","keyword",{reference:{pattern:RegExp(/(@(?:exception|throws|see|link|linkplain|value)\s+(?:\*\s*)?)/.source+"(?:"+reference+")"),lookbehind:!0,inside:{function:{pattern:/(#\s*)\w+(?=\s*\()/,lookbehind:!0},field:{pattern:/(#\s*)\w+/,lookbehind:!0},namespace:{pattern:/\b(?:[a-z]\w*\s*\.\s*)+/,inside:{punctuation:/\./}},"class-name":/\b[A-Z]\w*/,keyword:Prism.languages.java.keyword,punctuation:/[#()[\],.]/}},"class-name":{pattern:/(@param\s+)<[A-Z]\w*>/,lookbehind:!0,inside:{punctuation:/[.<>]/}},"code-section":[{pattern:/(\{@code\s+)(?:[^{}]|\{(?:[^{}]|\{(?:[^{}]|\{(?:[^{}]|\{[^{}]*\})*\})*\})*\})+?(?=\s*\})/,lookbehind:!0,inside:{code:{pattern:codeLinePattern,lookbehind:!0,inside:Prism.languages.java,alias:"language-java"}}},{pattern:/(<(code|pre|tt)>(?!<code>)\s*)[\s\S]+?(?=\s*<\/\2>)/,lookbehind:!0,inside:{line:{pattern:codeLinePattern,lookbehind:!0,inside:{tag:Prism.languages.markup.tag,entity:Prism.languages.markup.entity,code:{pattern:/.+/,inside:Prism.languages.java,alias:"language-java"}}}}}],tag:Prism.languages.markup.tag,entity:Prism.languages.markup.entity}),Prism.languages.javadoclike.addSupport("java",Prism.languages.javadoc)}(Prism)}module.exports=javadoc,javadoc.displayName="javadoc",javadoc.aliases=[]}}]);