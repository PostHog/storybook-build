"use strict";(self.webpackChunkposthog=self.webpackChunkposthog||[]).push([[55394],{"./frontend/src/lib/lemon-ui/LemonInput/LemonInput.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Basic:()=>Basic,Clearable:()=>Clearable,DangerStatus:()=>DangerStatus,Disabled:()=>Disabled,Numeric:()=>Numeric,Password:()=>Password,Search:()=>Search,Small:()=>Small,WithPrefixAndSuffixAction:()=>WithPrefixAndSuffixAction,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _posthog_icons__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/.pnpm/@posthog+icons@0.8.5_react-dom@18.2.0_react@18.2.0/node_modules/@posthog/icons/dist/posthog-icons.es.js"),lib_lemon_ui_LemonButton__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./frontend/src/lib/lemon-ui/LemonButton/index.ts"),react__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),_LemonInput__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./frontend/src/lib/lemon-ui/LemonInput/LemonInput.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");let meta={title:"Lemon UI/Lemon Input",component:_LemonInput__WEBPACK_IMPORTED_MODULE_3__.D,tags:["autodocs"],args:{value:"Foo"}},__WEBPACK_DEFAULT_EXPORT__=meta,Template=props=>{let[value,setValue]=(0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(props.value);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_LemonInput__WEBPACK_IMPORTED_MODULE_3__.D,{...props,value:value,onChange:newValue=>setValue(newValue)})},Basic=Template.bind({}),WithPrefixAndSuffixAction=Template.bind({});WithPrefixAndSuffixAction.args={prefix:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_posthog_icons__WEBPACK_IMPORTED_MODULE_0__.IconCalendar,{}),suffix:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(lib_lemon_ui_LemonButton__WEBPACK_IMPORTED_MODULE_1__.$,{noPadding:!0,dropdown:{overlay:"Surprise! ðŸ˜±"},type:"tertiary",icon:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_posthog_icons__WEBPACK_IMPORTED_MODULE_0__.IconChevronDown,{})})};let Search=Template.bind({});Search.args={type:"search",placeholder:"Search your soul"};let Password=Template.bind({});Password.args={type:"password",placeholder:"Enter your password"};let Disabled=Template.bind({});Disabled.args={disabled:!0};let DangerStatus=Template.bind({});DangerStatus.args={status:"danger"};let Clearable=Template.bind({});Clearable.args={allowClear:!0};let Numeric=Template.bind({});Numeric.args={type:"number",min:0,step:1,value:3};let Small=Template.bind({});Small.args={allowClear:!0,size:"small"},Basic.parameters={...Basic.parameters,docs:{...Basic.parameters?.docs,source:{originalSource:"props => {\n  const [value, setValue] = useState(props.value);\n  // @ts-expect-error â€“ union variant inference around the `type` prop doesn't work here as `type` comes from above\n  return <LemonInput {...props} value={value} onChange={newValue => setValue(newValue)} />;\n}",...Basic.parameters?.docs?.source}}},WithPrefixAndSuffixAction.parameters={...WithPrefixAndSuffixAction.parameters,docs:{...WithPrefixAndSuffixAction.parameters?.docs,source:{originalSource:"props => {\n  const [value, setValue] = useState(props.value);\n  // @ts-expect-error â€“ union variant inference around the `type` prop doesn't work here as `type` comes from above\n  return <LemonInput {...props} value={value} onChange={newValue => setValue(newValue)} />;\n}",...WithPrefixAndSuffixAction.parameters?.docs?.source}}},Search.parameters={...Search.parameters,docs:{...Search.parameters?.docs,source:{originalSource:"props => {\n  const [value, setValue] = useState(props.value);\n  // @ts-expect-error â€“ union variant inference around the `type` prop doesn't work here as `type` comes from above\n  return <LemonInput {...props} value={value} onChange={newValue => setValue(newValue)} />;\n}",...Search.parameters?.docs?.source}}},Password.parameters={...Password.parameters,docs:{...Password.parameters?.docs,source:{originalSource:"props => {\n  const [value, setValue] = useState(props.value);\n  // @ts-expect-error â€“ union variant inference around the `type` prop doesn't work here as `type` comes from above\n  return <LemonInput {...props} value={value} onChange={newValue => setValue(newValue)} />;\n}",...Password.parameters?.docs?.source}}},Disabled.parameters={...Disabled.parameters,docs:{...Disabled.parameters?.docs,source:{originalSource:"props => {\n  const [value, setValue] = useState(props.value);\n  // @ts-expect-error â€“ union variant inference around the `type` prop doesn't work here as `type` comes from above\n  return <LemonInput {...props} value={value} onChange={newValue => setValue(newValue)} />;\n}",...Disabled.parameters?.docs?.source}}},DangerStatus.parameters={...DangerStatus.parameters,docs:{...DangerStatus.parameters?.docs,source:{originalSource:"props => {\n  const [value, setValue] = useState(props.value);\n  // @ts-expect-error â€“ union variant inference around the `type` prop doesn't work here as `type` comes from above\n  return <LemonInput {...props} value={value} onChange={newValue => setValue(newValue)} />;\n}",...DangerStatus.parameters?.docs?.source}}},Clearable.parameters={...Clearable.parameters,docs:{...Clearable.parameters?.docs,source:{originalSource:"props => {\n  const [value, setValue] = useState(props.value);\n  // @ts-expect-error â€“ union variant inference around the `type` prop doesn't work here as `type` comes from above\n  return <LemonInput {...props} value={value} onChange={newValue => setValue(newValue)} />;\n}",...Clearable.parameters?.docs?.source}}},Numeric.parameters={...Numeric.parameters,docs:{...Numeric.parameters?.docs,source:{originalSource:"props => {\n  const [value, setValue] = useState(props.value);\n  // @ts-expect-error â€“ union variant inference around the `type` prop doesn't work here as `type` comes from above\n  return <LemonInput {...props} value={value} onChange={newValue => setValue(newValue)} />;\n}",...Numeric.parameters?.docs?.source}}},Small.parameters={...Small.parameters,docs:{...Small.parameters?.docs,source:{originalSource:"props => {\n  const [value, setValue] = useState(props.value);\n  // @ts-expect-error â€“ union variant inference around the `type` prop doesn't work here as `type` comes from above\n  return <LemonInput {...props} value={value} onChange={newValue => setValue(newValue)} />;\n}",...Small.parameters?.docs?.source}}};let __namedExportsOrder=["Basic","WithPrefixAndSuffixAction","Search","Password","Disabled","DangerStatus","Clearable","Numeric","Small"]}}]);