{"version":3,"file":"87608.29efba97.iframe.bundle.js","mappings":";;;;AAwBA","sources":["webpack://posthog/./frontend/src/scenes/error-tracking/errorTrackingSceneLogic.ts"],"sourcesContent":["import { afterMount, kea, path } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\n\nimport { HogQLQuery, NodeKind } from '~/queries/schema'\nimport { hogql } from '~/queries/utils'\nimport { ErrorTrackingGroup } from '~/types'\n\nimport type { errorTrackingSceneLogicType } from './errorTrackingSceneLogicType'\n\nexport const errorTrackingSceneLogic = kea<errorTrackingSceneLogicType>([\n    path(['scenes', 'error-tracking', 'errorTrackingSceneLogic']),\n\n    loaders(() => ({\n        errorGroups: [\n            [] as ErrorTrackingGroup[],\n            {\n                loadErrorGroups: async () => {\n                    const query: HogQLQuery = {\n                        kind: NodeKind.HogQLQuery,\n                        query: hogql`SELECT first_value(properties), count(), count(distinct e.$session_id), count(distinct e.distinct_id)\n                                FROM events e\n                                WHERE event = '$exception'\n                                -- grouping by message for now, will eventually be predefined $exception_group_id\n                                GROUP BY e.properties.$exception_type`,\n                    }\n\n                    const res = await api.query(query)\n\n                    return res.results.map((r) => {\n                        const eventProperties = JSON.parse(r[0])\n                        return {\n                            id: eventProperties['$exception_type'],\n                            title: eventProperties['$exception_type'] || 'Error',\n                            description: eventProperties['$exception_message'],\n                            occurrences: r[1],\n                            uniqueSessions: r[2],\n                            uniqueUsers: r[3],\n                        }\n                    })\n                },\n            },\n        ],\n    })),\n\n    afterMount(({ actions }) => {\n        actions.loadErrorGroups()\n    }),\n])\n"],"names":[],"sourceRoot":""}