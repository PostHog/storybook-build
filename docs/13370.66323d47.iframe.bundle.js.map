{"version":3,"file":"13370.66323d47.iframe.bundle.js","mappings":";;AAgBA;;;AAaA;AACA;;;;;;;;;;;AAWA;;;;;;;;;;AAYA;;;;;AAOA;;;;;;;;AA6CA;AC5FA;;;;;;;;;;;AAsBA;;;;;AASA;;ACpCA;;;AAaA;AACA;;;;;;ACFA;AACA;;;AAWA;;;;ACiBA;;;;;;AAMA;;;;;ACpCA;;AAEA;;ACFA;;;;;;AAgBA;AACA;;;AAGA;;;;;;;;;;AAYA;;;;;AAOA;;;;;;;;;;;;AChCA;;AAEA;;;;;AAKA;;;;ACrBA;;;AAaA;AACA;AACA;;;ACTA;AACA;;;AAGA;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;ACpDA;AAeA;AACA;;ACZA;;AAEA;ACJA;;;AAKA;;AAIA;;;;AAMA;;;;;;AA0BA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;AAOA;;;;;;;AC/DA;AACA;AACA;;;;;;;;;;;;;;;AAmBA;AC7BA;AACA;;AAEA;;;;;;;ACMA;;AAEA;AACA;;;;;AASA;;ACvBA;;;;;;AAgBA;;AAEA;;;;AAIA;;;;;;;;AAgBA;ACrCA;;;;;;AAmBA;AACA;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;AAkBA;;;;;AASA;;;;;;;;;;;;AAoBA;AC3FA;;;;;;;;;;;;;;;;;;;;;AAiCA;;;;;;;;;;ACvBA;ACKA;;;;;;;;;;;;;;ACmIA;;ACpJA;;;;;;;;ACMA;;;;;;;;;;ACIA;;;;;;;AC2BA;AACA;;;AAGA;;ACoEA;;AAWA;;AAoEA;;AAWA;AAoDA;AASA;AAoBA","sources":["webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/android.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/angular.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/astro.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/django.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/flutter.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/go.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/ios.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/laravel.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/nodejs.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/nuxt.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/php.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/python.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/react-native.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/remix.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/ruby.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/svelte.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/vue.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/next-js.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdk-install-instructions/react.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/web-analytics/react-native.tsx","webpack://posthog/./frontend/src/scenes/onboarding/data-warehouse/sources.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/sdksLogic.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/product-analytics/django.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/product-analytics/nodejs.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/product-analytics/react-native.tsx","webpack://posthog/./frontend/src/scenes/onboarding/sdks/product-analytics/helicone.tsx","webpack://posthog/./frontend/src/scenes/onboarding/Onboarding.tsx"],"sourcesContent":["import { Link } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nexport interface AndroidSetupProps {\n    includeReplay?: boolean\n}\n\nfunction AndroidInstallSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.Kotlin}>\n            {`dependencies {\n    implementation(\"com.posthog:posthog-android:3.+\")\n}`}\n        </CodeSnippet>\n    )\n}\n\nfunction AndroidSetupSnippet({ includeReplay }: AndroidSetupProps): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.Kotlin}>\n            {`class SampleApp : Application() {\n\n    companion object {\n        const val POSTHOG_API_KEY = \"${currentTeam?.api_token}\"\n        const val POSTHOG_HOST = \"${apiHostOrigin()}\"\n    }\n\n    override fun onCreate() {\n        super.onCreate()\n\n        // Create a PostHog Config with the given API key and host\n        val config = PostHogAndroidConfig(\n            apiKey = POSTHOG_API_KEY,\n            host = POSTHOG_HOST\n        )\n        ${\n            includeReplay\n                ? `\n        // check https://posthog.com/docs/session-replay/android#installation\n        // for more config and to learn about how we capture sessions on mobile\n        // and what to expect\n        config.sessionReplay = true\n        // choose whether to mask images or text\n        config.sessionReplayConfig.maskAllImages = false\n        config.sessionReplayConfig.maskAllTextInputs = true\n        // screenshot is disabled by default\n        // The screenshot may contain sensitive information, use with caution\n        config.sessionReplayConfig.screenshot = true`\n                : ''\n        }\n\n        // Setup PostHog with the given Context and Config\n        PostHogAndroid.setup(this, config)\n    }\n}`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallAndroidInstructions(props: AndroidSetupProps): JSX.Element {\n    return (\n        <>\n            {props.includeReplay ? (\n                <LemonBanner type=\"info\">\n                    ðŸš§ NOTE: <Link to=\"https://posthog.com/docs/session-replay/mobile\">Mobile recording</Link> is\n                    currently in beta. We are keen to gather as much feedback as possible so if you try this out please\n                    let us know. You can send feedback via the{' '}\n                    <Link to=\"https://us.posthog.com/#panel=support%3Afeedback%3Asession_replay%3Alow\">\n                        in-app support panel\n                    </Link>{' '}\n                    or one of our other <Link to=\"https://posthog.com/docs/support-options\">support options</Link>.\n                </LemonBanner>\n            ) : null}\n            <h3>Install</h3>\n            <AndroidInstallSnippet />\n            <h3>Configure</h3>\n            <AndroidSetupSnippet {...props} />\n        </>\n    )\n}\n\nexport function SDKInstallAndroidTrackScreenInstructions(): JSX.Element {\n    return (\n        <>\n            <p>\n                With <code>captureScreenViews = true</code>, PostHog will try to record all screen changes\n                automatically.\n            </p>\n            <p>\n                If you want to manually send a new screen capture event, use the <code>screen</code> function.\n            </p>\n            <CodeSnippet language={Language.Kotlin}>{`import com.posthog.PostHog\n\nPostHog.screen(\n    screenTitle = \"Dashboard\",\n    properties = mapOf(\n        \"background\" to \"blue\",\n        \"hero\" to \"superhog\"\n    )\n)`}</CodeSnippet>\n        </>\n    )\n}\n","import { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { JSInstallSnippet } from './js-web'\n\nfunction EnvVarsSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.Bash}>\n            {[`POSTHOG_KEY=${currentTeam?.api_token}`, `POSTHOG_HOST=${apiHostOrigin()}`].join('\\n')}\n        </CodeSnippet>\n    )\n}\n\nfunction AngularInitializeCodeSnippet(): JSX.Element {\n    const { featureFlags } = useValues(featureFlagLogic)\n    const isPersonProfilesDisabled = featureFlags[FEATURE_FLAGS.PERSONLESS_EVENTS_NOT_SUPPORTED]\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`// in src/main.ts\n\nimport { bootstrapApplication } from '@angular/platform-browser';\nimport { appConfig } from './app/app.config';\nimport { AppComponent } from './app/app.component';\nimport posthog from 'posthog-js'\n\nposthog.init(\n  process.env.POSTHOG_KEY,\n  {\n    api_host:process.env.POSTHOG_HOST,\n    ${\n        !isPersonProfilesDisabled\n            ? `person_profiles: 'identified_only', // or 'always' to create profiles for anonymous users as well`\n            : null\n    }\n  }\n)\n\nbootstrapApplication(AppComponent, appConfig)\n  .catch((err) => console.error(err));`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallAngularInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install posthog-js using your package manager</h3>\n            <JSInstallSnippet />\n            <h3>Add environment variables</h3>\n            <p>\n                Add your environment variables to your .env.local file and to your hosting provider (e.g. Vercel,\n                Netlify, AWS). You can find your project API key in your project settings.\n            </p>\n            <EnvVarsSnippet />\n\n            <h3>Initialize</h3>\n            <p>\n                In your <code>src/main.ts</code>, initialize PostHog using your project API key and instance address:\n            </p>\n            <AngularInitializeCodeSnippet />\n        </>\n    )\n}\n","import { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { useJsSnippet } from 'lib/components/JSSnippet'\n\nfunction CreatePostHogAstroFileSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.Bash}>\n            {`cd ./src/components \n# or 'cd ./src && mkdir components && cd ./components' if your components folder doesn't exist \ntouch posthog.astro`}\n        </CodeSnippet>\n    )\n}\n\nfunction AstroSetupSnippet(): JSX.Element {\n    const jsSnippetScriptTag = useJsSnippet()\n    return (\n        <>\n            <CodeSnippet language={Language.JavaScript}>\n                {`---\n\n---\n${jsSnippetScriptTag}\n`}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function SDKInstallAstroInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install the PostHog web snippet</h3>\n            <p>\n                In your <code>src/components</code> folder, create a <code>posthog.astro</code> file:\n            </p>\n            <CreatePostHogAstroFileSnippet />\n            <p>In this file, add your PostHog web snippet:</p>\n            <AstroSetupSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nfunction DjangoInstallSnippet(): JSX.Element {\n    return <CodeSnippet language={Language.Bash}>pip install posthog</CodeSnippet>\n}\n\nfunction DjangoAppConfigSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.Python}>\n            {`from django.apps import AppConfig\nimport posthog\n\nclass YourAppConfig(AppConfig):\n    name = \"your_app_name\"\n    def ready(self):\n        posthog.api_key = '${currentTeam?.api_token}'\n        posthog.host = '${apiHostOrigin()}'`}\n        </CodeSnippet>\n    )\n}\n\nfunction DjangoSettingsSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.Python}>\n            {`INSTALLED_APPS = [\n    # other apps\n    'your_app_name.apps.MyAppConfig',  # Add your app config\n] `}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallDjangoInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install</h3>\n            <DjangoInstallSnippet />\n            <h3>Configure</h3>\n            <p>\n                Set the PostHog API key and host in your <code>AppConfig</code> in <code>apps.py</code> so that's it's\n                available everywhere:\n            </p>\n            <DjangoAppConfigSnippet />\n            <p />\n            Next, if you haven't done so already, make sure you add your <code>AppConfig</code> to your{' '}\n            <code>settings.py</code> under <code>INSTALLED_APPS</code>:\n            <DjangoSettingsSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { useJsSnippet } from 'lib/components/JSSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nfunction FlutterInstallSnippet(): JSX.Element {\n    return <CodeSnippet language={Language.YAML}>posthog_flutter: ^4.0.0</CodeSnippet>\n}\n\nfunction FlutterAndroidSetupSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n    const url = apiHostOrigin()\n\n    return (\n        <CodeSnippet language={Language.XML}>\n            {'<application>\\n\\t<activity>\\n\\t\\t[...]\\n\\t</activity>\\n\\t<meta-data android:name=\"com.posthog.posthog.API_KEY\" android:value=\"' +\n                currentTeam?.api_token +\n                '\" />\\n\\t<meta-data android:name=\"com.posthog.posthog.POSTHOG_HOST\" android:value=\"' +\n                url +\n                '\" />\\n\\t<meta-data android:name=\"com.posthog.posthog.TRACK_APPLICATION_LIFECYCLE_EVENTS\" android:value=\"true\" />\\n\\t<meta-data android:name=\"com.posthog.posthog.DEBUG\" android:value=\"true\" />\\n</application>'}\n        </CodeSnippet>\n    )\n}\n\nfunction FlutterIOSSetupSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n    const url = apiHostOrigin()\n\n    return (\n        <CodeSnippet language={Language.XML}>\n            {'<dict>\\n\\t[...]\\n\\t<key>com.posthog.posthog.API_KEY</key>\\n\\t<string>' +\n                currentTeam?.api_token +\n                '</string>\\n\\t<key>com.posthog.posthog.POSTHOG_HOST</key>\\n\\t<string>' +\n                url +\n                '</string>\\n\\t<key>com.posthog.posthog.CAPTURE_APPLICATION_LIFECYCLE_EVENTS</key>\\n\\t<true/>\\n\\t[...]\\n</dict>'}\n        </CodeSnippet>\n    )\n}\n\nfunction FlutterWebSetupSnippet(): JSX.Element {\n    const jsSnippet = useJsSnippet(4)\n\n    return (\n        <CodeSnippet language={Language.HTML}>\n            {`<!DOCTYPE html>\n<html>\n  <head>\n    ...\n${jsSnippet}\n  </head>\n\n  <body>\n    ...\n  </body>\n</html>`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallFlutterInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install</h3>\n            <FlutterInstallSnippet />\n            <h3>Android Setup</h3>\n            <p className=\"prompt-text\">Add these values in AndroidManifest.xml</p>\n            <FlutterAndroidSetupSnippet />\n            <h3>iOS/macOS Setup</h3>\n            <p className=\"prompt-text\">Add these values in Info.plist</p>\n            <FlutterIOSSetupSnippet />\n            <h3>Web Setup</h3>\n            <p className=\"prompt-text\">Add these values in index.html</p>\n            <FlutterWebSetupSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nfunction GoInstallSnippet(): JSX.Element {\n    return <CodeSnippet language={Language.Bash}>go get \"github.com/posthog/posthog-go\"</CodeSnippet>\n}\n\nfunction GoSetupSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.Go}>\n            {`package main\nimport (\n    \"github.com/posthog/posthog-go\"\n)\nfunc main() {\n    client, _ := posthog.NewWithConfig(\"${currentTeam?.api_token}\", posthog.Config{Endpoint: \"${apiHostOrigin()}\"})\n    defer client.Close()\n}`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallGoInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install</h3>\n            <GoInstallSnippet />\n            <h3>Configure</h3>\n            <GoSetupSnippet />\n        </>\n    )\n}\n","import { LemonBanner, Link } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nexport interface iOSSetupProps {\n    includeReplay?: boolean\n}\n\nfunction IOSInstallCocoaPodsSnippet(): JSX.Element {\n    return <CodeSnippet language={Language.Ruby}>{'pod \"PostHog\", \"~> 3.0.0\"'}</CodeSnippet>\n}\n\nfunction IOSInstallSPMSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.Swift}>\n            {`dependencies: [\n  .package(url: \"https://github.com/PostHog/posthog-ios.git\", from: \"3.0.0\")\n]`}\n        </CodeSnippet>\n    )\n}\n\nfunction IOSSetupSnippet({ includeReplay }: iOSSetupProps): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.Swift}>\n            {`import Foundation\nimport PostHog\nimport UIKit\n\nclass AppDelegate: NSObject, UIApplicationDelegate {\n    func application(_: UIApplication, didFinishLaunchingWithOptions _: [UIApplication.LaunchOptionsKey: Any]? = nil) -> Bool {\n        let POSTHOG_API_KEY = \"${currentTeam?.api_token}\"\n        let POSTHOG_HOST = \"${apiHostOrigin()}\"\n\n        let config = PostHogConfig(apiKey: POSTHOG_API_KEY, host: POSTHOG_HOST)\n        ${\n            includeReplay\n                ? `\n        // check https://posthog.com/docs/session-replay/ios#installation\n        // for more config and to learn about how we capture sessions on mobile\n        // and what to expect\n        config.sessionReplay = true\n        // choose whether to mask images or text\n        config.sessionReplayConfig.maskAllImages = false\n        config.sessionReplayConfig.maskAllTextInputs = true\n        // screenshot is disabled by default\n        // The screenshot may contain sensitive information, use with caution\n        config.sessionReplayConfig.screenshotMode = true`\n                : ''\n        }\n        PostHogSDK.shared.setup(config)\n\n        return true\n    }\n}`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallIOSInstructions(props: iOSSetupProps): JSX.Element {\n    return (\n        <>\n            {props.includeReplay ? (\n                <LemonBanner type=\"info\">\n                    ðŸš§ NOTE: <Link to=\"https://posthog.com/docs/session-replay/mobile\">Mobile recording</Link> is\n                    currently in beta. We are keen to gather as much feedback as possible so if you try this out please\n                    let us know. You can send feedback via the{' '}\n                    <Link to=\"https://us.posthog.com/#panel=support%3Afeedback%3Asession_replay%3Alow\">\n                        in-app support panel\n                    </Link>{' '}\n                    or one of our other <Link to=\"https://posthog.com/docs/support-options\">support options</Link>.\n                </LemonBanner>\n            ) : null}\n            <h3>Install via CocoaPods</h3>\n            <IOSInstallCocoaPodsSnippet />\n            <h3>Or Install via SPM</h3>\n            <IOSInstallSPMSnippet />\n            <h3>Configure</h3>\n            <IOSSetupSnippet {...props} />\n        </>\n    )\n}\n\nexport function SDKInstallIOSTrackScreenInstructions(): JSX.Element {\n    return (\n        <>\n            <p>\n                With <code>configuration.captureScreenViews</code> set as <code>true</code>, PostHog will try to record\n                all screen changes automatically.\n            </p>\n            <p>\n                If you want to manually send a new screen capture event, use the <code>screen</code> function.\n            </p>\n            <CodeSnippet\n                language={Language.Swift}\n            >{`PostHogSDK.shared.screen(\"Dashboard\", properties: [\"fromIcon\": \"bottom\"])`}</CodeSnippet>\n        </>\n    )\n}\n","import { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nfunction LaravelConfigSnippet(): JSX.Element {\n    return <CodeSnippet language={Language.Bash}>composer require posthog/posthog-php</CodeSnippet>\n}\n\nfunction LaravelInstallSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.PHP}>\n            {`<?php\n\nnamespace App\\\\Providers;\n\nuse Illuminate\\\\Support\\\\ServiceProvider;\nuse PostHog\\\\PostHog;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    public function boot(): void\n    {\n        PostHog::init(\n            '${currentTeam?.api_token}',\n            [\n                'host' => '${apiHostOrigin()}'\n            ]\n        );\n    }\n}\n`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallLaravelInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Dependency Setup</h3>\n            <LaravelConfigSnippet />\n            <h3>Configure</h3>\n            <p>\n                Initialize PostHog in the <code>boot</code> method of <code>app/Providers/AppServiceProvider.php</code>\n            </p>\n            <LaravelInstallSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nexport function NodeInstallSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.Bash}>\n            {`npm install posthog-node\n# OR\nyarn add posthog-node\n# OR\npnpm add posthog-node`}\n        </CodeSnippet>\n    )\n}\n\nexport function NodeSetupSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`import { PostHog } from 'posthog-node'\n\nconst client = new PostHog(\n    '${currentTeam?.api_token}',\n    { host: '${apiHostOrigin()}' }\n)`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallNodeInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install</h3>\n            <NodeInstallSnippet />\n            <h3>Configure</h3>\n            <NodeSetupSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { JSInstallSnippet } from './js-web'\n\nfunction NuxtEnvVarsSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`export default defineNuxtConfig({\n                runtimeConfig: {\n                  public: {\n                    posthogPublicKey: '${currentTeam?.api_token}',\n                    posthogHost: '${apiHostOrigin()}'\n                  }\n                }\n              })`}\n        </CodeSnippet>\n    )\n}\n\nfunction NuxtAppClientCodeSnippet(): JSX.Element {\n    const { featureFlags } = useValues(featureFlagLogic)\n    const isPersonProfilesDisabled = featureFlags[FEATURE_FLAGS.PERSONLESS_EVENTS_NOT_SUPPORTED]\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`import { defineNuxtPlugin } from '#app'\nimport posthog from 'posthog-js'\nexport default defineNuxtPlugin(nuxtApp => {\n  const runtimeConfig = useRuntimeConfig();\n  const posthogClient = posthog.init(runtimeConfig.public.posthogPublicKey, {\n    api_host: runtimeConfig.public.posthogHost,\n    ${\n        isPersonProfilesDisabled\n            ? ``\n            : `person_profiles: 'identified_only', // or 'always' to create profiles for anonymous users as well`\n    }\n    capture_pageview: false, // we add manual pageview capturing below\n    loaded: (posthog) => {\n      if (import.meta.env.MODE === 'development') posthog.debug();\n    }\n  })\n\n  // Make sure that pageviews are captured with each route change\n  const router = useRouter();\n  router.afterEach((to) => {\n    nextTick(() => {\n      posthog.capture('$pageview', {\n        current_url: to.fullPath\n      });\n    });\n  });\n\n  return {\n    provide: {\n      posthog: () => posthogClient\n    }\n  }\n})`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallNuxtJSInstructions(): JSX.Element {\n    return (\n        <>\n            <p>\n                The below guide is for Nuxt v3.0 and above. For Nuxt v2.16 and below, see our{' '}\n                <Link to=\"https://posthog.com/docs/libraries/nuxt-js#nuxt-v216-and-below\">Nuxt docs</Link>\n            </p>\n            <h3>Install posthog-js using your package manager</h3>\n            <JSInstallSnippet />\n            <h3>Add environment variables</h3>\n            <p>\n                Add your PostHog API key and host to your <code>nuxt.config.js</code> file.\n            </p>\n            <NuxtEnvVarsSnippet />\n\n            <h3>Create a plugin</h3>\n            <p>\n                Create a new plugin by creating a new file <code>posthog.client.js</code> in your{' '}\n                <Link to=\"https://nuxt.com/docs/guide/directory-structure/plugins\" target=\"_blank\">\n                    plugins directory\n                </Link>\n                :\n            </p>\n            <NuxtAppClientCodeSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nfunction PHPConfigSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.JSON}>\n            {`{\n    \"require\": {\n        \"posthog/posthog-php\": \"1.0.*\"\n    }\n}`}\n        </CodeSnippet>\n    )\n}\n\nfunction PHPInstallSnippet(): JSX.Element {\n    return <CodeSnippet language={Language.Bash}>php composer.phar install</CodeSnippet>\n}\n\nfunction PHPSetupSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.PHP}>\n            {`PostHog::init('${currentTeam?.api_token}',\n    array('host' => '${apiHostOrigin()}')\n);`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallPHPInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Dependency Setup</h3>\n            <PHPConfigSnippet />\n            <h3>Install</h3>\n            <PHPInstallSnippet />\n            <h3>Configure</h3>\n            <PHPSetupSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nfunction PythonInstallSnippet(): JSX.Element {\n    return <CodeSnippet language={Language.Bash}>pip install posthog</CodeSnippet>\n}\n\nfunction PythonSetupSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.Python}>\n            {`from posthog import Posthog\n\nposthog = Posthog(project_api_key='${currentTeam?.api_token}', host='${apiHostOrigin()}')\n\n            `}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallPythonInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install</h3>\n            <PythonInstallSnippet />\n            <h3>Configure</h3>\n            <PythonSetupSnippet />\n        </>\n    )\n}\n","import { LemonBanner, Link } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nexport interface RNSetupProps {\n    includeReplay?: boolean\n}\n\nfunction RNInstallSnippet({ includeReplay }: RNSetupProps): JSX.Element {\n    return (\n        <CodeSnippet language={Language.Bash}>\n            {`# Expo apps\nnpx expo install posthog-react-native expo-file-system expo-application expo-device expo-localization${\n                includeReplay ? ` posthog-react-native-session-replay` : ''\n            } \n\n# Standard React Native apps\nyarn add posthog-react-native @react-native-async-storage/async-storage react-native-device-info${\n                includeReplay ? ` posthog-react-native-session-replay` : ''\n            } \n# or\nnpm i -s posthog-react-native @react-native-async-storage/async-storage react-native-device-info${\n                includeReplay ? ` posthog-react-native-session-replay` : ''\n            } \n\n# for iOS\ncd ios\npod install`}\n        </CodeSnippet>\n    )\n}\n\nfunction RNSetupSnippet({ includeReplay }: RNSetupProps): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n    const url = apiHostOrigin()\n\n    return (\n        <>\n            <p>\n                PostHog is most easily used via the <code>PostHogProvider</code> component but if you need to\n                instantiate it directly,{' '}\n                <Link to=\"https://posthog.com/docs/libraries/react-native#without-the-posthogprovider\">\n                    check out the docs\n                </Link>{' '}\n                which explain how to do this correctly.\n            </p>\n            <CodeSnippet language={Language.JSX}>\n                {`// App.(js|ts)\nimport { PostHogProvider } from 'posthog-react-native'\n...\n\nexport function MyApp() {\n    return (\n        <PostHogProvider apiKey=\"${currentTeam?.api_token}\" options={{\n            host: \"${url}\",\n            ${\n                includeReplay\n                    ? `\n            enableSessionReplay: true,\n            sessionReplayConfig: {\n                // Whether text inputs are masked. Default is true.\n                // Password inputs are always masked regardless\n                maskAllTextInputs: true,\n                // Whether images are masked. Default is true.\n                maskAllImages: true,\n                // Capture logs automatically. Default is true.\n                // Android only (Native Logcat only)\n                captureLog: true,\n                // Whether network requests are captured in recordings. Default is true\n                // Only metric-like data like speed, size, and response code are captured.\n                // No data is captured from the request or response body.\n                // iOS only\n                captureNetworkTelemetry: true,\n                // Deboucer delay used to reduce the number of snapshots captured and reduce performance impact. Default is 500ms\n                androidDebouncerDelayMs: 500,\n                // Deboucer delay used to reduce the number of snapshots captured and reduce performance impact. Default is 1000ms\n                iOSdebouncerDelayMs: 1000,\n            },`\n                    : ''\n            }\n        }}>\n            <RestOfApp />\n        </PostHogProvider>\n    )\n}`}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function SDKInstallRNInstructions(props: RNSetupProps): JSX.Element {\n    return (\n        <>\n            {props.includeReplay ? (\n                <LemonBanner type=\"info\">\n                    ðŸš§ NOTE: <Link to=\"https://posthog.com/docs/session-replay/mobile\">Mobile recording</Link> is\n                    currently in beta. We are keen to gather as much feedback as possible so if you try this out please\n                    let us know. You can send feedback via the{' '}\n                    <Link to=\"https://us.posthog.com/#panel=support%3Afeedback%3Asession_replay%3Alow\">\n                        in-app support panel\n                    </Link>{' '}\n                    or one of our other <Link to=\"https://posthog.com/docs/support-options\">support options</Link>.\n                </LemonBanner>\n            ) : null}\n            <h3>Install</h3>\n            <RNInstallSnippet {...props} />\n            <h3>Configure</h3>\n            <RNSetupSnippet {...props} />\n        </>\n    )\n}\n","import { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { JSInstallSnippet } from './js-web'\n\nfunction RemixAppClientCodeSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n    const { featureFlags } = useValues(featureFlagLogic)\n    const isPersonProfilesDisabled = featureFlags[FEATURE_FLAGS.PERSONLESS_EVENTS_NOT_SUPPORTED]\n\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`import { RemixBrowser } from \"@remix-run/react\";\nimport { startTransition, StrictMode, useEffect } from \"react\";\nimport { hydrateRoot } from \"react-dom/client\";\nimport posthog from \"posthog-js\";\n\nfunction PosthogInit() {\n  useEffect(() => {\n    posthog.init('${currentTeam?.api_token}', {\n      api_host: '${apiHostOrigin()}',\n      ${\n          isPersonProfilesDisabled\n              ? ``\n              : `person_profiles: 'identified_only', // or 'always' to create profiles for anonymous users as well`\n      }\n    });\n  }, []);\n\n  return null;\n}\n\nstartTransition(() => {\n  hydrateRoot(\n    document,\n    <StrictMode>\n        <RemixBrowser />\n        <PosthogInit/>\n    </StrictMode>\n  );\n});`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallRemixJSInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install posthog-js using your package manager</h3>\n            <JSInstallSnippet />\n\n            <h3>Initialize</h3>\n            <p>\n                Go to your <code>app/entry.client.tsx</code> file and initialize PostHog as a component:\n            </p>\n            <RemixAppClientCodeSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nfunction RubyInstallSnippet(): JSX.Element {\n    return <CodeSnippet language={Language.Bash}>gem \"posthog-ruby\"</CodeSnippet>\n}\n\nfunction RubySetupSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.Ruby}>\n            {`posthog = PostHog::Client.new({\n    api_key: \"${currentTeam?.api_token}\",\n    host: \"${apiHostOrigin()}\",\n    on_error: Proc.new { |status, msg| print msg }\n})`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallRubyInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install</h3>\n            <RubyInstallSnippet />\n            <h3>Configure</h3>\n            <RubySetupSnippet />\n        </>\n    )\n}\n","import { Link } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { JSInstallSnippet } from './js-web'\n\nfunction SvelteAppClientCodeSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n    const { featureFlags } = useValues(featureFlagLogic)\n    const isPersonProfilesDisabled = featureFlags[FEATURE_FLAGS.PERSONLESS_EVENTS_NOT_SUPPORTED]\n\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`import posthog from 'posthog-js'\nimport { browser } from '$app/environment';\n\nexport const load = async () => {\n\n  if (browser) {\n    posthog.init(\n      '${currentTeam?.api_token}',\n      { \n        api_host: '${apiHostOrigin()}',\n        ${\n            isPersonProfilesDisabled\n                ? ``\n                : `person_profiles: 'identified_only', // or 'always' to create profiles for anonymous users as well`\n        }\n      }\n    )\n  }\n  return\n};`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallSvelteJSInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install posthog-js using your package manager</h3>\n            <JSInstallSnippet />\n\n            <h3>Initialize</h3>\n            <p>\n                If you haven't created a root{' '}\n                <Link to=\"https://kit.svelte.dev/docs/routing#layout\" target=\"_blank\">\n                    layout\n                </Link>{' '}\n                already, create a new file called <code>+layout.js</code> in your <code>src/routes</code> folder. In\n                this file, check the environment is the browser, and initialize PostHog if so:\n            </p>\n            <SvelteAppClientCodeSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { JSInstallSnippet } from './js-web'\n\nfunction VueCreatePluginsFileSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.Bash}>\n            {`mkdir plugins #skip if you already have one\ncd plugins \ntouch posthog.js`}\n        </CodeSnippet>\n    )\n}\n\nfunction VuePluginsCodeSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`//./plugins/posthog.js\nimport posthog from \"posthog-js\";\n\nexport default {\n  install(app) {\n    app.config.globalProperties.$posthog = posthog.init(\n      '${currentTeam?.api_token}',\n      {\n        api_host: '${apiHostOrigin()}',\n      }\n    );\n  },\n};`}\n        </CodeSnippet>\n    )\n}\n\nfunction VueActivatePluginSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`//main.js\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport posthogPlugin from \"./plugins/posthog\"; //import the plugin. \n\nconst app = createApp(App);\n\napp.use(posthogPlugin); //install the plugin\napp.mount('#app')`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallVueInstructions(): JSX.Element {\n    return (\n        <>\n            <p>\n                The below guide is for integrating using plugins in Vue versions 3 and above. For integrating PostHog\n                using Provide/inject, Vue.prototype, or versions 2.7 and below, see our{' '}\n                <Link to=\"https://posthog.com/docs/libraries/vue-js\">Vue docs</Link>\n            </p>\n            <h3>Install posthog-js using your package manager</h3>\n            <JSInstallSnippet />\n            <h3>Create a plugin</h3>\n            <p>\n                Create a new file <code>posthog.js</code> in your plugins directory:\n            </p>\n            <VueCreatePluginsFileSnippet />\n            Add the following code to <code>posthog.js</code>:\n            <VuePluginsCodeSnippet />\n            <h3>Activate your plugin</h3>\n            <VueActivatePluginSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { JSInstallSnippet } from './js-web'\n\nfunction NextEnvVarsSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.Bash}>\n            {[`NEXT_PUBLIC_POSTHOG_KEY=${currentTeam?.api_token}`, `NEXT_PUBLIC_POSTHOG_HOST=${apiHostOrigin()}`].join(\n                '\\n'\n            )}\n        </CodeSnippet>\n    )\n}\n\nfunction NextPagesRouterCodeSnippet(): JSX.Element {\n    const { featureFlags } = useValues(featureFlagLogic)\n    const isPersonProfilesDisabled = featureFlags[FEATURE_FLAGS.PERSONLESS_EVENTS_NOT_SUPPORTED]\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`// pages/_app.js\nimport posthog from \"posthog-js\"\nimport { PostHogProvider } from 'posthog-js/react'\n\nif (typeof window !== 'undefined') { // checks that we are client-side\n  posthog.init(process.env.NEXT_PUBLIC_POSTHOG_KEY, {\n    api_host: process.env.NEXT_PUBLIC_POSTHOG_HOST || '${apiHostOrigin()}',\n    ${\n        isPersonProfilesDisabled\n            ? ``\n            : `person_profiles: 'identified_only', // or 'always' to create profiles for anonymous users as well`\n    }\n    loaded: (posthog) => {\n      if (process.env.NODE_ENV === 'development') posthog.debug() // debug mode in development\n    },\n  })\n}\n\nexport default function App(\n    { Component, pageProps: { session, ...pageProps } }\n) {\n    return (\n        <>\n            <PostHogProvider client={posthog}>\n                <Component {...pageProps} />\n            </PostHogProvider>\n        </>\n    )\n}`}\n        </CodeSnippet>\n    )\n}\n\nfunction NextAppRouterCodeSnippet(): JSX.Element {\n    const { featureFlags } = useValues(featureFlagLogic)\n    const isPersonProfilesDisabled = featureFlags[FEATURE_FLAGS.PERSONLESS_EVENTS_NOT_SUPPORTED]\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`// app/providers.js\n'use client'\nimport posthog from 'posthog-js'\nimport { PostHogProvider } from 'posthog-js/react'\n\nif (typeof window !== 'undefined') {\n  posthog.init(process.env.NEXT_PUBLIC_POSTHOG_KEY, {\n    api_host: process.env.NEXT_PUBLIC_POSTHOG_HOST,\n    ${\n        isPersonProfilesDisabled\n            ? ``\n            : `person_profiles: 'identified_only', // or 'always' to create profiles for anonymous users as well`\n    }\n  })\n}\nexport function CSPostHogProvider({ children }) {\n    return <PostHogProvider client={posthog}>{children}</PostHogProvider>\n}`}\n        </CodeSnippet>\n    )\n}\n\nfunction NextAppRouterLayoutSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`// app/layout.js\nimport './globals.css'\nimport { CSPostHogProvider } from './providers'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <CSPostHogProvider>\n        <body>{children}</body>\n      </CSPostHogProvider>\n    </html>\n  )\n}`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallNextJSInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install posthog-js using your package manager</h3>\n            <JSInstallSnippet />\n            <h3>Add environment variables</h3>\n            <p>\n                Add your environment variables to your .env.local file and to your hosting provider (e.g. Vercel,\n                Netlify, AWS). You can find your project API key in your project settings.\n            </p>\n            <p className=\"italic\">\n                These values need to start with <code className=\"not-italic\">NEXT_PUBLIC_</code> to be accessible on the\n                client-side.\n            </p>\n            <NextEnvVarsSnippet />\n\n            <h3>Initialize</h3>\n            <h4>With App router</h4>\n            <p>\n                If your Next.js app to uses the <Link to=\"https://nextjs.org/docs/app\">app router</Link>, you can\n                integrate PostHog by creating a providers file in your app folder. This is because the posthog-js\n                library needs to be initialized on the client-side using the Next.js{' '}\n                <Link to=\"https://nextjs.org/docs/getting-started/react-essentials#client-components\" target=\"_blank\">\n                    <code>'use client'</code> directive\n                </Link>\n                .\n            </p>\n            <NextAppRouterCodeSnippet />\n            <p>\n                Afterwards, import the <code>PHProvider</code> component in your <code>app/layout.js</code> file and\n                wrap your app with it.\n            </p>\n            <NextAppRouterLayoutSnippet />\n            <h4>With Pages router</h4>\n            <p>\n                If your Next.js app uses the <Link to=\"https://nextjs.org/docs/pages\">pages router</Link>, you can\n                integrate PostHog at the root of your app (pages/_app.js).\n            </p>\n            <NextPagesRouterCodeSnippet />\n        </>\n    )\n}\n","import { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { JSInstallSnippet } from './js-web'\n\nfunction ReactEnvVarsSnippet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <CodeSnippet language={Language.Bash}>\n            {[\n                `REACT_APP_PUBLIC_POSTHOG_KEY=${currentTeam?.api_token}`,\n                `REACT_APP_PUBLIC_POSTHOG_HOST=${apiHostOrigin()}`,\n            ].join('\\n')}\n        </CodeSnippet>\n    )\n}\n\nfunction ReactSetupSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nimport { PostHogProvider} from 'posthog-js/react'\n\nconst options = {\n  api_host: process.env.REACT_APP_PUBLIC_POSTHOG_HOST,\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <PostHogProvider \n      apiKey={process.env.REACT_APP_PUBLIC_POSTHOG_KEY}\n      options={options}\n    >\n      <App />\n    </PostHogProvider>\n  </React.StrictMode>\n);`}\n        </CodeSnippet>\n    )\n}\n\nexport function SDKInstallReactInstructions(): JSX.Element {\n    return (\n        <>\n            <h3>Install the package</h3>\n            <JSInstallSnippet />\n            <h3>Add environment variables</h3>\n            <ReactEnvVarsSnippet />\n            <h3>Initialize</h3>\n            <p>\n                Integrate PostHog at the root of your app (<code>src/index.js</code> for the default{' '}\n                <code>create-react-app</code>).\n            </p>\n            <ReactSetupSnippet />\n        </>\n    )\n}\n","import { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { WebAnalyticsMobileFinalSteps } from 'scenes/onboarding/sdks/web-analytics/FinalSteps'\n\nimport { SDKInstallRNInstructions } from '../sdk-install-instructions'\n\nexport function WebAnalyticsRNInstructions(): JSX.Element {\n    return (\n        <>\n            <SDKInstallRNInstructions />\n            <h3 className=\"mt-4\">Optional: Send a manual event</h3>\n            <p>Our package will autocapture events for you, but you can manually define events, too!</p>\n            <CodeSnippet language={Language.JSX}>{`// With hooks\nimport { usePostHog } from 'posthog-react-native'\n\nconst MyComponent = () => {\n    const posthog = usePostHog()\n\n    useEffect(() => {\n        posthog.capture(\"MyComponent loaded\", { foo: \"bar\" })\n    }, [])\n}\n        `}</CodeSnippet>\n            <WebAnalyticsMobileFinalSteps />\n        </>\n    )\n}\n","import { useActions, useValues } from 'kea'\nimport { NewSourcesWizard } from 'scenes/data-warehouse/new/NewSourceWizard'\nimport { sourceWizardLogic } from 'scenes/data-warehouse/new/sourceWizardLogic'\n\nimport { onboardingLogic, OnboardingStepKey } from '../onboardingLogic'\nimport { OnboardingStep } from '../OnboardingStep'\n\nexport function DataWarehouseSources({\n    stepKey = OnboardingStepKey.INSTALL,\n}: {\n    usersAction?: string\n    subtitle?: string\n    stepKey?: OnboardingStepKey\n}): JSX.Element {\n    const { goToNextStep } = useActions(onboardingLogic)\n    const { currentStep } = useValues(sourceWizardLogic)\n\n    return (\n        <OnboardingStep\n            title=\"Link data\"\n            stepKey={stepKey}\n            continueOverride={<></>}\n            showSkip={currentStep == 1}\n            subtitle={\n                currentStep == 1\n                    ? `Link all your important data from your CRM, payment processor, \n                or database and query across them seamlessly.`\n                    : undefined\n            }\n        >\n            <NewSourcesWizard onComplete={() => goToNextStep()} />\n        </OnboardingStep>\n    )\n}\n","import { actions, afterMount, connect, events, kea, listeners, path, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport { urlToAction } from 'kea-router'\nimport api from 'lib/api'\nimport { LemonSelectOptions } from 'lib/lemon-ui/LemonSelect/LemonSelect'\nimport { liveEventsTableLogic } from 'scenes/activity/live/liveEventsTableLogic'\n\nimport { HogQLQuery, NodeKind } from '~/queries/schema'\nimport { hogql } from '~/queries/utils'\nimport { ProductKey, SDK, SDKInstructionsMap } from '~/types'\n\nimport { onboardingLogic } from '../onboardingLogic'\nimport { allSDKs } from './allSDKs'\nimport type { sdksLogicType } from './sdksLogicType'\n\n/*\nTo add SDK instructions for your product:\n    1. If needed, add a new ProductKey enum value in ~/types.ts\n    2. Create a folder in this directory for your product\n    3. Create and export the instruction components\n    4. Create a file like ProductAnalyticsSDKInstructions.tsx and export the instructions object with the SDKKey:Component mapping\n    6. Add the SDK component to your product onboarding component\n*/\n\nconst getSourceOptions = (availableSDKInstructionsMap: SDKInstructionsMap): LemonSelectOptions<string> => {\n    const filteredSDKsTags = allSDKs\n        .filter((sdk) => Object.keys(availableSDKInstructionsMap).includes(sdk.key))\n        .flatMap((sdk) => sdk.tags)\n    const uniqueTags = filteredSDKsTags.filter((item, index) => filteredSDKsTags.indexOf(item) === index)\n    const selectOptions = uniqueTags.map((tag) => ({\n        label: tag,\n        value: tag,\n    }))\n    return selectOptions\n}\n\n/*\nProducts that will often be installed in multiple places, eg. web and mobile\n*/\nexport const multiInstallProducts = [ProductKey.PRODUCT_ANALYTICS, ProductKey.FEATURE_FLAGS]\n\nexport const sdksLogic = kea<sdksLogicType>([\n    path(['scenes', 'onboarding', 'sdks', 'sdksLogic']),\n    connect({\n        values: [onboardingLogic, ['productKey'], liveEventsTableLogic, ['eventHosts']],\n    }),\n    actions({\n        setSourceFilter: (sourceFilter: string | null) => ({ sourceFilter }),\n        filterSDKs: true,\n        setSDKs: (sdks: SDK[]) => ({ sdks }),\n        setSelectedSDK: (sdk: SDK | null) => ({ sdk }),\n        setSourceOptions: (sourceOptions: LemonSelectOptions<string>) => ({ sourceOptions }),\n        resetSDKs: true,\n        setAvailableSDKInstructionsMap: (sdkInstructionMap: SDKInstructionsMap) => ({ sdkInstructionMap }),\n        setShowSideBySide: (showSideBySide: boolean) => ({ showSideBySide }),\n        setPanel: (panel: 'instructions' | 'options') => ({ panel }),\n        setHasSnippetEvents: (hasSnippetEvents: boolean) => ({ hasSnippetEvents }),\n        setSnippetHosts: (snippetHosts: string[]) => ({ snippetHosts }),\n    }),\n    reducers({\n        sourceFilter: [\n            null as string | null,\n            {\n                setSourceFilter: (_, { sourceFilter }) => sourceFilter,\n            },\n        ],\n        sdks: [\n            [] as SDK[] | null,\n            {\n                setSDKs: (_, { sdks }) => sdks,\n            },\n        ],\n        selectedSDK: [\n            null as SDK | null,\n            {\n                setSelectedSDK: (_, { sdk }) => sdk,\n            },\n        ],\n        sourceOptions: [\n            [] as LemonSelectOptions<string>,\n            {\n                setSourceOptions: (_, { sourceOptions }) => sourceOptions,\n            },\n        ],\n        availableSDKInstructionsMap: [\n            {} as SDKInstructionsMap,\n            {\n                setAvailableSDKInstructionsMap: (_, { sdkInstructionMap }) => sdkInstructionMap,\n            },\n        ],\n        showSideBySide: [\n            null as boolean | null,\n            {\n                setShowSideBySide: (_, { showSideBySide }) => showSideBySide,\n            },\n        ],\n        panel: [\n            'options' as 'instructions' | 'options',\n            {\n                setPanel: (_, { panel }) => panel,\n            },\n        ],\n        hasSnippetEvents: {\n            setHasSnippetEvents: (_, { hasSnippetEvents }) => hasSnippetEvents,\n        },\n        snippetHosts: [\n            [] as string[],\n            {\n                setSnippetHosts: (_, { snippetHosts }) => snippetHosts,\n            },\n        ],\n    }),\n    selectors({\n        showSourceOptionsSelect: [\n            (selectors) => [selectors.sourceOptions, selectors.availableSDKInstructionsMap],\n            (sourceOptions: LemonSelectOptions<string>, availableSDKInstructionsMap: SDKInstructionsMap): boolean => {\n                // more than two source options since one will almost always be \"recommended\"\n                // more than 5 sdks since with fewer you don't really need to filter\n                return Object.keys(availableSDKInstructionsMap).length > 5 && sourceOptions.length > 2\n            },\n        ],\n        combinedSnippetAndLiveEventsHosts: [\n            (selectors) => [selectors.snippetHosts, selectors.eventHosts],\n            (snippetHosts: string[], eventHosts: string[]): string[] => {\n                const combinedSnippetAndLiveEventsHosts = snippetHosts\n                for (const host of eventHosts) {\n                    const hostProtocol = new URL(host).protocol\n                    const currentProtocol = window.location.protocol\n                    if (hostProtocol === currentProtocol && !combinedSnippetAndLiveEventsHosts.includes(host)) {\n                        combinedSnippetAndLiveEventsHosts.push(host)\n                    }\n                }\n                return combinedSnippetAndLiveEventsHosts\n            },\n        ],\n    }),\n    loaders(({ actions }) => ({\n        hasSnippetEvents: [\n            null as boolean | null,\n            {\n                loadSnippetEvents: async () => {\n                    const query: HogQLQuery = {\n                        kind: NodeKind.HogQLQuery,\n                        query: hogql`SELECT\n                                        max(timestamp) AS latest_timestamp,\n                                        concat(\n                                            concat({protocol}, '//'),\n                                            properties.$host\n                                        ) AS full_host,\n                                    FROM events\n                                    WHERE timestamp >= now() - INTERVAL 3 DAY\n                                    AND timestamp <= now()\n                                    AND properties.$lib = 'web'\n                                    AND properties.$host is not null\n                                    AND startsWith(properties.$current_url, {protocol})\n                                    GROUP BY full_host\n                                    ORDER BY latest_timestamp DESC\n                                    LIMIT 7`,\n                        values: {\n                            protocol: window.location.protocol,\n                        },\n                    }\n                    const res = await api.query(query)\n                    const hasEvents = !!(res.results?.length ?? 0 > 0)\n                    const snippetHosts = res.results?.map((result) => result[1]).filter((val) => !!val) ?? []\n                    if (hasEvents) {\n                        actions.setSnippetHosts(snippetHosts)\n                    }\n                    return hasEvents\n                },\n            },\n        ],\n    })),\n    listeners(({ actions, values }) => ({\n        filterSDKs: () => {\n            const filteredSDks: SDK[] = allSDKs\n                .filter((sdk) => {\n                    if (!values.sourceFilter || !sdk) {\n                        return true\n                    }\n                    return sdk.tags.includes(values.sourceFilter)\n                })\n                .filter((sdk) => Object.keys(values.availableSDKInstructionsMap).includes(sdk.key))\n            actions.setSDKs(filteredSDks)\n            actions.setSourceOptions(getSourceOptions(values.availableSDKInstructionsMap))\n        },\n        setAvailableSDKInstructionsMap: () => {\n            actions.filterSDKs()\n        },\n        setSDKs: () => {\n            if (!values.selectedSDK && values.showSideBySide == true) {\n                actions.setSelectedSDK(values.sdks?.[0] || null)\n            }\n        },\n        setSourceFilter: () => {\n            actions.setSelectedSDK(null)\n            actions.filterSDKs()\n        },\n        [onboardingLogic.actionTypes.setProductKey]: () => {\n            // TODO: This doesn't seem to run when the setProductKey action is called in onboardingLogic...\n            actions.resetSDKs()\n        },\n        resetSDKs: () => {\n            actions.filterSDKs()\n            actions.setSelectedSDK(null)\n            actions.setSourceFilter(null)\n            actions.setSourceOptions(getSourceOptions(values.availableSDKInstructionsMap))\n        },\n        setSelectedSDK: () => {\n            if (values.selectedSDK) {\n                actions.setPanel('instructions')\n            }\n        },\n        setShowSideBySide: () => {\n            if (values.showSideBySide && !values.selectedSDK) {\n                actions.setSelectedSDK(values.sdks?.[0] || null)\n            }\n        },\n    })),\n    events(({ actions }) => ({\n        afterMount: () => {\n            actions.filterSDKs()\n        },\n    })),\n    afterMount(({ actions }) => {\n        actions.loadSnippetEvents()\n    }),\n    urlToAction(({ actions }) => ({\n        '/onboarding/:productKey': (_productKey, { sdk }) => {\n            const matchedSDK = allSDKs.find((s) => s.key === sdk)\n            if (matchedSDK) {\n                actions.setSelectedSDK(matchedSDK)\n            }\n        },\n    })),\n])\n","import { CodeSnippet, Language } from 'lib/components/CodeSnippet'\n\nimport { SDKInstallDjangoInstructions } from '../sdk-install-instructions'\nimport { PersonModeEventPropertyInstructions } from '../shared-snippets'\n\nfunction DjangoCaptureSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.Python}>{`import posthog\n    \nposthog.capture('test-id', 'test-event')`}</CodeSnippet>\n    )\n}\n\nexport function ProductAnalyticsDjangoInstructions(): JSX.Element {\n    return (\n        <>\n            <SDKInstallDjangoInstructions />\n            <h3>Send an Event</h3>\n            <DjangoCaptureSnippet />\n            <PersonModeEventPropertyInstructions />\n        </>\n    )\n}\n","import { CodeSnippet, Language } from 'lib/components/CodeSnippet'\n\nimport { SDKInstallNodeInstructions } from '../sdk-install-instructions'\n\nfunction NodeCaptureSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.JavaScript}>\n            {`client.capture({\n    distinctId: 'test-id',\n    event: 'test-event'\n})\n\n// Send queued events immediately. Use for example in a serverless environment\n// where the program may terminate before everything is sent.\n// Use \\`client.flush()\\` instead if you still need to send more events or fetch feature flags.\nclient.shutdown()`}\n        </CodeSnippet>\n    )\n}\n\nexport function ProductAnalyticsNodeInstructions(): JSX.Element {\n    return (\n        <>\n            <SDKInstallNodeInstructions />\n            <h3>Send an Event</h3>\n            <NodeCaptureSnippet />\n        </>\n    )\n}\n","import { CodeSnippet, Language } from 'lib/components/CodeSnippet'\n\nimport { SDKKey } from '~/types'\n\nimport { SDKInstallRNInstructions } from '../sdk-install-instructions'\nimport { AdvertiseMobileReplay } from '../session-replay/SessionReplaySDKInstructions'\n\nfunction RNCaptureSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.JSX}>{`// With hooks\nimport { usePostHog } from 'posthog-react-native'\n\nconst MyComponent = () => {\n    const posthog = usePostHog()\n\n    useEffect(() => {\n        posthog.capture(\"MyComponent loaded\", { foo: \"bar\" })\n    }, [])\n}\n`}</CodeSnippet>\n    )\n}\n\nexport function ProductAnalyticsRNInstructions(): JSX.Element {\n    return (\n        <>\n            <SDKInstallRNInstructions />\n            <h3 className=\"mt-4\">Optional: Send a manual event</h3>\n            <p>Our package will autocapture events for you, but you can manually define events, too!</p>\n            <RNCaptureSnippet />\n            <AdvertiseMobileReplay context=\"product-analytics-onboarding\" sdkKey={SDKKey.REACT_NATIVE} />\n        </>\n    )\n}\n","import { Link } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nexport function ProductAnalyticsHeliconeInstructions(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <>\n            <h3>Install</h3>\n            <p>\n                <Link to=\"https://helicone.ai/\" target=\"_blank\">\n                    Helicone\n                </Link>{' '}\n                supports most popular LLM models and you can bring your Helicone data into PostHog for analysis. To get\n                started:\n            </p>\n            <ol className=\"space-y-4\">\n                <li>\n                    Sign up to{' '}\n                    <Link to=\"https://www.helicone.ai/\" target=\"_blank\">\n                        Helicone\n                    </Link>{' '}\n                    and add it to your LLM app.\n                </li>\n                <li>\n                    Similar to how you add a{' '}\n                    <Link\n                        to=\"https://docs.helicone.ai/helicone-headers/header-directory#supported-headers\"\n                        target=\"_blank\"\n                    >\n                        Helicone-Auth header\n                    </Link>{' '}\n                    when installing Helicone, add two new headers\n                    <strong> Helicone-Posthog-Key</strong> and <strong>Helicone-Posthog-Host</strong> with your PostHog\n                    details:\n                    <CodeSnippet language={Language.Python}>\n                        {`# Example for adding it to OpenAI in Python\n                        \nclient = OpenAI(\napi_key=\"your-api-key-here\",  # Replace with your OpenAI API key\nbase_url=\"https://oai.hconeai.com/v1\",  # Set the API endpoint\ndefault_headers= { \n    \"Helicone-Auth\": f\"Bearer {HELICONE_API_KEY}\",\n    \"Helicone-Posthog-Key\": \"${currentTeam?.api_token}}\",\n    \"Helicone-Posthog-Host\": \"${apiHostOrigin()}\",\n    }\n)\n                        `}\n                    </CodeSnippet>\n                </li>\n            </ol>\n            <p>Helicone events will now be exported into PostHog as soon as they're available.</p>\n        </>\n    )\n}\n","import { Spinner } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { FEATURE_FLAGS, SESSION_REPLAY_MINIMUM_DURATION_OPTIONS } from 'lib/constants'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { useEffect, useState } from 'react'\nimport { billingLogic } from 'scenes/billing/billingLogic'\nimport { newDashboardLogic } from 'scenes/dashboard/newDashboardLogic'\nimport { WebAnalyticsSDKInstructions } from 'scenes/onboarding/sdks/web-analytics/WebAnalyticsSDKInstructions'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { AvailableFeature, ProductKey } from '~/types'\n\nimport { DataWarehouseSources } from './data-warehouse/sources'\nimport { OnboardingBillingStep } from './OnboardingBillingStep'\nimport { OnboardingInviteTeammates } from './OnboardingInviteTeammates'\nimport { onboardingLogic, OnboardingStepKey } from './onboardingLogic'\nimport { OnboardingProductConfiguration } from './OnboardingProductConfiguration'\nimport { ProductConfigOption } from './onboardingProductConfigurationLogic'\nimport { OnboardingProductIntroduction } from './OnboardingProductIntroduction'\nimport { OnboardingReverseProxy } from './OnboardingReverseProxy'\nimport { OnboardingDashboardTemplateConfigureStep } from './productAnalyticsSteps/DashboardTemplateConfigureStep'\nimport { OnboardingDashboardTemplateSelectStep } from './productAnalyticsSteps/DashboardTemplateSelectStep'\nimport { FeatureFlagsSDKInstructions } from './sdks/feature-flags/FeatureFlagsSDKInstructions'\nimport { ProductAnalyticsSDKInstructions } from './sdks/product-analytics/ProductAnalyticsSDKInstructions'\nimport { SDKs } from './sdks/SDKs'\nimport { SessionReplaySDKInstructions } from './sdks/session-replay/SessionReplaySDKInstructions'\nimport { SurveysSDKInstructions } from './sdks/surveys/SurveysSDKInstructions'\n\nexport const scene: SceneExport = {\n    component: Onboarding,\n    logic: onboardingLogic,\n}\n\n/**\n * Wrapper for custom onboarding content. This automatically includes billing, other products, and invite steps.\n */\nconst OnboardingWrapper = ({ children }: { children: React.ReactNode }): JSX.Element => {\n    const {\n        productKey,\n        currentOnboardingStep,\n        shouldShowBillingStep,\n        shouldShowReverseProxyStep,\n        product,\n        includeIntro,\n        waitForBilling,\n    } = useValues(onboardingLogic)\n    const { billing, billingLoading } = useValues(billingLogic)\n    const { setAllOnboardingSteps } = useActions(onboardingLogic)\n    const [allSteps, setAllSteps] = useState<JSX.Element[]>([])\n\n    useEffect(() => {\n        createAllSteps()\n    }, [children, billingLoading])\n\n    useEffect(() => {\n        if (!allSteps.length || (billingLoading && waitForBilling)) {\n            return\n        }\n        setAllOnboardingSteps(allSteps)\n    }, [allSteps])\n\n    if (!product || !children) {\n        return <></>\n    }\n\n    const createAllSteps = (): void => {\n        let steps = []\n        if (Array.isArray(children)) {\n            steps = [...children]\n        } else {\n            steps = [children as JSX.Element]\n        }\n        const billingProduct = billing?.products.find((p) => p.type === productKey)\n        if (includeIntro && billingProduct) {\n            const IntroStep = <OnboardingProductIntroduction stepKey={OnboardingStepKey.PRODUCT_INTRO} />\n            steps = [IntroStep, ...steps]\n        }\n        if (shouldShowReverseProxyStep) {\n            const ReverseProxyStep = <OnboardingReverseProxy stepKey={OnboardingStepKey.REVERSE_PROXY} />\n            steps = [...steps, ReverseProxyStep]\n        }\n        if (shouldShowBillingStep && billingProduct) {\n            const BillingStep = <OnboardingBillingStep product={billingProduct} stepKey={OnboardingStepKey.PLANS} />\n            steps = [...steps, BillingStep]\n        }\n        const inviteTeammatesStep = <OnboardingInviteTeammates stepKey={OnboardingStepKey.INVITE_TEAMMATES} />\n        steps = [...steps, inviteTeammatesStep].filter(Boolean)\n        setAllSteps(steps)\n    }\n\n    if (!currentOnboardingStep) {\n        return (\n            <div className=\"flex items-center justify-center my-20\">\n                <Spinner className=\"text-2xl text-muted w-10 h-10\" />\n            </div>\n        )\n    }\n\n    return currentOnboardingStep || <></>\n}\n\nconst ProductAnalyticsOnboarding = (): JSX.Element => {\n    const { currentTeam } = useValues(teamLogic)\n    const { featureFlags } = useValues(featureFlagLogic)\n    // mount the logic here so that it stays mounted for the entire onboarding flow\n    // not sure if there is a better way to do this\n    useValues(newDashboardLogic)\n\n    const showTemplateSteps =\n        featureFlags[FEATURE_FLAGS.ONBOARDING_DASHBOARD_TEMPLATES] == 'test' && window.innerWidth > 1000\n\n    const options: ProductConfigOption[] = [\n        {\n            title: 'Autocapture frontend interactions',\n            description: `If you use our JavaScript or React Native libraries, we'll automagically \n            capture frontend interactions like clicks, submits, and more. Fine-tune what you \n            capture directly in your code snippet.`,\n            teamProperty: 'autocapture_opt_out',\n            value: !currentTeam?.autocapture_opt_out,\n            type: 'toggle',\n            inverseToggle: true,\n            visible: true,\n        },\n        {\n            title: 'Enable heatmaps',\n            description: `If you use our JavaScript libraries, we can capture general clicks, mouse movements,\n                   and scrolling to create heatmaps. \n                   No additional events are created, and you can disable this at any time.`,\n            teamProperty: 'heatmaps_opt_in',\n            value: currentTeam?.heatmaps_opt_in ?? true,\n            type: 'toggle',\n            visible: true,\n        },\n        {\n            title: 'Enable web vitals autocapture',\n            description: `Uses Google's web vitals library to automagically capture performance information.`,\n            teamProperty: 'autocapture_web_vitals_opt_in',\n            value: currentTeam?.autocapture_web_vitals_opt_in ?? true,\n            type: 'toggle',\n            visible: true,\n        },\n        {\n            title: 'Enable session recordings',\n            description: `Turn on session recordings and watch how users experience your app. We will also turn on console log and network performance recording. You can change these settings any time in the settings panel.`,\n            teamProperty: 'session_recording_opt_in',\n            value: currentTeam?.session_recording_opt_in ?? true,\n            type: 'toggle',\n            visible: true,\n        },\n        {\n            title: 'Capture console logs',\n            description: `Automatically enable console log capture`,\n            teamProperty: 'capture_console_log_opt_in',\n            value: true,\n            type: 'toggle',\n            visible: false,\n        },\n        {\n            title: 'Capture network performance',\n            description: `Automatically enable network performance capture`,\n            teamProperty: 'capture_performance_opt_in',\n            value: true,\n            type: 'toggle',\n            visible: false,\n        },\n    ]\n\n    return (\n        <OnboardingWrapper>\n            <SDKs\n                usersAction=\"collecting events\"\n                sdkInstructionMap={ProductAnalyticsSDKInstructions}\n                stepKey={OnboardingStepKey.INSTALL}\n            />\n            <OnboardingProductConfiguration stepKey={OnboardingStepKey.PRODUCT_CONFIGURATION} options={options} />\n\n            {/* this is two conditionals because they need to be direct children of the wrapper */}\n            {showTemplateSteps ? (\n                <OnboardingDashboardTemplateSelectStep stepKey={OnboardingStepKey.DASHBOARD_TEMPLATE} />\n            ) : null}\n            {showTemplateSteps ? (\n                <OnboardingDashboardTemplateConfigureStep stepKey={OnboardingStepKey.DASHBOARD_TEMPLATE_CONFIGURE} />\n            ) : null}\n        </OnboardingWrapper>\n    )\n}\n\nconst WebAnalyticsOnboarding = (): JSX.Element => {\n    const { currentTeam } = useValues(teamLogic)\n\n    const options: ProductConfigOption[] = [\n        {\n            title: 'Autocapture frontend interactions',\n            description: `If you use our JavaScript or React Native libraries, we'll automagically \n            capture frontend interactions like clicks, submits, and more. Fine-tune what you \n            capture directly in your code snippet.`,\n            teamProperty: 'autocapture_opt_out',\n            value: !currentTeam?.autocapture_opt_out,\n            type: 'toggle',\n            inverseToggle: true,\n            visible: true,\n        },\n        {\n            title: 'Enable heatmaps',\n            description: `If you use our JavaScript libraries, we can capture general clicks, mouse movements,\n                   and scrolling to create heatmaps. \n                   No additional events are created, and you can disable this at any time.`,\n            teamProperty: 'heatmaps_opt_in',\n            value: currentTeam?.heatmaps_opt_in ?? true,\n            type: 'toggle',\n            visible: true,\n        },\n        {\n            title: 'Enable web vitals autocapture',\n            description: `Uses Google's web vitals library to automagically capture performance information.`,\n            teamProperty: 'autocapture_web_vitals_opt_in',\n            value: currentTeam?.autocapture_web_vitals_opt_in ?? true,\n            type: 'toggle',\n            visible: true,\n        },\n        {\n            title: 'Enable session recordings',\n            description: `Turn on session recordings and watch how users experience your app. We will also turn on console log and network performance recording. You can change these settings any time in the settings panel.`,\n            teamProperty: 'session_recording_opt_in',\n            value: currentTeam?.session_recording_opt_in ?? true,\n            type: 'toggle',\n            visible: true,\n        },\n        {\n            title: 'Capture network performance',\n            description: `Automatically enable network performance capture`,\n            teamProperty: 'capture_performance_opt_in',\n            value: true,\n            type: 'toggle',\n            visible: false,\n        },\n    ]\n\n    return (\n        <OnboardingWrapper>\n            <SDKs\n                usersAction=\"collecting events\"\n                sdkInstructionMap={WebAnalyticsSDKInstructions}\n                stepKey={OnboardingStepKey.INSTALL}\n            />\n            <OnboardingProductConfiguration stepKey={OnboardingStepKey.PRODUCT_CONFIGURATION} options={options} />\n        </OnboardingWrapper>\n    )\n}\nconst SessionReplayOnboarding = (): JSX.Element => {\n    const { hasAvailableFeature } = useValues(userLogic)\n    const { currentTeam } = useValues(teamLogic)\n\n    const configOptions: ProductConfigOption[] = [\n        {\n            type: 'toggle',\n            title: 'Capture console logs',\n            description: `Capture console logs as a part of user session recordings. \n                            Use the console logs alongside recordings to debug any issues with your app.`,\n            teamProperty: 'capture_console_log_opt_in',\n            value: currentTeam?.capture_console_log_opt_in ?? true,\n            visible: true,\n        },\n        {\n            type: 'toggle',\n            title: 'Capture network performance',\n            description: `Capture performance and network information alongside recordings. Use the\n                            network requests and timings in the recording player to help you debug issues with your app.`,\n            teamProperty: 'capture_performance_opt_in',\n            value: currentTeam?.capture_performance_opt_in ?? true,\n            visible: true,\n        },\n        {\n            type: 'toggle',\n            title: 'Record user sessions',\n            description: 'Watch recordings of how users interact with your web app to see what can be improved.',\n            teamProperty: 'session_recording_opt_in',\n            value: true,\n            visible: false,\n        },\n    ]\n\n    if (hasAvailableFeature(AvailableFeature.REPLAY_RECORDING_DURATION_MINIMUM)) {\n        configOptions.push({\n            type: 'select',\n            title: 'Minimum session duration (seconds)',\n            description: `Only record sessions that are longer than the specified duration. \n                            Start with it low and increase it later if you're getting too many short sessions.`,\n            teamProperty: 'session_recording_minimum_duration_milliseconds',\n            value: currentTeam?.session_recording_minimum_duration_milliseconds || null,\n            selectOptions: SESSION_REPLAY_MINIMUM_DURATION_OPTIONS,\n            visible: true,\n        })\n    }\n\n    return (\n        <OnboardingWrapper>\n            <SDKs\n                usersAction=\"recording sessions\"\n                sdkInstructionMap={SessionReplaySDKInstructions}\n                subtitle=\"Choose the framework your frontend is built on, or use our all-purpose JavaScript library. If you already have the snippet installed, you can skip this step!\"\n                stepKey={OnboardingStepKey.INSTALL}\n            />\n            <OnboardingProductConfiguration\n                stepKey={OnboardingStepKey.PRODUCT_CONFIGURATION}\n                options={configOptions}\n                product={ProductKey.SESSION_REPLAY}\n            />\n        </OnboardingWrapper>\n    )\n}\n\nconst FeatureFlagsOnboarding = (): JSX.Element => {\n    return (\n        <OnboardingWrapper>\n            <SDKs\n                usersAction=\"loading flags & experiments\"\n                sdkInstructionMap={FeatureFlagsSDKInstructions}\n                subtitle=\"Choose the framework where you want to use feature flags and/or run experiments, or use our all-purpose JavaScript library. If you already have the snippet installed, you can skip this step!\"\n                stepKey={OnboardingStepKey.INSTALL}\n            />\n        </OnboardingWrapper>\n    )\n}\n\nconst SurveysOnboarding = (): JSX.Element => {\n    return (\n        <OnboardingWrapper>\n            <SDKs\n                usersAction=\"taking surveys\"\n                sdkInstructionMap={SurveysSDKInstructions}\n                subtitle=\"Choose the framework your frontend is built on, or use our all-purpose JavaScript library. If you already have the snippet installed, you can skip this step!\"\n                stepKey={OnboardingStepKey.INSTALL}\n            />\n        </OnboardingWrapper>\n    )\n}\n\nconst DataWarehouseOnboarding = (): JSX.Element => {\n    return (\n        <OnboardingWrapper>\n            <DataWarehouseSources usersAction=\"Data Warehouse\" stepKey={OnboardingStepKey.LINK_DATA} />\n        </OnboardingWrapper>\n    )\n}\n\nexport const onboardingViews = {\n    [ProductKey.PRODUCT_ANALYTICS]: ProductAnalyticsOnboarding,\n    [ProductKey.WEB_ANALYTICS]: WebAnalyticsOnboarding,\n    [ProductKey.SESSION_REPLAY]: SessionReplayOnboarding,\n    [ProductKey.FEATURE_FLAGS]: FeatureFlagsOnboarding,\n    [ProductKey.SURVEYS]: SurveysOnboarding,\n    [ProductKey.DATA_WAREHOUSE]: DataWarehouseOnboarding,\n}\n\nexport function Onboarding(): JSX.Element | null {\n    const { product, productKey } = useValues(onboardingLogic)\n\n    if (!product || !productKey) {\n        return <></>\n    }\n    const OnboardingView = onboardingViews[productKey]\n\n    return <OnboardingView />\n}\n"],"names":[],"sourceRoot":""}