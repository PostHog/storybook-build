{"version":3,"file":"73705.e96ebaa7.iframe.bundle.js","mappings":";;AA8CA","sources":["webpack://posthog/./frontend/src/scenes/error-tracking/errorTrackingGroupSceneLogic.ts"],"sourcesContent":["import { afterMount, kea, path, props, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { uuid } from 'lib/utils'\nimport { Scene } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { HogQLQuery, NodeKind } from '~/queries/schema'\nimport { hogql } from '~/queries/utils'\nimport { Breadcrumb, ErrorTrackingGroup, EventType } from '~/types'\n\nimport type { errorTrackingGroupSceneLogicType } from './errorTrackingGroupSceneLogicType'\n\nexport interface ErrorTrackingGroupSceneLogicProps {\n    id: ErrorTrackingGroup['id']\n}\n\nexport const errorTrackingGroupSceneLogic = kea<errorTrackingGroupSceneLogicType>([\n    path((key) => ['scenes', 'error-tracking', 'errorTrackingGroupSceneLogic', key]),\n    props({} as ErrorTrackingGroupSceneLogicProps),\n\n    loaders(({ props }) => ({\n        group: [\n            null as ErrorTrackingGroup | null,\n            {\n                loadGroup: async () => {\n                    // TODO: properly flesh out this page\n                    return {\n                        id: uuid(),\n                        title: 'Placeholder title',\n                        description: 'This is an error message',\n                        occurrences: 0,\n                        uniqueSessions: 0,\n                        uniqueUsers: 0,\n                    }\n                },\n            },\n        ],\n        eventProperties: [\n            [] as EventType['properties'][],\n            {\n                loadGroupEvents: async () => {\n                    const query: HogQLQuery = {\n                        kind: NodeKind.HogQLQuery,\n                        query: hogql`SELECT properties\n                                FROM events e\n                                WHERE event = '$exception' AND properties.$exception_type = ${props.id}`,\n                    }\n                    const res = await api.query(query)\n                    return res.results.map((r) => JSON.parse(r[0]))\n                },\n            },\n        ],\n    })),\n\n    selectors({\n        breadcrumbs: [\n            (s) => [s.group],\n            (group): Breadcrumb[] => {\n                return [\n                    {\n                        key: Scene.ErrorTracking,\n                        name: 'Error tracking',\n                        path: urls.errorTracking(),\n                    },\n                    {\n                        key: [Scene.ErrorTrackingGroup, group?.id || 'unknown'],\n                        name: group?.title,\n                    },\n                ]\n            },\n        ],\n    }),\n\n    afterMount(({ actions }) => {\n        actions.loadGroup()\n        actions.loadGroupEvents()\n    }),\n])\n"],"names":[],"sourceRoot":""}