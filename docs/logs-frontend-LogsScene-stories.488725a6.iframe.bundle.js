"use strict";(self.webpackChunk_posthog_storybook=self.webpackChunk_posthog_storybook||[]).push([[90832],{"../../products/logs/frontend/LogsScene.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{LogsScene:()=>LogsScene,__namedExportsOrder:()=>__namedExportsOrder,default:()=>LogsScene_stories});var lib=__webpack_require__("../../node_modules/.pnpm/kea-router@3.4.1_kea@3.1.7_react@18.2.0_/node_modules/kea-router/lib/index.js"),react=__webpack_require__("../../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),dayjs=__webpack_require__("../../frontend/src/lib/dayjs.ts"),utils=__webpack_require__("../../frontend/src/lib/utils.tsx");let deterministicRandom=function createSeededRandom(seed){let state=1234;return function(){return(state=(0x41c64e6d*state+12345)%0x80000000)/0x80000000}}(1234);var App=__webpack_require__("../../frontend/src/scenes/App.tsx"),urls=__webpack_require__("../../frontend/src/scenes/urls.ts"),browser=__webpack_require__("../../frontend/src/mocks/browser.tsx"),jsx_runtime=__webpack_require__("../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");let delayIfNotTestRunner=async()=>{await new Promise(resolve=>setTimeout(resolve,(0,utils.es)()?0:200+1e3*Math.random()))},keysAndValues={"service.name":["posthog-web","posthog-feature-flags","posthog-surveys","posthog-web-django","cdp-behavioural-events-consumer","cdp-events-consumer","cdp-legacy-events-consumer","capture"],"k8s.namespace.name":["posthog","internal","billing"],"k8s.pod.name":["posthog-web","posthog-feature-flags","posthog-surveys","posthog-web-django","cdp-behavioural-events-consumer","cdp-events-consumer","cdp-legacy-events-consumer","capture"],"k8s.container.restart_count":["0","1","2","3","4","5","6","7","8","9"],"k8s.node.name":["node-1","node-2","node-3","node-4","node-5","node-6","node-7","node-8","node-9","node-10"],"log.iostream":["stdout","stderr"]},EXAMPLES={"posthog-web":{attributes:{"k8s.namespace.name":"posthog","service.name":"posthog-web","k8s.pod.name":"posthog-web","k8s.container.name":"posthog-web"},logs:[{message:'{"request_id": "0904e6ff-da7e-4d66-af79-0c111bb47cab", "ip": "1.0.0.1", "event": "geoIP computation error: The address 172.0.1.1 is not in the database.",  "host": "us.i.posthog.com", "container_hostname": "posthog-web-django-c5f54bd98-cswsg", "timestamp": "2025-10-10T12:56:52.826524Z", "logger": "posthog.geoip", "level": "error", "pid": 65403, "tid": 281466655207264, "exception": "Traceback (most recent call last):\n File "/code/posthog/geoip.py", line 52, in get_geoip_properties\n geoip_properties = geoip.city(ip_address)\n ^^^^^^^^^^^^^^^^^^^^^^\n File "/python-runtime/lib/python3.11/site-packages/django/contrib/gis/geoip2/base.py", line 181, in city\n return City(self._city.city(enc_query))\n ^^^^^^^^^^^^^^^^^^^^^^^^^^\n File "/python-runtime/lib/python3.11/site-packages/geoip2/database.py", line 150, in city\n return cast(City, self._model_for(geoip2.models.City, "City", ip_address))\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File "/python-runtime/lib/python3.11/site-packages/geoip2/database.py", line 253, in _model_for\n (record, prefix_len) = self._get(types, ip_address)\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n File "/python-runtime/lib/python3.11/site-packages/geoip2/database.py", line 240, in _get\n raise geoip2.errors.AddressNotFoundError(\ngeoip2.errors.AddressNotFoundError: The address 172.0.1.1 is not in the database."}',level:"error"},{message:'{"request_id": "8cbf3d86-5270-4129-a9a7-5c0908a6a806", "ip": "1.0.0.1", "request": "<ASGIRequest: OPTIONS \'/array/123/config\'>", "user_agent": "Mozilla/5.0 (iPad; CPU OS 18_6_2 like Mac OS X) AppleWebKit/605.1.15", "event": "request_started",  "host": "us-assets.i.posthog.com", "container_hostname": "posthog-web-django-c5f54bd98-z2kjj", "timestamp": "2025-10-10T12:58:08.090793Z", "logger": "django_structlog.middlewares.request", "level": "info", "pid": 44582, "tid": 281465917009760}',level:"info"},{message:"/python-runtime/lib/python3.11/site-packages/django/http/response.py:517: Warning: StreamingHttpResponse must consume synchronous iterators in order to serve them asynchronously. Use an asynchronous iterator instead.",level:"warn"}]},"cdp-events-consumer":{attributes:{"k8s.namespace.name":"posthog","service.name":"cdp-events-consumer","k8s.pod.name":"cdp-events-consumer","k8s.container.name":"cdp-events-consumer"},logs:[{message:"[CDP-PROCESSED-EVENTS] 🔁 CdpEventsConsumer - handling batch",level:"info",attributes:{size:"100"}},{message:"[CDP-PROCESSED-EVENTS] 🦔 [HogFunction] Filter took longer than expected",level:"warn",attributes:{hog_function_id:"123",hog_function_name:"Filter fail test",duration:"1000"}}]}},generateLogs=()=>{let results=[],startTime=(0,dayjs.Bv)().utc().subtract(48,"hours"),endTime=(0,dayjs.Bv)().utc(),currentTime=startTime;for(;currentTime.isBefore(endTime);)Object.values(EXAMPLES).forEach(example=>{let logsToAdd=Math.floor(10*deterministicRandom());for(let i=0;i<logsToAdd;i++){let log=(0,utils.Ao)(example.logs);results.push({uuid:(0,utils.Vj)(),trace_id:(0,utils.Vj)(),span_id:(0,utils.Vj)(),resource:"any",body:log.message,attributes:{...example.attributes,...log.attributes},timestamp:currentTime.toISOString(),observed_timestamp:currentTime.toISOString(),severity_text:log.level,severity_number:13,level:log.level,instrumentation_scope:"any",event_name:"any"})}}),currentTime=currentTime.add(1,"minutes");return results},_cachedLogs=null,getLogs=async body=>{var _body$query$severityL,_dateStringToDayJs,_body$query$dateRange,_dateStringToDayJs2,_body$query$dateRange2;_cachedLogs?.length||(_cachedLogs=generateLogs());let ALL_LOGS_GENERATED=_cachedLogs,severityLevels=null!==(_body$query$severityL=body.query?.severityLevels)&&void 0!==_body$query$severityL?_body$query$severityL:[],startDate=null!==(_dateStringToDayJs=(0,utils.FZ)(null!==(_body$query$dateRange=body.query?.dateRange?.date_from)&&void 0!==_body$query$dateRange?_body$query$dateRange:null))&&void 0!==_dateStringToDayJs?_dateStringToDayJs:(0,dayjs.Bv)().subtract(30,"minutes"),endDate=null!==(_dateStringToDayJs2=(0,utils.FZ)(null!==(_body$query$dateRange2=body.query?.dateRange?.date_to)&&void 0!==_body$query$dateRange2?_body$query$dateRange2:null))&&void 0!==_dateStringToDayJs2?_dateStringToDayJs2:(0,dayjs.Bv)(),logs=ALL_LOGS_GENERATED.filter(log=>!(startDate&&startDate.isAfter((0,dayjs.Bv)(log.timestamp))||endDate&&endDate.isBefore((0,dayjs.Bv)(log.timestamp))||body.query?.serviceNames?.length&&!body.query?.serviceNames.includes(log.attributes["service.name"]))&&(!severityLevels.length||!!severityLevels.includes(log.severity_text.toLowerCase())));return{startTime:startDate,endTime:endDate,logs}},queryMock=async(req,res,ctx)=>{var _body$query$limit,_body$query$offset;await delayIfNotTestRunner();let body=await req.json(),{logs}=await getLogs(body),limit=null!==(_body$query$limit=body.query?.limit)&&void 0!==_body$query$limit?_body$query$limit:100,offset=null!==(_body$query$offset=body.query?.offset)&&void 0!==_body$query$offset?_body$query$offset:0,results=logs.slice(offset,offset+limit);return res(ctx.json({results:results}))},sparklineMock=async(req,res,ctx)=>{await delayIfNotTestRunner();let body=await req.json(),{startTime,endTime,logs}=await getLogs(body),hoursSpan=endTime.diff(startTime,"hours",!0),intervalMins=1;hoursSpan>=12&&hoursSpan<24?intervalMins=5:hoursSpan>=168&&(intervalMins=60);let bucketMap=new Map,cursor=startTime.startOf("minute"),endCursor=endTime.startOf("minute");for(;cursor.isBefore(endCursor);){let key=cursor.toISOString();bucketMap.set(key,{info:0,warn:0,error:0,total:0}),cursor=cursor.add(intervalMins,"minute")}for(let log of logs){var _ref,_log$severity_text;let ts=(0,dayjs.Bv)(log.timestamp);if(ts.isBefore(startTime)||!ts.isBefore(endTime))continue;let bucketIndex=Math.floor(ts.diff(startTime,"minute")/intervalMins),key=startTime.startOf("minute").add(bucketIndex*intervalMins,"minute").toISOString(),level=String(null!==(_ref=null!==(_log$severity_text=log.severity_text)&&void 0!==_log$severity_text?_log$severity_text:log.level)&&void 0!==_ref?_ref:"info").toLowerCase(),counts=bucketMap.get(key);counts&&("error"===level?counts.error+=1:"warn"===level||"warning"===level?counts.warn+=1:counts.info+=1,counts.total+=1)}let results=[];return Array.from(bucketMap.entries()).sort((_ref2,_ref3)=>{let[a]=_ref2,[b]=_ref3;return a<b?-1:1}).forEach(_ref4=>{let[timestamp,counts]=_ref4;return Object.entries(counts).forEach(_ref5=>{let[level,count]=_ref5;results.push({count:count,level:level,time:timestamp})})}),res(ctx.json(results))},attributesMock=async(_req,res,ctx)=>{await delayIfNotTestRunner();let results=Object.keys(keysAndValues).map(key=>({id:key,name:key}));return res(ctx.json(results))},valuesMock=async(req,res,ctx)=>{var _req$url$searchParams,_keysAndValues$key;await delayIfNotTestRunner();let results=(null!==(_keysAndValues$key=keysAndValues[null!==(_req$url$searchParams=req.url.searchParams.get("key"))&&void 0!==_req$url$searchParams?_req$url$searchParams:""])&&void 0!==_keysAndValues$key?_keysAndValues$key:[]).map(value=>({id:value,name:value}));return res(ctx.json(results))},LogsScene_stories={title:"Scenes-App/Logs",decorators:[(0,browser.x8)({get:{"/api/environments/:team_id/logs/attributes":attributesMock,"/api/environments/:team_id/logs/values":valuesMock},post:{"/api/environments/:team_id/logs/query":queryMock,"/api/environments/:team_id/logs/sparkline":sparklineMock}})],parameters:{layout:"fullscreen",options:{showPanel:!1},viewMode:"story",mockDate:"2023-02-18"}};function LogsScene(){return(0,react.useEffect)(()=>{lib.router.actions.push(urls.j.logs())},[]),(0,jsx_runtime.jsx)(App.g,{})}LogsScene.parameters={...LogsScene.parameters,docs:{...LogsScene.parameters?.docs,source:{originalSource:"function LogsScene(): JSX.Element {\n  useEffect(() => {\n    router.actions.push(urls.logs());\n  }, []);\n  return <App />;\n}",...LogsScene.parameters?.docs?.source}}};let __namedExportsOrder=["LogsScene"]}}]);