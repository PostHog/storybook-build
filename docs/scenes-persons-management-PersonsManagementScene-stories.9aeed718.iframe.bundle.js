"use strict";(self.webpackChunk_posthog_storybook=self.webpackChunk_posthog_storybook||[]).push([[68330],{"../../frontend/src/scenes/persons-management/PersonsManagementScene.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Cohorts:()=>Cohorts,Groups:()=>Groups,Persons:()=>Persons,PersonsEmpty:()=>PersonsEmpty,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var lib_constants__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../frontend/src/lib/constants.tsx"),scenes_App__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../frontend/src/scenes/App.tsx"),scenes_urls__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../frontend/src/scenes/urls.ts"),_mocks_browser__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../../frontend/src/mocks/browser.tsx");let __WEBPACK_DEFAULT_EXPORT__={component:scenes_App__WEBPACK_IMPORTED_MODULE_1__.g,title:"Scenes-App/Persons & Groups",parameters:{layout:"fullscreen",viewMode:"story",mockDate:"2023-07-04"}},PersonsEmpty={parameters:{pageUrl:scenes_urls__WEBPACK_IMPORTED_MODULE_2__.j.persons()}},Cohorts={parameters:{pageUrl:scenes_urls__WEBPACK_IMPORTED_MODULE_2__.j.cohorts()}},Groups={parameters:{pageUrl:scenes_urls__WEBPACK_IMPORTED_MODULE_2__.j.groups(0)}},Persons={parameters:{pageUrl:scenes_urls__WEBPACK_IMPORTED_MODULE_2__.j.persons()},decorators:[(0,_mocks_browser__WEBPACK_IMPORTED_MODULE_3__.x8)({post:{"/api/environments/:team_id/query/":req=>{let query=req.body?.query;return query&&"ActorsQuery"===query.kind?[200,{columns:[lib_constants__WEBPACK_IMPORTED_MODULE_0__.jz,"id","created_at","person.$delete"],results:[[{display_name:"george@of.the.jungle.com",id:"741cc6c0-7c48-55f2-9b58-1b648a381c9e"},"741cc6c0-7c48-55f2-9b58-1b648a381c9e","2023-05-08T15:49:50-07:00",1],[{display_name:"george@harrison.com",id:"2bc35dc9-6dfb-5d18-90e4-a05b9d5d9dbf"},"2bc35dc9-6dfb-5d18-90e4-a05b9d5d9dbf","2023-05-08T15:49:38-07:00",1]],hasMore:!1,is_cached:!0,cache_key:"test-datatable",calculation_trigger:null,error:"",query_status:null}]:[200,{results:[],message:"Generic POST to /api/query mock for PersonSceneStory"}]}}})]};PersonsEmpty.parameters={...PersonsEmpty.parameters,docs:{...PersonsEmpty.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    pageUrl: urls.persons()\n  }\n}",...PersonsEmpty.parameters?.docs?.source}}},Cohorts.parameters={...Cohorts.parameters,docs:{...Cohorts.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    pageUrl: urls.cohorts()\n  }\n}",...Cohorts.parameters?.docs?.source}}},Groups.parameters={...Groups.parameters,docs:{...Groups.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    pageUrl: urls.groups(0)\n  }\n}",...Groups.parameters?.docs?.source}}},Persons.parameters={...Persons.parameters,docs:{...Persons.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    pageUrl: urls.persons()\n  },\n  decorators: [mswDecorator({\n    post: {\n      '/api/environments/:team_id/query/': req => {\n        const query = (req.body as any)?.query;\n        // Check if it's a DataTableNode query, which is used for Events/Exceptions tabs\n        if (query && query.kind === 'ActorsQuery') {\n          return [200, {\n            columns: [PERSON_DISPLAY_NAME_COLUMN_NAME, 'id', 'created_at', 'person.$delete'],\n            results: [[{\n              display_name: 'george@of.the.jungle.com',\n              id: '741cc6c0-7c48-55f2-9b58-1b648a381c9e'\n            }, '741cc6c0-7c48-55f2-9b58-1b648a381c9e', '2023-05-08T15:49:50-07:00', 1], [{\n              display_name: 'george@harrison.com',\n              id: '2bc35dc9-6dfb-5d18-90e4-a05b9d5d9dbf'\n            }, '2bc35dc9-6dfb-5d18-90e4-a05b9d5d9dbf', '2023-05-08T15:49:38-07:00', 1]],\n            // Provide appropriate mock data for your DataTableNode queries\n            hasMore: false,\n            is_cached: true,\n            cache_key: 'test-datatable',\n            calculation_trigger: null,\n            error: '',\n            query_status: null\n          }];\n        }\n        // Fallback for other POST /api/query calls that might not be DataTableNode\n        // For example, if other components on this page make different query calls.\n        // You might need to make this more specific if there are multiple non-DataTableNode POSTs.\n        return [200, {\n          results: [],\n          message: 'Generic POST to /api/query mock for PersonSceneStory'\n        }];\n      }\n    }\n  })]\n}",...Persons.parameters?.docs?.source}}};let __namedExportsOrder=["PersonsEmpty","Cohorts","Groups","Persons"]}}]);