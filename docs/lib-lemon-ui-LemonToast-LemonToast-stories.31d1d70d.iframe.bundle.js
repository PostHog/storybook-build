"use strict";(self.webpackChunk_posthog_storybook=self.webpackChunk_posthog_storybook||[]).push([[50962],{"../../frontend/src/lib/lemon-ui/LemonToast/LemonToast.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{BillingError:()=>BillingError,ToastTypes:()=>ToastTypes,WithButton:()=>WithButton,WithProgress:()=>WithProgress,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),react_toastify__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/.pnpm/react-toastify@8.2.0_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/react-toastify/dist/react-toastify.esm.js"),_LemonToast__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../frontend/src/lib/lemon-ui/LemonToast/LemonToast.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");let __WEBPACK_DEFAULT_EXPORT__={title:"Lemon UI/Lemon Toast",component:_LemonToast__WEBPACK_IMPORTED_MODULE_2__.fI,parameters:{testOptions:{waitForLoadersToDisappear:!1,snapshotTargetSelector:".Toastify__toast-container"}}},ToastTypes={args:{toasts:[{type:"info",message:"An info toast"},{type:"success",message:"A success toast"},{type:"warning",message:"A warning toast"},{type:"error",message:"An error toast"}]},render:(args,_ref)=>{let{globals}=_ref,isDarkModeOn="dark"===globals.theme;return(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{_LemonToast__WEBPACK_IMPORTED_MODULE_2__.UJ.dismiss(),args.toasts.forEach(toast=>{let{type,message,...rest}=toast;_LemonToast__WEBPACK_IMPORTED_MODULE_2__.UJ[type](message,rest)})},[isDarkModeOn]),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(react_toastify__WEBPACK_IMPORTED_MODULE_1__.Ix,{position:"top-left",autoClose:!1,transition:react_toastify__WEBPACK_IMPORTED_MODULE_1__.Mi,closeOnClick:!1,draggable:!1,closeButton:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_LemonToast__WEBPACK_IMPORTED_MODULE_2__.ty,{}),theme:isDarkModeOn?"dark":"light"})}},BillingError={...ToastTypes,args:{toasts:[{type:"error",message:"Load experiment failed: This feature is part of the premium PostHog offering. To use it, subscribe to PostHog Cloud with a generous free tier: https://app.posthog.com/organization/billing"}]}},WithButton={...ToastTypes,args:{toasts:[{type:"success",message:"Insight added to dashboard",button:{label:"View dashboard",action:()=>{}}}]}},WithProgress={...ToastTypes,args:{toasts:[{type:"info",message:"An info toast with progress",progress:.4},{type:"success",message:"A success toast with progress",progress:.4},{type:"warning",message:"A warning toast with progress",progress:.4},{type:"error",message:"An error toast with progress",progress:.4}]}};ToastTypes.parameters={...ToastTypes.parameters,docs:{...ToastTypes.parameters?.docs,source:{originalSource:"{\n  args: {\n    toasts: [{\n      type: 'info',\n      message: 'An info toast'\n    }, {\n      type: 'success',\n      message: 'A success toast'\n    }, {\n      type: 'warning',\n      message: 'A warning toast'\n    }, {\n      type: 'error',\n      message: 'An error toast'\n    }]\n  },\n  render: (args, {\n    globals\n  }) => {\n    const isDarkModeOn = globals.theme === 'dark';\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n      lemonToast.dismiss();\n      args.toasts.forEach(toast => {\n        const {\n          type,\n          message,\n          ...rest\n        } = toast;\n        lemonToast[type](message, rest);\n      });\n    }, [isDarkModeOn]); // oxlint-disable-line react-hooks/exhaustive-deps\n\n    return <ToastContainer position=\"top-left\" // different from app\n    autoClose={false} // different from app\n    transition={Slide} closeOnClick={false} draggable={false} closeButton={<ToastCloseButton />} theme={isDarkModeOn ? 'dark' : 'light'} />;\n  }\n}",...ToastTypes.parameters?.docs?.source}}},BillingError.parameters={...BillingError.parameters,docs:{...BillingError.parameters?.docs,source:{originalSource:"{\n  ...ToastTypes,\n  args: {\n    toasts: [{\n      type: 'error',\n      message: 'Load experiment failed: This feature is part of the premium PostHog offering. To use it, subscribe to PostHog Cloud with a generous free tier: https://app.posthog.com/organization/billing'\n    }]\n  }\n}",...BillingError.parameters?.docs?.source}}},WithButton.parameters={...WithButton.parameters,docs:{...WithButton.parameters?.docs,source:{originalSource:"{\n  ...ToastTypes,\n  args: {\n    toasts: [{\n      type: 'success',\n      message: 'Insight added to dashboard',\n      button: {\n        label: 'View dashboard',\n        action: (): void => {}\n      }\n    }]\n  }\n}",...WithButton.parameters?.docs?.source}}},WithProgress.parameters={...WithProgress.parameters,docs:{...WithProgress.parameters?.docs,source:{originalSource:"{\n  ...ToastTypes,\n  args: {\n    toasts: [{\n      type: 'info',\n      message: 'An info toast with progress',\n      progress: 0.4\n    } as ToastContentProps, {\n      type: 'success',\n      message: 'A success toast with progress',\n      progress: 0.4\n    } as ToastContentProps, {\n      type: 'warning',\n      message: 'A warning toast with progress',\n      progress: 0.4\n    } as ToastContentProps, {\n      type: 'error',\n      message: 'An error toast with progress',\n      progress: 0.4\n    } as ToastContentProps]\n  }\n}",...WithProgress.parameters?.docs?.source}}};let __namedExportsOrder=["ToastTypes","BillingError","WithButton","WithProgress"]}}]);