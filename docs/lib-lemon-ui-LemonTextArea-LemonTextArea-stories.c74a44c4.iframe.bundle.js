"use strict";(self.webpackChunk_posthog_storybook=self.webpackChunk_posthog_storybook||[]).push([[19801],{"../../frontend/src/lib/lemon-ui/LemonTextArea/LemonTextArea.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Basic:()=>Basic,Disabled:()=>Disabled,WithArbitraryAction:()=>WithArbitraryAction,WithMaxLength:()=>WithMaxLength,WithMaxLengthExceeded:()=>WithMaxLengthExceeded,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),_posthog_icons__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/.pnpm/@posthog+icons@0.28.1_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/@posthog/icons/dist/posthog-icons.es.js"),lib_lemon_ui_LemonButton__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../frontend/src/lib/lemon-ui/LemonButton/index.ts"),_LemonTextArea__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../../frontend/src/lib/lemon-ui/LemonTextArea/LemonTextArea.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");let __WEBPACK_DEFAULT_EXPORT__={title:"Lemon UI/Lemon Text Area",component:_LemonTextArea__WEBPACK_IMPORTED_MODULE_3__._,args:{value:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."},tags:["autodocs"]},Template=props=>{let[value,setValue]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(props.value);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_LemonTextArea__WEBPACK_IMPORTED_MODULE_3__._,{...props,value:value,onChange:newValue=>setValue(newValue)})},Basic=Template.bind({});Basic.args={};let Disabled=Template.bind({});Disabled.args={disabled:!0};let WithMaxLength=Template.bind({});WithMaxLength.args={maxLength:100,value:"1234567890"};let WithMaxLengthExceeded=Template.bind({});WithMaxLengthExceeded.args={maxLength:5,value:"1234567890"};let WithArbitraryAction=Template.bind({});WithArbitraryAction.args={maxLength:5,value:"1234567890",actions:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(lib_lemon_ui_LemonButton__WEBPACK_IMPORTED_MODULE_2__.J,{icon:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_posthog_icons__WEBPACK_IMPORTED_MODULE_1__.IconTrash,{}),size:"xsmall"},"1")]},Basic.parameters={...Basic.parameters,docs:{...Basic.parameters?.docs,source:{originalSource:"(props: LemonTextAreaProps) => {\n  const [value, setValue] = useState(props.value);\n  return <LemonTextArea {...props} value={value} onChange={newValue => setValue(newValue)} />;\n}",...Basic.parameters?.docs?.source}}},Disabled.parameters={...Disabled.parameters,docs:{...Disabled.parameters?.docs,source:{originalSource:"(props: LemonTextAreaProps) => {\n  const [value, setValue] = useState(props.value);\n  return <LemonTextArea {...props} value={value} onChange={newValue => setValue(newValue)} />;\n}",...Disabled.parameters?.docs?.source}}},WithMaxLength.parameters={...WithMaxLength.parameters,docs:{...WithMaxLength.parameters?.docs,source:{originalSource:"(props: LemonTextAreaProps) => {\n  const [value, setValue] = useState(props.value);\n  return <LemonTextArea {...props} value={value} onChange={newValue => setValue(newValue)} />;\n}",...WithMaxLength.parameters?.docs?.source}}},WithMaxLengthExceeded.parameters={...WithMaxLengthExceeded.parameters,docs:{...WithMaxLengthExceeded.parameters?.docs,source:{originalSource:"(props: LemonTextAreaProps) => {\n  const [value, setValue] = useState(props.value);\n  return <LemonTextArea {...props} value={value} onChange={newValue => setValue(newValue)} />;\n}",...WithMaxLengthExceeded.parameters?.docs?.source}}},WithArbitraryAction.parameters={...WithArbitraryAction.parameters,docs:{...WithArbitraryAction.parameters?.docs,source:{originalSource:"(props: LemonTextAreaProps) => {\n  const [value, setValue] = useState(props.value);\n  return <LemonTextArea {...props} value={value} onChange={newValue => setValue(newValue)} />;\n}",...WithArbitraryAction.parameters?.docs?.source}}};let __namedExportsOrder=["Basic","Disabled","WithMaxLength","WithMaxLengthExceeded","WithArbitraryAction"]}}]);