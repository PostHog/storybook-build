{"version":3,"file":"14710.4fce2b7a.iframe.bundle.js","mappings":";AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@posthog/storybook/../../frontend/src/scenes/themes/CustomCssScene.tsx"],"sourcesContent":["import { LemonButton, Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { router } from 'kea-router'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { CodeEditor } from 'lib/monaco/CodeEditor'\nimport { SceneExport } from 'scenes/sceneTypes'\n\nimport { themeLogic } from '~/layout/navigation-3000/themeLogic'\n\nimport { urls } from '../urls'\nimport { useOnMountEffect } from 'lib/hooks/useOnMountEffect'\n\nexport const scene: SceneExport = {\n    component: CustomCssScene,\n}\n\nconst TRON_THEME = `:root {\n    --radius: 0px;\n}\n\nbody[theme=dark] {\n    --border: rgba(0, 255, 1, 0.5);\n    --link: #00FF01;\n    --border-bold: #00FF01;\n    --bg-3000: #111;\n    --glass-bg-3000: #111;\n    --bg-light: #222;\n    --bg-table: #222;\n    --muted-3000: #0EA70E;\n    --primary-3000: #00FF01;\n    --primary-3000-hover: #00FF01;\n    --primary-alt-highlight: rgba(0, 255, 1, 0.1);\n    --text-3000: #00FF01;\n    --accent-3000: #222;\n    --glass-border-3000: rgba(0,0,0,.3);\n    --font-title: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace;\n\n    --primary-3000-frame-bg-light: #00FF01;\n    --primary-3000-button-bg: #00FF01;\n    --primary-3000-button-border: #00FF01;\n    --text-tertiary: #00FF01;\n}\n\n.TopBar3000__content {\n\tborder-bottom: solid 1px #00FF01;\n}`\n\nconst BARBIE_THEME = `:root {\n    --radius: 16px;\n}\n\nbody[theme=light] {\n    --border: rgba(255, 105, 180, 0.5);\n    --border-3000: #ff409f;\n    --link: #E306AD;\n    --border-bold: rgba(255, 105, 180, 0.8);\n    --bg-3000: #FED9E9;\n    --glass-bg-3000: rgba(255, 192, 203, 0.8);\n    --bg-light: #FFF0F5;\n    --bg-table: #F8BBD0;\n    --muted-3000: #E306AD;\n    --primary-3000: #FF69B4;\n    --primary-3000-hover: #FF1493;\n    --primary-alt-highlight: rgba(255, 105, 180, 0.1);\n    --text-3000: #ed3993;\n    --text-3000-light: #58003f;\n    --accent-3000: #FEBDE2;\n    --glass-border-3000: rgba(245, 145, 199, 0.3);\n\n    --primary-3000-frame-bg-light: #F18DBC;\n    --primary-3000-button-bg: #FF69B4;\n    --primary-3000-button-border: #FF1493;\n    --primary-3000-button-border-hover: #db097b;\n    --text-tertiary: #FFB6C1;\n\n    --secondary-3000-button-border: #FF1493;\n    --secondary-3000-frame-bg-light: #F7B9D7;\n    --secondary-3000-button-border-hover: #d40b76;\n}`\n\nexport function CustomCssScene(): JSX.Element {\n    const { persistedCustomCss, previewingCustomCss } = useValues(themeLogic)\n    const { saveCustomCss, setPreviewingCustomCss } = useActions(themeLogic)\n\n    useOnMountEffect(() => {\n        setPreviewingCustomCss(previewingCustomCss || persistedCustomCss || '')\n    })\n\n    const onPreview = (): void => {\n        router.actions.push(urls.projectHomepage())\n    }\n\n    return (\n        <div className=\"flex flex-col deprecated-space-y-2\">\n            <PageHeader\n                buttons={\n                    <>\n                        <LemonButton type=\"secondary\" onClick={onPreview}>\n                            Preview\n                        </LemonButton>\n                        <LemonButton\n                            type=\"primary\"\n                            onClick={() => {\n                                saveCustomCss()\n                                router.actions.push(urls.projectHomepage())\n                            }}\n                        >\n                            Save and set\n                        </LemonButton>\n                    </>\n                }\n            />\n            <p>\n                You can add custom CSS to change the style of your PostHog instance. If you need some inspiration try\n                our templates: <Link onClick={() => setPreviewingCustomCss(TRON_THEME)}>Tron</Link>,{' '}\n                <Link onClick={() => setPreviewingCustomCss(BARBIE_THEME)}>Barbie</Link>\n            </p>\n            <CodeEditor\n                className=\"border\"\n                language=\"css\"\n                value={previewingCustomCss || ''}\n                onChange={(v) => setPreviewingCustomCss(v ?? null)}\n                height={600}\n                options={{\n                    minimap: {\n                        enabled: false,\n                    },\n                }}\n            />\n        </div>\n    )\n}\n"],"names":[],"sourceRoot":""}