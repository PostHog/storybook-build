{"version":3,"file":"54720.9306d18b.iframe.bundle.js","mappings":";;;AAoIA;;;AAKA;;;AAIA;;;AAGA;;;;;AAWA;;;;;AAMA","sources":["webpack://@posthog/storybook/../../frontend/src/scenes/web-analytics/pageReportsLogic.ts"],"sourcesContent":["import { kea } from 'kea'\nimport { router } from 'kea-router'\nimport api from 'lib/api'\n\nimport { CompareFilter, InsightVizNode, NodeKind, QuerySchema, TrendsQuery } from '~/queries/schema/schema-general'\nimport { hogql } from '~/queries/utils'\nimport {\n    AnyPropertyFilter,\n    BaseMathType,\n    ChartDisplayType,\n    InsightLogicProps,\n    PropertyFilterType,\n    PropertyOperator,\n} from '~/types'\n\nimport type { pageReportsLogicType } from './pageReportsLogicType'\nimport {\n    DeviceTab,\n    GeographyTab,\n    PathTab,\n    SectionTile,\n    SourceTab,\n    TabsTile,\n    TileId,\n    TileVisualizationOption,\n    WEB_ANALYTICS_DATA_COLLECTION_NODE_ID,\n    webAnalyticsLogic,\n    WebAnalyticsTile,\n    WebTileLayout,\n} from './webAnalyticsLogic'\n\nexport interface PageURL {\n    url: string\n    count: number\n}\n\n/**\n * Creates a property filter for URL matching that handles query parameters consistently\n * @param url The URL to match\n * @param stripQueryParams Whether to strip query parameters\n * @returns A property filter object for the URL\n */\nexport function createUrlPropertyFilter(url: string, stripQueryParams: boolean): AnyPropertyFilter {\n    return {\n        key: '$current_url',\n        value: stripQueryParams ? `^${url.split('?')[0]}(\\\\?.*)?$` : url,\n        operator: stripQueryParams ? PropertyOperator.Regex : PropertyOperator.Exact,\n        type: PropertyFilterType.Event,\n    }\n}\n\nexport const pageReportsLogic = kea<pageReportsLogicType>({\n    path: ['scenes', 'web-analytics', 'pageReportsLogic'],\n\n    connect: {\n        values: [webAnalyticsLogic, ['tiles as webAnalyticsTiles', 'shouldFilterTestAccounts', 'dateFilter']],\n        actions: [webAnalyticsLogic, ['setDates']],\n    },\n\n    actions: () => ({\n        setPageUrl: (url: string | string[] | null) => ({ url }),\n        setPageUrlSearchTerm: (searchTerm: string) => ({ searchTerm }),\n        loadPages: (searchTerm: string = '') => {\n            return { searchTerm }\n        },\n        toggleStripQueryParams: () => ({}),\n        setTileVisualization: (tileId: TileId, visualization: TileVisualizationOption) => ({\n            tileId,\n            visualization,\n        }),\n    }),\n\n    reducers: () => ({\n        pageUrl: [\n            null as string | null,\n            { persist: true },\n            {\n                setPageUrl: (_state, { url }) => {\n                    if (Array.isArray(url)) {\n                        // We're querying by url and count()\n                        return url.length > 0 ? url[0] : null\n                    }\n                    return url\n                },\n            },\n        ],\n        pageUrlSearchTerm: [\n            '',\n            {\n                setPageUrlSearchTerm: (_state, { searchTerm }) => searchTerm,\n            },\n        ],\n        isInitialLoad: [\n            true,\n            {\n                loadPagesSuccess: () => false,\n            },\n        ],\n        stripQueryParams: [\n            true,\n            { persist: true },\n            {\n                toggleStripQueryParams: (state: boolean) => !state,\n            },\n        ],\n        tileVisualizations: [\n            {} as Record<TileId, TileVisualizationOption>,\n            { persist: true },\n            {\n                setTileVisualization: (state, { tileId, visualization }) => ({\n                    ...state,\n                    [tileId]: visualization,\n                }),\n            },\n        ],\n    }),\n\n    loaders: ({ values }) => ({\n        pagesUrls: [\n            [] as PageURL[],\n            {\n                loadPagesUrls: async ({ searchTerm }: { searchTerm: string }) => {\n                    try {\n                        let query: { kind: NodeKind; query: string }\n                        // Simple query using the same pattern as heatmapsLogic\n                        if (searchTerm) {\n                            query = {\n                                kind: NodeKind.HogQLQuery,\n                                query: values.stripQueryParams\n                                    ? hogql`SELECT DISTINCT cutQueryStringAndFragment(properties.$current_url) AS url, count() as count\n                                        FROM events\n                                        WHERE event = '$pageview'\n                                        AND cutQueryStringAndFragment(properties.$current_url) like '%${hogql.identifier(\n                                            searchTerm\n                                        )}%'\n                                        GROUP BY url\n                                        ORDER BY count DESC\n                                        LIMIT 100`\n                                    : hogql`SELECT DISTINCT properties.$current_url AS url, count() as count\n                                        FROM events\n                                        WHERE event = '$pageview'\n                                        AND properties.$current_url like '%${hogql.identifier(searchTerm)}%'\n                                        GROUP BY url\n                                        ORDER BY count DESC\n                                        LIMIT 100`,\n                            }\n                        } else {\n                            query = {\n                                kind: NodeKind.HogQLQuery,\n                                query: values.stripQueryParams\n                                    ? hogql`SELECT DISTINCT cutQueryStringAndFragment(properties.$current_url) AS url, count() as count\n                                        FROM events\n                                        WHERE event = '$pageview'\n                                        GROUP BY url\n                                        ORDER BY count DESC\n                                        LIMIT 100`\n                                    : hogql`SELECT DISTINCT properties.$current_url AS url, count() as count\n                                        FROM events\n                                        WHERE event = '$pageview'\n                                        GROUP BY url\n                                        ORDER BY count DESC\n                                        LIMIT 100`,\n                            }\n                        }\n\n                        const response = await api.query(query)\n                        const res = response as { results: [string, number][] }\n                        const results = res.results?.map((x) => ({ url: x[0], count: x[1] })) as PageURL[]\n\n                        return results\n                    } catch (error) {\n                        console.error('Error loading pages:', error)\n                        return []\n                    }\n                },\n            },\n        ],\n    }),\n\n    selectors: {\n        hasPageUrl: [(selectors) => [selectors.pageUrl], (pageUrl: string | null) => !!pageUrl],\n        isLoading: [\n            (selectors) => [selectors.pagesUrlsLoading, selectors.isInitialLoad],\n            (pagesUrlsLoading: boolean, isInitialLoad: boolean) => pagesUrlsLoading || isInitialLoad,\n        ],\n        queries: [\n            (s) => [s.webAnalyticsTiles, s.pageUrl, s.stripQueryParams],\n            (webAnalyticsTiles: WebAnalyticsTile[], pageUrl: string | null, stripQueryParams: boolean) => {\n                // If we don't have a pageUrl, return empty queries to rendering problems\n                if (!pageUrl) {\n                    return {\n                        entryPathsQuery: undefined,\n                        exitPathsQuery: undefined,\n                        outboundClicksQuery: undefined,\n                        channelsQuery: undefined,\n                        referrersQuery: undefined,\n                        deviceTypeQuery: undefined,\n                        browserQuery: undefined,\n                        osQuery: undefined,\n                        countriesQuery: undefined,\n                        regionsQuery: undefined,\n                        citiesQuery: undefined,\n                        timezonesQuery: undefined,\n                        languagesQuery: undefined,\n                    }\n                }\n\n                // Helper function to get query from a tile by tab ID\n                const getQuery = (tileId: TileId, tabId: string): QuerySchema | undefined => {\n                    const tile = webAnalyticsTiles?.find((t) => t.tileId === tileId) as TabsTile | undefined\n                    const query = tile?.tabs.find((tab) => tab.id === tabId)?.query\n\n                    if (query && 'source' in query && query.source) {\n                        const modifiedQuery = JSON.parse(JSON.stringify(query))\n\n                        // Find and update the $current_url property filter\n                        if (modifiedQuery.source.properties) {\n                            modifiedQuery.source.properties = [createUrlPropertyFilter(pageUrl, stripQueryParams)]\n                        }\n\n                        return modifiedQuery\n                    }\n\n                    return query\n                }\n\n                return {\n                    // Path queries\n                    entryPathsQuery: getQuery(TileId.PATHS, PathTab.INITIAL_PATH),\n                    exitPathsQuery: getQuery(TileId.PATHS, PathTab.END_PATH),\n                    outboundClicksQuery: getQuery(TileId.PATHS, PathTab.EXIT_CLICK),\n\n                    // Source queries\n                    channelsQuery: getQuery(TileId.SOURCES, SourceTab.CHANNEL),\n                    referrersQuery: getQuery(TileId.SOURCES, SourceTab.REFERRING_DOMAIN),\n\n                    // Device queries\n                    deviceTypeQuery: getQuery(TileId.DEVICES, DeviceTab.DEVICE_TYPE),\n                    browserQuery: getQuery(TileId.DEVICES, DeviceTab.BROWSER),\n                    osQuery: getQuery(TileId.DEVICES, DeviceTab.OS),\n\n                    // Geography queries\n                    countriesQuery: getQuery(TileId.GEOGRAPHY, GeographyTab.COUNTRIES),\n                    regionsQuery: getQuery(TileId.GEOGRAPHY, GeographyTab.REGIONS),\n                    citiesQuery: getQuery(TileId.GEOGRAPHY, GeographyTab.CITIES),\n                    timezonesQuery: getQuery(TileId.GEOGRAPHY, GeographyTab.TIMEZONES),\n                    languagesQuery: getQuery(TileId.GEOGRAPHY, GeographyTab.LANGUAGES),\n                }\n            },\n        ],\n        createInsightProps: [\n            () => [],\n            () =>\n                (tileId: TileId, tabId?: string): InsightLogicProps => ({\n                    dashboardItemId: `new-${tileId}${tabId ? `-${tabId}` : ''}`,\n                    loadPriority: 0,\n                    dataNodeCollectionId: WEB_ANALYTICS_DATA_COLLECTION_NODE_ID,\n                }),\n        ],\n        combinedMetricsQuery: [\n            (s) => [s.pageUrl, s.stripQueryParams, s.shouldFilterTestAccounts],\n            (pageUrl: string | null, stripQueryParams: boolean, shouldFilterTestAccounts: boolean) =>\n                (\n                    dateFilter: typeof webAnalyticsLogic.values.dateFilter,\n                    compareFilter: CompareFilter\n                ): InsightVizNode<TrendsQuery> => ({\n                    kind: NodeKind.InsightVizNode,\n                    source: {\n                        kind: NodeKind.TrendsQuery,\n                        series: [\n                            {\n                                event: '$pageview',\n                                kind: NodeKind.EventsNode,\n                                math: BaseMathType.UniqueUsers,\n                                name: '$pageview',\n                                custom_name: 'Unique visitors',\n                            },\n                            {\n                                event: '$pageview',\n                                kind: NodeKind.EventsNode,\n                                math: BaseMathType.TotalCount,\n                                name: '$pageview',\n                                custom_name: 'Page views',\n                            },\n                            {\n                                event: '$pageview',\n                                kind: NodeKind.EventsNode,\n                                math: BaseMathType.UniqueSessions,\n                                name: '$pageview',\n                                custom_name: 'Sessions',\n                            },\n                        ],\n                        interval: dateFilter.interval,\n                        dateRange: { date_from: dateFilter.dateFrom, date_to: dateFilter.dateTo },\n                        trendsFilter: {\n                            display: ChartDisplayType.ActionsLineGraph,\n                            showLegend: true,\n                        },\n                        compareFilter,\n                        filterTestAccounts: shouldFilterTestAccounts,\n                        properties: pageUrl ? [createUrlPropertyFilter(pageUrl, stripQueryParams)] : [],\n                    },\n                    hidePersonsModal: true,\n                    embedded: true,\n                }),\n        ],\n        tiles: [\n            (s) => [\n                s.queries,\n                s.pageUrl,\n                s.createInsightProps,\n                s.combinedMetricsQuery,\n                s.dateFilter,\n                () => webAnalyticsLogic.values.compareFilter,\n            ],\n            (\n                queries: Record<string, QuerySchema | undefined>,\n                pageUrl: string | null,\n                createInsightProps: (tileId: TileId, tabId?: string) => InsightLogicProps,\n                combinedMetricsQuery: (\n                    dateFilter: typeof webAnalyticsLogic.values.dateFilter,\n                    compareFilter: CompareFilter\n                ) => InsightVizNode<TrendsQuery>,\n                dateFilter: typeof webAnalyticsLogic.values.dateFilter,\n                compareFilter: CompareFilter\n            ): SectionTile[] => {\n                if (!pageUrl) {\n                    return []\n                }\n\n                const createQueryTile = (\n                    tileId: TileId,\n                    title: string,\n                    description: string,\n                    query: QuerySchema | undefined,\n                    layout?: WebTileLayout\n                ): WebAnalyticsTile | null => {\n                    if (!query) {\n                        return null\n                    }\n\n                    return {\n                        kind: 'query',\n                        tileId,\n                        title,\n                        query,\n                        showIntervalSelect: false,\n                        insightProps: createInsightProps(tileId),\n                        layout: layout ?? {\n                            className: '',\n                        },\n                        docs: {\n                            title,\n                            description,\n                        },\n                    }\n                }\n\n                return [\n                    {\n                        kind: 'section',\n                        tileId: TileId.PAGE_REPORTS_COMBINED_METRICS_CHART,\n                        title: '', // Intentionally empty to avoid showing section title + tile title\n                        tiles: [\n                            {\n                                kind: 'query',\n                                tileId: TileId.PAGE_REPORTS_COMBINED_METRICS_CHART,\n                                title: 'Trends over time',\n                                query: combinedMetricsQuery(dateFilter, compareFilter),\n                                showIntervalSelect: true,\n                                insightProps: createInsightProps(\n                                    TileId.PAGE_REPORTS_COMBINED_METRICS_CHART,\n                                    'combined'\n                                ),\n                                layout: {\n                                    className: 'w-full min-h-[350px]',\n                                },\n                                docs: {\n                                    title: 'Trends over time',\n                                    description: 'Key metrics for this page over time',\n                                },\n                            },\n                        ],\n                        layout: {\n                            className: 'w-full',\n                        },\n                    },\n                    {\n                        kind: 'section',\n                        tileId: TileId.PAGE_REPORTS_PATHS_SECTION,\n                        title: 'Page Paths Analysis',\n                        layout: {\n                            className: 'grid-cols-1 md:grid-cols-3 gap-2',\n                        },\n                        tiles: [\n                            createQueryTile(\n                                TileId.PAGE_REPORTS_ENTRY_PATHS,\n                                'Entry Paths',\n                                'How users arrive at this page',\n                                queries.entryPathsQuery\n                            ),\n                            createQueryTile(\n                                TileId.PAGE_REPORTS_EXIT_PATHS,\n                                'Exit Paths',\n                                'Where users go after viewing this page',\n                                queries.exitPathsQuery\n                            ),\n                            createQueryTile(\n                                TileId.PAGE_REPORTS_OUTBOUND_CLICKS,\n                                'Outbound Clicks',\n                                'External links users click on this page',\n                                queries.outboundClicksQuery\n                            ),\n                        ].filter(Boolean) as WebAnalyticsTile[],\n                    },\n                    {\n                        kind: 'section',\n                        tileId: TileId.PAGE_REPORTS_TRAFFIC_SECTION,\n                        title: 'Traffic Sources',\n                        layout: {\n                            className: 'grid-cols-1 md:grid-cols-2 gap-2',\n                        },\n                        tiles: [\n                            createQueryTile(\n                                TileId.PAGE_REPORTS_CHANNELS,\n                                'Channels',\n                                'Marketing channels bringing users to this page',\n                                queries.channelsQuery\n                            ),\n                            createQueryTile(\n                                TileId.PAGE_REPORTS_REFERRERS,\n                                'Referrers',\n                                'Websites referring traffic to this page',\n                                queries.referrersQuery\n                            ),\n                        ].filter(Boolean) as WebAnalyticsTile[],\n                    },\n                    {\n                        kind: 'section',\n                        tileId: TileId.PAGE_REPORTS_DEVICE_INFORMATION_SECTION,\n                        title: 'Device Information',\n                        layout: {\n                            className: 'grid-cols-1 md:grid-cols-3 gap-2',\n                        },\n                        tiles: [\n                            createQueryTile(\n                                TileId.PAGE_REPORTS_DEVICE_TYPES,\n                                'Device Types',\n                                'Types of devices used to access this page',\n                                queries.deviceTypeQuery\n                            ),\n                            createQueryTile(\n                                TileId.PAGE_REPORTS_BROWSERS,\n                                'Browsers',\n                                'Browsers used to access this page',\n                                queries.browserQuery\n                            ),\n                            createQueryTile(\n                                TileId.PAGE_REPORTS_OPERATING_SYSTEMS,\n                                'Operating Systems',\n                                'Operating systems used to access this page',\n                                queries.osQuery\n                            ),\n                        ].filter(Boolean) as WebAnalyticsTile[],\n                    },\n                    {\n                        kind: 'section',\n                        tileId: TileId.PAGE_REPORTS_GEOGRAPHY_SECTION,\n                        title: 'Geography',\n                        layout: {\n                            className: 'grid-cols-1 md:grid-cols-3 gap-2 gap-y-8',\n                        },\n                        tiles: [\n                            createQueryTile(\n                                TileId.PAGE_REPORTS_COUNTRIES,\n                                'Countries',\n                                'Countries where users access this page from',\n                                queries.countriesQuery\n                            ),\n                            createQueryTile(\n                                TileId.PAGE_REPORTS_REGIONS,\n                                'Regions',\n                                'Regions where users access this page from',\n                                queries.regionsQuery\n                            ),\n                            createQueryTile(\n                                TileId.PAGE_REPORTS_CITIES,\n                                'Cities',\n                                'Cities where users access this page from',\n                                queries.citiesQuery\n                            ),\n                            createQueryTile(\n                                TileId.PAGE_REPORTS_TIMEZONES,\n                                'Timezones',\n                                'Timezones where users access this page from',\n                                queries.timezonesQuery\n                            ),\n                            createQueryTile(\n                                TileId.PAGE_REPORTS_LANGUAGES,\n                                'Languages',\n                                'Languages of users accessing this page',\n                                queries.languagesQuery\n                            ),\n                        ].filter(Boolean) as WebAnalyticsTile[],\n                    },\n                ]\n            },\n        ],\n    },\n\n    listeners: ({ actions, values }) => ({\n        setPageUrlSearchTerm: ({ searchTerm }) => {\n            actions.loadPages(searchTerm)\n        },\n        setPageUrl: ({ url }) => {\n            router.actions.replace('/web/page-reports', url ? { pageURL: url } : {}, router.values.hashParams)\n        },\n        toggleStripQueryParams: () => {\n            actions.loadPages(values.pageUrlSearchTerm)\n        },\n        loadPages: ({ searchTerm }) => {\n            actions.loadPagesUrls({ searchTerm })\n        },\n    }),\n\n    afterMount: ({ actions }: { actions: pageReportsLogicType['actions'] }) => {\n        actions.loadPages('')\n    },\n\n    urlToAction: ({ actions, values }) => ({\n        '/web/page-reports': (_, searchParams) => {\n            if (searchParams.pageURL && searchParams.pageURL !== values.pageUrl) {\n                actions.setPageUrl(searchParams.pageURL)\n            }\n\n            if (searchParams.stripQueryParams !== values.stripQueryParams) {\n                actions.toggleStripQueryParams()\n            }\n        },\n    }),\n\n    actionToUrl: ({ values }) => ({\n        // So far we don't need to do anything for dateFilters because webAnalyticsLogic handles it.\n        setPageUrl: () => {\n            const searchParams = { ...router.values.searchParams }\n\n            if (values.pageUrl) {\n                searchParams.pageURL = values.pageUrl\n            } else {\n                delete searchParams.pageURL\n            }\n\n            searchParams.stripQueryParams = values.stripQueryParams\n\n            return ['/web/page-reports', searchParams, router.values.hashParams, { replace: true }]\n        },\n        toggleStripQueryParams: () => {\n            const searchParams = { ...router.values.searchParams }\n            searchParams.stripQueryParams = values.stripQueryParams\n\n            return ['/web/page-reports', searchParams, router.values.hashParams, { replace: true }]\n        },\n    }),\n})\n"],"names":[],"sourceRoot":""}