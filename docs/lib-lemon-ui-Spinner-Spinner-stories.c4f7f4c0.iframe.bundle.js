"use strict";(self.webpackChunkposthog=self.webpackChunkposthog||[]).push([[92168],{"./frontend/src/lib/lemon-ui/Spinner/Spinner.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AsOverlay:()=>AsOverlay,Default:()=>Default,InButtons:()=>InButtons,Sizes:()=>Sizes,TextColored:()=>TextColored,__namedExportsOrder:()=>__namedExportsOrder,asOverlayWaiting:()=>asOverlayWaiting,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _posthog_lemon_ui__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./frontend/@posthog/lemon-ui/src/index.ts"),_Spinner__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./frontend/src/lib/lemon-ui/Spinner/Spinner.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");let meta={title:"Lemon UI/Spinner",component:_Spinner__WEBPACK_IMPORTED_MODULE_1__.$,parameters:{testOptions:{waitForLoadersToDisappear:!1}},tags:["autodocs"]},__WEBPACK_DEFAULT_EXPORT__=meta;function Default(){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_Spinner__WEBPACK_IMPORTED_MODULE_1__.$,{})}function Sizes(){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div",{className:"space-y-2",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p",{children:"Spinners will inherit their size based on fontSize making it easy to style with CSS or utility classes"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div",{className:"flex items-center gap-2 text-xs",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_Spinner__WEBPACK_IMPORTED_MODULE_1__.$,{}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span",{children:"text-sm"})]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div",{className:"flex items-center gap-2",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_Spinner__WEBPACK_IMPORTED_MODULE_1__.$,{}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span",{children:"Default"})]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div",{className:"flex items-center gap-2 text-xl",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_Spinner__WEBPACK_IMPORTED_MODULE_1__.$,{}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span",{children:"text-xl"})]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div",{className:"flex items-center gap-2 text-5xl",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_Spinner__WEBPACK_IMPORTED_MODULE_1__.$,{}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("span",{children:"text-5xl"})]})]})}function TextColored(){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div",{className:"bg-default p-4 text-4xl",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_Spinner__WEBPACK_IMPORTED_MODULE_1__.$,{textColored:!0,className:"text-white"})})}function InButtons(){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div",{className:"flex gap-2 items-center",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_posthog_lemon_ui__WEBPACK_IMPORTED_MODULE_0__.LemonButton,{type:"primary",loading:!0,children:"Primary"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_posthog_lemon_ui__WEBPACK_IMPORTED_MODULE_0__.LemonButton,{type:"secondary",loading:!0,children:"Secondary Button"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_posthog_lemon_ui__WEBPACK_IMPORTED_MODULE_0__.LemonButton,{type:"secondary",status:"danger",loading:!0,children:"Secondary Danger"})]})}function AsOverlay(){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div",{className:"relative",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("h1",{children:"Hey there"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p",{children:"Illum impedit eligendi minima aperiam. Quo aut eaque debitis dolor corrupti fugit sit qui. Esse quibusdam doloremque beatae animi fugit maiores. Nemo totam aliquid similique. Autem labore deleniti eum qui fugiat nam fugiat inventore. Praesentium dolores neque nobis. Et blanditiis consequatur corporis quis. Sint eligendi tempore nostrum ullam deserunt aspernatur. Enim quod laboriosam provident odio est suscipit. Aspernatur voluptas dolor quia recusandae alias incidunt. Et neque officiis quas. Fugiat quisquam harum ab porro. Sit in totam aut tempora dolor ut blanditiis facilis. Maiores sed expedita ipsam ut. Cupiditate animi quisquam sequi corrupti hic ea mollitia vero. Aspernatur sed ut in non perferendis. Ut natus quia illum dignissimos suscipit repudiandae iure debitis. Cupiditate deserunt ratione odio vel. Ducimus et iure voluptatem ut ut aspernatur dolor. Iure voluptatem tempora ullam est ex laudantium. Sunt tempore molestiae voluptas dolores et ducimus. Quia et provident qui et ut magni. Tenetur sed quae culpa."}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_Spinner__WEBPACK_IMPORTED_MODULE_1__.t,{})]})}function asOverlayWaiting(){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div",{className:"relative",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("h1",{children:"Hey there"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("p",{children:"Before showing something loading, you might want to show a message to the user to let them know what's happening. This is especially useful when the loading might take a while. This is a good place to put that message. It's also a good place to put a message that tells the user what to do if the loading is taking too long. When you're ready to show the spinner, you can use the `mode` prop to change the spinner to a waiting spinner. This will give the user a visual indication that the loading is still about to happen."}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_Spinner__WEBPACK_IMPORTED_MODULE_1__.t,{mode:"waiting"})]})}Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"function Default(): JSX.Element {\n  return <Spinner />;\n}",...Default.parameters?.docs?.source}}},Sizes.parameters={...Sizes.parameters,docs:{...Sizes.parameters?.docs,source:{originalSource:'function Sizes(): JSX.Element {\n  return <div className="space-y-2">\n            <p>\n                Spinners will inherit their size based on fontSize making it easy to style with CSS or utility classes\n            </p>\n\n            <div className="flex items-center gap-2 text-xs">\n                <Spinner />\n                <span>text-sm</span>\n            </div>\n            <div className="flex items-center gap-2">\n                <Spinner />\n                <span>Default</span>\n            </div>\n\n            <div className="flex items-center gap-2 text-xl">\n                <Spinner />\n                <span>text-xl</span>\n            </div>\n\n            <div className="flex items-center gap-2 text-5xl">\n                <Spinner />\n                <span>text-5xl</span>\n            </div>\n        </div>;\n}',...Sizes.parameters?.docs?.source}}},TextColored.parameters={...TextColored.parameters,docs:{...TextColored.parameters?.docs,source:{originalSource:'function TextColored(): JSX.Element {\n  return <div className="bg-default p-4 text-4xl">\n            <Spinner textColored className="text-white" />\n        </div>;\n}',...TextColored.parameters?.docs?.source}}},InButtons.parameters={...InButtons.parameters,docs:{...InButtons.parameters?.docs,source:{originalSource:'function InButtons(): JSX.Element {\n  return <div className="flex gap-2 items-center">\n            <LemonButton type="primary" loading>\n                Primary\n            </LemonButton>\n            <LemonButton type="secondary" loading>\n                Secondary Button\n            </LemonButton>\n\n            <LemonButton type="secondary" status="danger" loading>\n                Secondary Danger\n            </LemonButton>\n        </div>;\n}',...InButtons.parameters?.docs?.source}}},AsOverlay.parameters={...AsOverlay.parameters,docs:{...AsOverlay.parameters?.docs,source:{originalSource:'function AsOverlay(): JSX.Element {\n  return <div className="relative">\n            <h1>Hey there</h1>\n            <p>\n                Illum impedit eligendi minima aperiam. Quo aut eaque debitis dolor corrupti fugit sit qui. Esse\n                quibusdam doloremque beatae animi fugit maiores. Nemo totam aliquid similique. Autem labore deleniti eum\n                qui fugiat nam fugiat inventore. Praesentium dolores neque nobis. Et blanditiis consequatur corporis\n                quis. Sint eligendi tempore nostrum ullam deserunt aspernatur. Enim quod laboriosam provident odio est\n                suscipit. Aspernatur voluptas dolor quia recusandae alias incidunt. Et neque officiis quas. Fugiat\n                quisquam harum ab porro. Sit in totam aut tempora dolor ut blanditiis facilis. Maiores sed expedita\n                ipsam ut. Cupiditate animi quisquam sequi corrupti hic ea mollitia vero. Aspernatur sed ut in non\n                perferendis. Ut natus quia illum dignissimos suscipit repudiandae iure debitis. Cupiditate deserunt\n                ratione odio vel. Ducimus et iure voluptatem ut ut aspernatur dolor. Iure voluptatem tempora ullam est\n                ex laudantium. Sunt tempore molestiae voluptas dolores et ducimus. Quia et provident qui et ut magni.\n                Tenetur sed quae culpa.\n            </p>\n\n            <SpinnerOverlay />\n        </div>;\n}',...AsOverlay.parameters?.docs?.source}}},asOverlayWaiting.parameters={...asOverlayWaiting.parameters,docs:{...asOverlayWaiting.parameters?.docs,source:{originalSource:'function asOverlayWaiting(): JSX.Element {\n  return <div className="relative">\n            <h1>Hey there</h1>\n            <p>\n                Before showing something loading, you might want to show a message to the user to let them know what\'s\n                happening. This is especially useful when the loading might take a while. This is a good place to put\n                that message. It\'s also a good place to put a message that tells the user what to do if the loading is\n                taking too long. When you\'re ready to show the spinner, you can use the `mode` prop to change the\n                spinner to a waiting spinner. This will give the user a visual indication that the loading is still\n                about to happen.\n            </p>\n\n            <SpinnerOverlay mode="waiting" />\n        </div>;\n}',...asOverlayWaiting.parameters?.docs?.source}}};let __namedExportsOrder=["Default","Sizes","TextColored","InButtons","AsOverlay","asOverlayWaiting"]}}]);