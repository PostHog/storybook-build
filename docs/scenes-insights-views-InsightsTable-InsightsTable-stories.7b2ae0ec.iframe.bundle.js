"use strict";(self.webpackChunkposthog=self.webpackChunkposthog||[]).push([[991],{"./frontend/src/scenes/insights/views/InsightsTable/InsightsTable.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Aggregation:()=>Aggregation,CanEditSeriesName:()=>CanEditSeriesName,Default:()=>Default,Embedded:()=>Embedded,Hourly:()=>Hourly,IsLegend:()=>IsLegend,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/.pnpm/react@16.14.0/node_modules/react/index.js"),kea__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/.pnpm/kea@3.1.5_react@16.14.0/node_modules/kea/lib/index.esm.js"),scenes_insights_insightLogic__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./frontend/src/scenes/insights/insightLogic.ts"),_queries_nodes_InsightViz_InsightViz__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./frontend/src/queries/nodes/InsightViz/InsightViz.tsx"),_queries_nodes_DataNode_dataNodeLogic__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./frontend/src/queries/nodes/DataNode/dataNodeLogic.ts"),_queries_nodes_InsightQuery_utils_filtersToQueryNode__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./frontend/src/queries/nodes/InsightQuery/utils/filtersToQueryNode.ts"),_types__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./frontend/src/types.ts"),_InsightsTable__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./frontend/src/scenes/insights/views/InsightsTable/InsightsTable.tsx"),_queries_nodes_InsightViz_utils__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./frontend/src/queries/nodes/InsightViz/utils.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/.pnpm/react@16.14.0/node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Insights/InsightsTable",component:_InsightsTable__WEBPACK_IMPORTED_MODULE_7__.z};let uniqueNode=0;const Template=(props,_ref)=>{let{parameters}=_ref;const[dashboardItemId]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)((()=>"InsightTableStory."+uniqueNode++)),insight=__webpack_require__("./frontend/src/mocks/fixtures/api/projects/:team_id/insights/trendsLineBreakdown.json"),filters={...insight.filters,...parameters.mergeFilters},insightProps={dashboardItemId,doNotLoad:!0,cachedInsight:{...insight,short_id:dashboardItemId,filters}},querySource=(0,_queries_nodes_InsightQuery_utils_filtersToQueryNode__WEBPACK_IMPORTED_MODULE_5__.wK)(filters),dataNodeLogicProps={query:querySource,key:(0,_queries_nodes_InsightViz_InsightViz__WEBPACK_IMPORTED_MODULE_3__.g)(insightProps),cachedResults:(0,_queries_nodes_InsightViz_utils__WEBPACK_IMPORTED_MODULE_8__.VB)(insightProps.cachedInsight,querySource),doNotLoad:insightProps.doNotLoad};return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(kea__WEBPACK_IMPORTED_MODULE_1__.BindLogic,{logic:scenes_insights_insightLogic__WEBPACK_IMPORTED_MODULE_2__.zm,props:insightProps,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(kea__WEBPACK_IMPORTED_MODULE_1__.BindLogic,{logic:_queries_nodes_DataNode_dataNodeLogic__WEBPACK_IMPORTED_MODULE_4__.M,props:dataNodeLogicProps,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_InsightsTable__WEBPACK_IMPORTED_MODULE_7__.z,{...props})})})},Default=Template.bind({});Default.args={};const IsLegend=Template.bind({});IsLegend.args={isLegend:!0};const Embedded=Template.bind({});Embedded.args={embedded:!0};const Hourly=Template.bind({});Hourly.parameters={mergeFilters:{interval:"hour"}};const Aggregation=Template.bind({});Aggregation.parameters={mergeFilters:{events:[{id:"$pageview",name:"$pageview",type:"events",order:0,math:_types__WEBPACK_IMPORTED_MODULE_6__.vN.UniqueSessions}]}};const CanEditSeriesName=Template.bind({});CanEditSeriesName.args={canEditSeriesNameInline:!0},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"(props, {\n  parameters\n}) => {\n  const [dashboardItemId] = useState(() => `InsightTableStory.${uniqueNode++}`);\n\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const insight = require('../../../../mocks/fixtures/api/projects/:team_id/insights/trendsLineBreakdown.json');\n  const filters = {\n    ...insight.filters,\n    ...parameters.mergeFilters\n  };\n  const cachedInsight = {\n    ...insight,\n    short_id: dashboardItemId,\n    filters\n  };\n  const insightProps = ({\n    dashboardItemId,\n    doNotLoad: true,\n    cachedInsight\n  } as InsightLogicProps);\n  const querySource = filtersToQueryNode(filters);\n  const dataNodeLogicProps: DataNodeLogicProps = {\n    query: querySource,\n    key: insightVizDataNodeKey(insightProps),\n    cachedResults: getCachedResults(insightProps.cachedInsight, querySource),\n    doNotLoad: insightProps.doNotLoad\n  };\n  return <BindLogic logic={insightLogic} props={insightProps}>\n            <BindLogic logic={dataNodeLogic} props={dataNodeLogicProps}>\n                <InsightsTable {...props} />\n            </BindLogic>\n        </BindLogic>;\n}",...Default.parameters?.docs?.source}}},IsLegend.parameters={...IsLegend.parameters,docs:{...IsLegend.parameters?.docs,source:{originalSource:"(props, {\n  parameters\n}) => {\n  const [dashboardItemId] = useState(() => `InsightTableStory.${uniqueNode++}`);\n\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const insight = require('../../../../mocks/fixtures/api/projects/:team_id/insights/trendsLineBreakdown.json');\n  const filters = {\n    ...insight.filters,\n    ...parameters.mergeFilters\n  };\n  const cachedInsight = {\n    ...insight,\n    short_id: dashboardItemId,\n    filters\n  };\n  const insightProps = ({\n    dashboardItemId,\n    doNotLoad: true,\n    cachedInsight\n  } as InsightLogicProps);\n  const querySource = filtersToQueryNode(filters);\n  const dataNodeLogicProps: DataNodeLogicProps = {\n    query: querySource,\n    key: insightVizDataNodeKey(insightProps),\n    cachedResults: getCachedResults(insightProps.cachedInsight, querySource),\n    doNotLoad: insightProps.doNotLoad\n  };\n  return <BindLogic logic={insightLogic} props={insightProps}>\n            <BindLogic logic={dataNodeLogic} props={dataNodeLogicProps}>\n                <InsightsTable {...props} />\n            </BindLogic>\n        </BindLogic>;\n}",...IsLegend.parameters?.docs?.source}}},Embedded.parameters={...Embedded.parameters,docs:{...Embedded.parameters?.docs,source:{originalSource:"(props, {\n  parameters\n}) => {\n  const [dashboardItemId] = useState(() => `InsightTableStory.${uniqueNode++}`);\n\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const insight = require('../../../../mocks/fixtures/api/projects/:team_id/insights/trendsLineBreakdown.json');\n  const filters = {\n    ...insight.filters,\n    ...parameters.mergeFilters\n  };\n  const cachedInsight = {\n    ...insight,\n    short_id: dashboardItemId,\n    filters\n  };\n  const insightProps = ({\n    dashboardItemId,\n    doNotLoad: true,\n    cachedInsight\n  } as InsightLogicProps);\n  const querySource = filtersToQueryNode(filters);\n  const dataNodeLogicProps: DataNodeLogicProps = {\n    query: querySource,\n    key: insightVizDataNodeKey(insightProps),\n    cachedResults: getCachedResults(insightProps.cachedInsight, querySource),\n    doNotLoad: insightProps.doNotLoad\n  };\n  return <BindLogic logic={insightLogic} props={insightProps}>\n            <BindLogic logic={dataNodeLogic} props={dataNodeLogicProps}>\n                <InsightsTable {...props} />\n            </BindLogic>\n        </BindLogic>;\n}",...Embedded.parameters?.docs?.source}}},Hourly.parameters={...Hourly.parameters,docs:{...Hourly.parameters?.docs,source:{originalSource:"(props, {\n  parameters\n}) => {\n  const [dashboardItemId] = useState(() => `InsightTableStory.${uniqueNode++}`);\n\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const insight = require('../../../../mocks/fixtures/api/projects/:team_id/insights/trendsLineBreakdown.json');\n  const filters = {\n    ...insight.filters,\n    ...parameters.mergeFilters\n  };\n  const cachedInsight = {\n    ...insight,\n    short_id: dashboardItemId,\n    filters\n  };\n  const insightProps = ({\n    dashboardItemId,\n    doNotLoad: true,\n    cachedInsight\n  } as InsightLogicProps);\n  const querySource = filtersToQueryNode(filters);\n  const dataNodeLogicProps: DataNodeLogicProps = {\n    query: querySource,\n    key: insightVizDataNodeKey(insightProps),\n    cachedResults: getCachedResults(insightProps.cachedInsight, querySource),\n    doNotLoad: insightProps.doNotLoad\n  };\n  return <BindLogic logic={insightLogic} props={insightProps}>\n            <BindLogic logic={dataNodeLogic} props={dataNodeLogicProps}>\n                <InsightsTable {...props} />\n            </BindLogic>\n        </BindLogic>;\n}",...Hourly.parameters?.docs?.source}}},Aggregation.parameters={...Aggregation.parameters,docs:{...Aggregation.parameters?.docs,source:{originalSource:"(props, {\n  parameters\n}) => {\n  const [dashboardItemId] = useState(() => `InsightTableStory.${uniqueNode++}`);\n\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const insight = require('../../../../mocks/fixtures/api/projects/:team_id/insights/trendsLineBreakdown.json');\n  const filters = {\n    ...insight.filters,\n    ...parameters.mergeFilters\n  };\n  const cachedInsight = {\n    ...insight,\n    short_id: dashboardItemId,\n    filters\n  };\n  const insightProps = ({\n    dashboardItemId,\n    doNotLoad: true,\n    cachedInsight\n  } as InsightLogicProps);\n  const querySource = filtersToQueryNode(filters);\n  const dataNodeLogicProps: DataNodeLogicProps = {\n    query: querySource,\n    key: insightVizDataNodeKey(insightProps),\n    cachedResults: getCachedResults(insightProps.cachedInsight, querySource),\n    doNotLoad: insightProps.doNotLoad\n  };\n  return <BindLogic logic={insightLogic} props={insightProps}>\n            <BindLogic logic={dataNodeLogic} props={dataNodeLogicProps}>\n                <InsightsTable {...props} />\n            </BindLogic>\n        </BindLogic>;\n}",...Aggregation.parameters?.docs?.source}}},CanEditSeriesName.parameters={...CanEditSeriesName.parameters,docs:{...CanEditSeriesName.parameters?.docs,source:{originalSource:"(props, {\n  parameters\n}) => {\n  const [dashboardItemId] = useState(() => `InsightTableStory.${uniqueNode++}`);\n\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const insight = require('../../../../mocks/fixtures/api/projects/:team_id/insights/trendsLineBreakdown.json');\n  const filters = {\n    ...insight.filters,\n    ...parameters.mergeFilters\n  };\n  const cachedInsight = {\n    ...insight,\n    short_id: dashboardItemId,\n    filters\n  };\n  const insightProps = ({\n    dashboardItemId,\n    doNotLoad: true,\n    cachedInsight\n  } as InsightLogicProps);\n  const querySource = filtersToQueryNode(filters);\n  const dataNodeLogicProps: DataNodeLogicProps = {\n    query: querySource,\n    key: insightVizDataNodeKey(insightProps),\n    cachedResults: getCachedResults(insightProps.cachedInsight, querySource),\n    doNotLoad: insightProps.doNotLoad\n  };\n  return <BindLogic logic={insightLogic} props={insightProps}>\n            <BindLogic logic={dataNodeLogic} props={dataNodeLogicProps}>\n                <InsightsTable {...props} />\n            </BindLogic>\n        </BindLogic>;\n}",...CanEditSeriesName.parameters?.docs?.source}}}}}]);