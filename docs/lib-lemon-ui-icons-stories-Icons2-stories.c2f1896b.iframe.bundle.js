"use strict";(self.webpackChunk_posthog_storybook=self.webpackChunk_posthog_storybook||[]).push([[51393],{"../../frontend/src/lib/lemon-ui/icons/stories/Icons2.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ShelfJ:()=>ShelfJ,ShelfK:()=>ShelfK,ShelfL:()=>ShelfL,ShelfM:()=>ShelfM,ShelfN:()=>ShelfN,ShelfO:()=>ShelfO,ShelfP:()=>ShelfP,ShelfQ:()=>ShelfQ,ShelfR:()=>ShelfR,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),lib_lemon_ui_LemonButton__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../frontend/src/lib/lemon-ui/LemonButton/index.ts"),lib_lemon_ui_LemonCheckbox__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../frontend/src/lib/lemon-ui/LemonCheckbox/index.ts"),lib_lemon_ui_LemonTable__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../../frontend/src/lib/lemon-ui/LemonTable/index.ts"),_icons__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("../../frontend/src/lib/lemon-ui/icons/icons.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");let __WEBPACK_DEFAULT_EXPORT__={title:"Lemon UI/Icons2",parameters:{docs:{description:{component:`

[Related Figma area](https://www.figma.com/file/Y9G24U4r04nEjIDGIEGuKI/PostHog-Design-System-One?node-id=3139%3A1388)

Lemon Icons are generally [Material Icons](https://fonts.google.com/icons) with some matching in-house additions. 
All should be based on a 24px (1.5rem) square viewbox, with icon contents fitting into a 20px (1.25rem) or smaller square. 

When adding new icons from Figma please make sure to:
- [ ] Export the item as an SVG using the 24x24 frame surrounding it
- [ ] Follow the existing \`IconFoo\` naming convention and use the \`<SvgIcon>\` component instead of \`<svg>\`
- [ ] Ensure all colors in the SVG are set to \`currentColor\` so that themes can be applied
`}}},tags:["autodocs"]},allIcons=Object.entries(_icons__WEBPACK_IMPORTED_MODULE_4__).filter(_ref=>{let[key]=_ref;return"IconWithCount"!==key&&"IconWithBadge"!==key}).map(_ref2=>{let[key,Icon]=_ref2;return{name:key,icon:Icon}}).sort((a,b)=>a.name.localeCompare(b.name)),LibraryTemplate=_ref3=>{let{letter}=_ref3,[showBorder,setShowBorder]=react__WEBPACK_IMPORTED_MODULE_0__.useState(!0),filteredIcons=void 0===letter?allIcons:null!==letter?allIcons.filter(icon=>icon.name.replace("Icon","").toLowerCase().startsWith(letter)):allIcons.filter(icon=>!icon.name.replace("Icon","").toLowerCase().match(/[a-z]/));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)("div",{className:"deprecated-space-y-2",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(lib_lemon_ui_LemonCheckbox__WEBPACK_IMPORTED_MODULE_2__.H,{bordered:!0,checked:showBorder,onChange:setShowBorder,label:"Show border"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(lib_lemon_ui_LemonTable__WEBPACK_IMPORTED_MODULE_3__.g,{dataSource:filteredIcons,columns:[{title:"Name",key:"name",dataIndex:"name",render:function RenderName(name){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("code",{children:`<${name} />`})}},{title:"Icon",key:"icon",dataIndex:"icon",render:function RenderIcon(Icon){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Icon,{style:{fontSize:"1.5rem",boxShadow:showBorder?"0px 0px 1px 1px red":null}})}},{title:"In Button",key:"button-icon",dataIndex:"icon",render:function RenderButton(Icon){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(lib_lemon_ui_LemonButton__WEBPACK_IMPORTED_MODULE_1__.J,{type:"secondary",icon:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Icon,{}),children:"Button"})}}],emptyState:letter?`No icons start with the letter ${letter.toUpperCase()}`:"No icons"})]})},ShelfJ=LibraryTemplate.bind({});ShelfJ.args={letter:"j"},ShelfJ.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};let ShelfK=LibraryTemplate.bind({});ShelfK.args={letter:"k"},ShelfK.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};let ShelfL=LibraryTemplate.bind({});ShelfL.args={letter:"l"},ShelfL.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};let ShelfM=LibraryTemplate.bind({});ShelfM.args={letter:"m"},ShelfM.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};let ShelfN=LibraryTemplate.bind({});ShelfN.args={letter:"n"},ShelfN.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};let ShelfO=LibraryTemplate.bind({});ShelfO.args={letter:"o"},ShelfO.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};let ShelfP=LibraryTemplate.bind({});ShelfP.args={letter:"p"},ShelfP.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};let ShelfQ=LibraryTemplate.bind({});ShelfQ.args={letter:"q"},ShelfQ.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};let ShelfR=LibraryTemplate.bind({});ShelfR.args={letter:"r"},ShelfR.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}},ShelfJ.parameters={...ShelfJ.parameters,docs:{...ShelfJ.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfJ.parameters?.docs?.source}}},ShelfK.parameters={...ShelfK.parameters,docs:{...ShelfK.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfK.parameters?.docs?.source}}},ShelfL.parameters={...ShelfL.parameters,docs:{...ShelfL.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfL.parameters?.docs?.source}}},ShelfM.parameters={...ShelfM.parameters,docs:{...ShelfM.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfM.parameters?.docs?.source}}},ShelfN.parameters={...ShelfN.parameters,docs:{...ShelfN.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfN.parameters?.docs?.source}}},ShelfO.parameters={...ShelfO.parameters,docs:{...ShelfO.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfO.parameters?.docs?.source}}},ShelfP.parameters={...ShelfP.parameters,docs:{...ShelfP.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfP.parameters?.docs?.source}}},ShelfQ.parameters={...ShelfQ.parameters,docs:{...ShelfQ.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfQ.parameters?.docs?.source}}},ShelfR.parameters={...ShelfR.parameters,docs:{...ShelfR.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfR.parameters?.docs?.source}}};let __namedExportsOrder=["ShelfJ","ShelfK","ShelfL","ShelfM","ShelfN","ShelfO","ShelfP","ShelfQ","ShelfR"]}}]);
//# sourceMappingURL=lib-lemon-ui-icons-stories-Icons2-stories.c2f1896b.iframe.bundle.js.map