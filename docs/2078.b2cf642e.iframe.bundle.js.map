{"version":3,"file":"2078.b2cf642e.iframe.bundle.js","mappings":";AAiDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@posthog/storybook/../../frontend/src/scenes/debug/queryLogTableLogic.ts"],"sourcesContent":["import { actions, afterMount, connect, kea, path, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\n\nimport api from 'lib/api'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { HogQLQueryResponse } from '~/queries/schema/schema-general'\n\nimport type { queryLogTableLogicType } from './queryLogTableLogicType'\n\nexport interface QueryLogEntry {\n    query_id: string\n    query: string\n    query_start_time: string\n    query_duration_ms: number\n    name: string\n    status: string\n    exception_code: number\n    read_rows: number\n    read_bytes: number\n    result_rows: number\n}\n\nexport interface QueryLogTableLogicProps {\n    key: string\n}\n\nexport const queryLogTableLogic = kea<queryLogTableLogicType>([\n    path(['scenes', 'debug', 'queryLogTableLogic']),\n    connect({\n        values: [userLogic, ['user']],\n    }),\n    actions({\n        loadQueryLogs: true,\n        loadMoreQueryLogs: true,\n    }),\n    loaders(({ values }) => ({\n        queryLogs: [\n            [] as QueryLogEntry[],\n            {\n                loadQueryLogs: async () => {\n                    try {\n                        if (!values.user?.id) {\n                            return []\n                        }\n                        // Query the query_log_archive for the current user's queries\n                        const response = (await api.query({\n                            kind: 'HogQLQuery',\n                            query: `\n                                SELECT\n                                    query_id,\n                                    query,\n                                    query_start_time,\n                                    query_duration_ms,\n                                    name,\n                                    status,\n                                    exception_code,\n                                    read_rows,\n                                    read_bytes,\n                                    result_rows\n                                FROM query_log\n                                WHERE created_by = {user_id}\n                                    AND event_date >= today() - INTERVAL 7 DAY\n                                    AND query != ''\n                                ORDER BY query_start_time DESC\n                                LIMIT {limit}\n                            `,\n                            values: {\n                                user_id: values.user.id,\n                                limit: values.limit,\n                            },\n                        })) as HogQLQueryResponse\n\n                        // Convert array of arrays to array of objects\n                        if (!response.results || !response.columns) {\n                            return []\n                        }\n\n                        return response.results.map((row: any[]) => {\n                            const obj: any = {}\n                            response.columns!.forEach((col: string, idx: number) => {\n                                obj[col] = row[idx]\n                            })\n                            return obj as QueryLogEntry\n                        })\n                    } catch (error) {\n                        console.error('Error loading query logs:', error)\n                        return []\n                    }\n                },\n            },\n        ],\n        moreQueryLogs: [\n            [] as QueryLogEntry[],\n            {\n                loadMoreQueryLogs: async () => {\n                    try {\n                        if (!values.user?.id) {\n                            return []\n                        }\n                        // Load more query logs with offset\n                        const response = (await api.query({\n                            kind: 'HogQLQuery',\n                            query: `\n                                SELECT\n                                    query_id,\n                                    query,\n                                    query_start_time,\n                                    query_duration_ms,\n                                    name,\n                                    status,\n                                    exception_code,\n                                    read_rows,\n                                    read_bytes,\n                                    result_rows\n                                FROM query_log\n                                WHERE created_by = {user_id}\n                                    AND event_date >= today() - INTERVAL 7 DAY\n                                    AND query != ''\n                                ORDER BY query_start_time DESC\n                                LIMIT {limit} OFFSET {offset}\n                            `,\n                            values: {\n                                user_id: values.user.id,\n                                limit: values.limit,\n                                offset: values.queryLogs.length,\n                            },\n                        })) as HogQLQueryResponse\n\n                        // Convert array of arrays to array of objects\n                        if (!response.results || !response.columns) {\n                            return []\n                        }\n\n                        return response.results.map((row: any[]) => {\n                            const obj: any = {}\n                            response.columns!.forEach((col: string, idx: number) => {\n                                obj[col] = row[idx]\n                            })\n                            return obj as QueryLogEntry\n                        })\n                    } catch (error) {\n                        console.error('Error loading more query logs:', error)\n                        return []\n                    }\n                },\n            },\n        ],\n    })),\n    reducers({\n        limit: [100, {}],\n        queryLogs: {\n            loadQueryLogsSuccess: (_, { queryLogs }) => queryLogs,\n            loadMoreQueryLogsSuccess: (state, { moreQueryLogs }) => [...state, ...moreQueryLogs],\n        },\n    }),\n    selectors({\n        queryLogsWithIndex: [\n            (s) => [s.queryLogs],\n            (queryLogs: QueryLogEntry[]): (QueryLogEntry & { index: number })[] =>\n                queryLogs.map((log, index) => ({ ...log, index })),\n        ],\n        hasMore: [\n            (s) => [s.moreQueryLogs, s.limit],\n            (moreQueryLogs: QueryLogEntry[], limit: number): boolean => moreQueryLogs.length === limit,\n        ],\n    }),\n    afterMount(({ actions }) => {\n        actions.loadQueryLogs()\n    }),\n])\n"],"names":[],"sourceRoot":""}