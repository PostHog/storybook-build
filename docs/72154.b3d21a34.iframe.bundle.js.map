{"version":3,"file":"72154.b3d21a34.iframe.bundle.js","mappings":";AAoHA;;AAAA","sources":["webpack://posthog/./frontend/src/scenes/groups/Groups.tsx"],"sourcesContent":["import { useActions, useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { PropertiesTable } from 'lib/components/PropertiesTable'\nimport { TZLabel } from 'lib/components/TZLabel'\nimport { groupsAccessLogic, GroupsAccessStatus } from 'lib/introductions/groupsAccessLogic'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { LemonDivider } from 'lib/lemon-ui/LemonDivider'\nimport { LemonInput } from 'lib/lemon-ui/LemonInput/LemonInput'\nimport { LemonTable } from 'lib/lemon-ui/LemonTable'\nimport { LemonTableLink } from 'lib/lemon-ui/LemonTable/LemonTableLink'\nimport { LemonTableColumns } from 'lib/lemon-ui/LemonTable/types'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { capitalizeFirstLetter } from 'lib/utils'\nimport { GroupsIntroduction } from 'scenes/groups/GroupsIntroduction'\nimport { groupDisplayId } from 'scenes/persons/GroupActorDisplay'\nimport { urls } from 'scenes/urls'\n\nimport { Group, PropertyDefinitionType } from '~/types'\n\nimport { groupsListLogic } from './groupsListLogic'\n\nexport function Groups({ groupTypeIndex }: { groupTypeIndex: number }): JSX.Element {\n    const {\n        groupTypeName: { singular, plural },\n        groups,\n        groupsLoading,\n        search,\n    } = useValues(groupsListLogic({ groupTypeIndex }))\n    const { loadGroups, setSearch } = useActions(groupsListLogic({ groupTypeIndex }))\n    const { groupsAccessStatus } = useValues(groupsAccessLogic)\n\n    if (groupTypeIndex === undefined) {\n        throw new Error('groupTypeIndex is undefined')\n    }\n\n    if (\n        groupsAccessStatus == GroupsAccessStatus.HasAccess ||\n        groupsAccessStatus == GroupsAccessStatus.HasGroupTypes ||\n        groupsAccessStatus == GroupsAccessStatus.NoAccess\n    ) {\n        return (\n            <>\n                <GroupsIntroduction />\n            </>\n        )\n    }\n\n    const columns: LemonTableColumns<Group> = [\n        {\n            title: capitalizeFirstLetter(plural),\n            key: 'group_key',\n            render: function Render(_, group: Group) {\n                return (\n                    <LemonTableLink\n                        to={urls.group(group.group_type_index.toString(), group.group_key)}\n                        title={groupDisplayId(group.group_key, group.group_properties)}\n                    />\n                )\n            },\n        },\n        {\n            title: 'First seen',\n            key: 'created_at',\n            render: function Render(_, group: Group) {\n                return <TZLabel time={group.created_at} />\n            },\n        },\n    ]\n\n    return (\n        <>\n            <LemonInput\n                type=\"search\"\n                placeholder={`Search for ${plural}`}\n                onChange={setSearch}\n                value={search}\n                data-attr=\"group-search\"\n                className=\"mb-4\"\n            />\n            <LemonDivider className=\"mb-4\" />\n            <LemonTable\n                columns={columns}\n                rowKey=\"group_key\"\n                loading={groupsLoading}\n                dataSource={groups.results}\n                expandable={{\n                    expandedRowRender: function RenderPropertiesTable({ group_properties }) {\n                        return <PropertiesTable type={PropertyDefinitionType.Group} properties={group_properties} />\n                    },\n                    rowExpandable: ({ group_properties }) =>\n                        !!group_properties && Object.keys(group_properties).length > 0,\n                }}\n                pagination={{\n                    controlled: true,\n                    onBackward: groups.previous\n                        ? () => {\n                              loadGroups(groups.previous)\n                              window.scrollTo(0, 0)\n                          }\n                        : undefined,\n                    onForward: groups.next\n                        ? () => {\n                              loadGroups(groups.next)\n                              window.scrollTo(0, 0)\n                          }\n                        : undefined,\n                }}\n                emptyState={\n                    <>\n                        <LemonBanner type=\"info\">\n                            No {plural} found. Make sure to send properties with your {singular} for them to show up in\n                            the list.{' '}\n                            <Link to=\"https://posthog.com/docs/user-guides/group-analytics\" target=\"_blank\">\n                                Read more here.\n                            </Link>\n                        </LemonBanner>\n                        <CodeSnippet language={Language.JavaScript} wrap>\n                            {`posthog.group('${singular}', 'id:5', {\\n` +\n                                `    name: 'Awesome ${singular}',\\n` +\n                                '    value: 11\\n' +\n                                '});'}\n                        </CodeSnippet>\n                    </>\n                }\n            />\n        </>\n    )\n}\n"],"names":[],"sourceRoot":""}