{"version":3,"file":"toolbar-Toolbar-stories.a41658dd.iframe.bundle.js","mappings":";;;;AAyMA","sources":["webpack://posthog/./frontend/src/toolbar/stats/HeatmapToolbarMenu.tsx"],"sourcesContent":["import { IconMagicWand } from '@posthog/icons'\nimport { LemonLabel, LemonSegmentedButton } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { CUSTOM_OPTION_KEY } from 'lib/components/DateFilter/types'\nimport { IconSync } from 'lib/lemon-ui/icons'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonInput } from 'lib/lemon-ui/LemonInput'\nimport { LemonMenu } from 'lib/lemon-ui/LemonMenu'\nimport { LemonSlider } from 'lib/lemon-ui/LemonSlider'\nimport { LemonSwitch } from 'lib/lemon-ui/LemonSwitch'\nimport { Spinner } from 'lib/lemon-ui/Spinner'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport { dateFilterToText, dateMapping } from 'lib/utils'\n\nimport { ToolbarMenu } from '~/toolbar/bar/ToolbarMenu'\nimport { elementsLogic } from '~/toolbar/elements/elementsLogic'\nimport { heatmapLogic } from '~/toolbar/elements/heatmapLogic'\nimport { currentPageLogic } from '~/toolbar/stats/currentPageLogic'\n\nimport { useToolbarFeatureFlag } from '../toolbarPosthogJS'\n\nconst ScrollDepthJSWarning = (): JSX.Element | null => {\n    const { scrollDepthPosthogJsError } = useValues(heatmapLogic)\n\n    if (!scrollDepthPosthogJsError) {\n        return null\n    }\n\n    return (\n        <p className=\"my-2 bg-danger-highlight border border-danger rounded p-2\">\n            {scrollDepthPosthogJsError === 'version' ? (\n                <>This feature requires a newer version of posthog-js</>\n            ) : scrollDepthPosthogJsError === 'disabled' ? (\n                <>\n                    Your posthog-js config has <i>disable_scroll_properties</i> set - these properties are required for\n                    scroll depth calculations to work.\n                </>\n            ) : null}\n        </p>\n    )\n}\n\nexport const HeatmapToolbarMenu = (): JSX.Element => {\n    const { wildcardHref } = useValues(currentPageLogic)\n    const { setWildcardHref, autoWildcardHref } = useActions(currentPageLogic)\n\n    const {\n        matchLinksByHref,\n        countedElements,\n        clickCount,\n        commonFilters,\n        heatmapFilters,\n        canLoadMoreElementStats,\n        viewportRange,\n        rawHeatmapLoading,\n        elementStatsLoading,\n        clickmapsEnabled,\n        heatmapFixedPositionMode,\n    } = useValues(heatmapLogic)\n    const {\n        setCommonFilters,\n        patchHeatmapFilters,\n        loadMoreElementStats,\n        setMatchLinksByHref,\n        toggleClickmapsEnabled,\n        setHeatmapFixedPositionMode,\n    } = useActions(heatmapLogic)\n    const { setHighlightElement, setSelectedElement } = useActions(elementsLogic)\n\n    const dateItems = dateMapping\n        .filter((dm) => dm.key !== CUSTOM_OPTION_KEY)\n        .map((dateOption) => ({\n            label: dateOption.key,\n            onClick: () => setCommonFilters({ date_from: dateOption.values[0], date_to: dateOption.values[1] }),\n        }))\n\n    const showNewHeatmaps = useToolbarFeatureFlag('toolbar-heatmaps')\n\n    return (\n        <ToolbarMenu>\n            <ToolbarMenu.Header>\n                <div className=\"flex gap-1\">\n                    <LemonInput className=\"flex-1\" value={wildcardHref} onChange={setWildcardHref} />\n                    <LemonButton\n                        type=\"secondary\"\n                        icon={<IconMagicWand />}\n                        size=\"small\"\n                        onClick={() => autoWildcardHref()}\n                        tooltip={\n                            <>\n                                You can use the wildcard character <code>*</code> to match any character in the URL. For\n                                example, <code>https://example.com/*</code> will match{' '}\n                                <code>https://example.com/page</code> and <code>https://example.com/page/1</code>.\n                                <br />\n                                Click this button to automatically wildcards where we believe it would make sense\n                            </>\n                        }\n                    />\n                </div>\n\n                <div className=\"flex flex-row items-center gap-2 py-2 border-b\">\n                    <LemonMenu items={dateItems}>\n                        <LemonButton size=\"small\" type=\"secondary\">\n                            {dateFilterToText(commonFilters.date_from, commonFilters.date_to, 'Last 7 days')}\n                        </LemonButton>\n                    </LemonMenu>\n                </div>\n            </ToolbarMenu.Header>\n            <ToolbarMenu.Body>\n                {showNewHeatmaps ? (\n                    <div className=\"border-b p-2\">\n                        <LemonSwitch\n                            className=\"w-full\"\n                            checked={!!heatmapFilters.enabled}\n                            label={<>Heatmaps {rawHeatmapLoading ? <Spinner /> : null}</>}\n                            onChange={(e) =>\n                                patchHeatmapFilters({\n                                    enabled: e,\n                                })\n                            }\n                        />\n\n                        {heatmapFilters.enabled && (\n                            <>\n                                <p>\n                                    Heatmaps are calculated using additional data sent along with standard events. They\n                                    are based off of general pointer interactions and might not be 100% accurate to the\n                                    page you are viewing.\n                                </p>\n                                <div className=\"space-y-2\">\n                                    <LemonLabel>Heatmap type</LemonLabel>\n                                    <div className=\"flex gap-2 justify-between items-center\">\n                                        <LemonSegmentedButton\n                                            onChange={(e) => patchHeatmapFilters({ type: e })}\n                                            value={heatmapFilters.type ?? undefined}\n                                            options={[\n                                                {\n                                                    value: 'click',\n                                                    label: 'Clicks',\n                                                },\n                                                {\n                                                    value: 'rageclick',\n                                                    label: 'Rageclicks',\n                                                },\n                                                {\n                                                    value: 'mousemove',\n                                                    label: 'Mouse moves',\n                                                },\n                                                {\n                                                    value: 'scrolldepth',\n                                                    label: 'Scroll depth',\n                                                },\n                                            ]}\n                                            size=\"small\"\n                                        />\n                                    </div>\n\n                                    {heatmapFilters.type === 'scrolldepth' && (\n                                        <>\n                                            <p>\n                                                Scroll depth uses additional information from Pageview and Pageleave\n                                                events to indicate how far down the page users have scrolled.\n                                            </p>\n                                            <ScrollDepthJSWarning />\n                                        </>\n                                    )}\n\n                                    <LemonLabel>Aggregation</LemonLabel>\n                                    <div className=\"flex gap-2 justify-between items-center\">\n                                        <LemonSegmentedButton\n                                            onChange={(e) => patchHeatmapFilters({ aggregation: e })}\n                                            value={heatmapFilters.aggregation ?? 'total_count'}\n                                            options={[\n                                                {\n                                                    value: 'total_count',\n                                                    label: 'Total count',\n                                                },\n                                                {\n                                                    value: 'unique_visitors',\n                                                    label: 'Unique visitors',\n                                                },\n                                            ]}\n                                            size=\"small\"\n                                        />\n                                    </div>\n\n                                    <LemonLabel>Viewport accuracy</LemonLabel>\n                                    <div className=\"flex gap-2 justify-between items-center\">\n                                        <LemonSlider\n                                            className=\"flex-1\"\n                                            min={0}\n                                            max={1}\n                                            step={0.01}\n                                            value={heatmapFilters.viewportAccuracy ?? 0}\n                                            onChange={(value) => patchHeatmapFilters({ viewportAccuracy: value })}\n                                        />\n                                        <Tooltip\n                                            title={`\n                                    The range of values \n                                    Heatmap will be loaded for all viewports where the width is above \n\n                                    `}\n                                        >\n                                            <code className=\"w-[12rem] text-right text-xs whitsepace-nowrap\">\n                                                {`${Math.round((heatmapFilters.viewportAccuracy ?? 1) * 100)}% (${\n                                                    viewportRange.min\n                                                }px - ${viewportRange.max}px)`}\n                                            </code>\n                                        </Tooltip>\n                                    </div>\n\n                                    {heatmapFilters.type !== 'scrolldepth' ? (\n                                        <>\n                                            <LemonLabel>Fixed positioning calculation</LemonLabel>\n                                            <p>\n                                                PostHog JS will attempt to detect fixed elements such as headers or\n                                                modals and will therefore show those heatmap areas, ignoring the scroll\n                                                value.\n                                                <br />\n                                                You can choose to show these areas as fixed, include them with scrolled\n                                                data or hide them altogether.\n                                            </p>\n\n                                            <LemonSegmentedButton\n                                                onChange={setHeatmapFixedPositionMode}\n                                                value={heatmapFixedPositionMode}\n                                                options={[\n                                                    {\n                                                        value: 'fixed',\n                                                        label: 'Show fixed',\n                                                    },\n                                                    {\n                                                        value: 'relative',\n                                                        label: 'Show scrolled',\n                                                    },\n                                                    {\n                                                        value: 'hidden',\n                                                        label: 'Hide',\n                                                    },\n                                                ]}\n                                                size=\"small\"\n                                            />\n                                        </>\n                                    ) : null}\n                                </div>\n                            </>\n                        )}\n                    </div>\n                ) : null}\n\n                <div className=\"p-2\">\n                    {showNewHeatmaps ? (\n                        <LemonSwitch\n                            className=\"w-full\"\n                            checked={!!clickmapsEnabled}\n                            label={<>Clickmaps (autocapture) {elementStatsLoading ? <Spinner /> : null}</>}\n                            onChange={(e) => toggleClickmapsEnabled(e)}\n                        />\n                    ) : null}\n\n                    {(clickmapsEnabled || !showNewHeatmaps) && (\n                        <>\n                            {showNewHeatmaps ? (\n                                <p>\n                                    Clickmaps are built using Autocapture events. They are more accurate than heatmaps\n                                    if the event can be mapped to a specific element found on the page you are viewing\n                                    but less data is usually captured.\n                                </p>\n                            ) : null}\n                            <div className=\"flex items-center gap-2\">\n                                <LemonButton\n                                    icon={<IconSync />}\n                                    type=\"secondary\"\n                                    size=\"small\"\n                                    onClick={loadMoreElementStats}\n                                    disabledReason={\n                                        canLoadMoreElementStats ? undefined : 'Loaded all elements in this data range.'\n                                    }\n                                >\n                                    Load more\n                                </LemonButton>\n                                <Tooltip\n                                    title={\n                                        <span>\n                                            Matching links by their target URL can exclude clicks from the heatmap if\n                                            the URL is too unique.\n                                        </span>\n                                    }\n                                >\n                                    <LemonSwitch\n                                        className=\"flex-1\"\n                                        checked={matchLinksByHref}\n                                        label=\"Match links by their target URL\"\n                                        onChange={(checked) => setMatchLinksByHref(checked)}\n                                        fullWidth={true}\n                                        bordered={true}\n                                    />\n                                </Tooltip>\n                            </div>\n\n                            <div className=\"my-2\">\n                                Found: {countedElements.length} elements / {clickCount} clicks!\n                            </div>\n                            <div className=\"flex flex-col w-full h-full\">\n                                {countedElements.length ? (\n                                    countedElements.map(({ element, count, actionStep }, index) => {\n                                        return (\n                                            <LemonButton\n                                                key={index}\n                                                size=\"small\"\n                                                fullWidth\n                                                onClick={() => setSelectedElement(element)}\n                                            >\n                                                <div\n                                                    className=\"flex flex-1 justify-between\"\n                                                    key={index}\n                                                    onMouseEnter={() => setHighlightElement(element)}\n                                                    onMouseLeave={() => setHighlightElement(null)}\n                                                >\n                                                    <div>\n                                                        {index + 1}.&nbsp;\n                                                        {actionStep?.text ||\n                                                            (actionStep?.tag_name ? (\n                                                                <code>&lt;{actionStep.tag_name}&gt;</code>\n                                                            ) : (\n                                                                <em>Element</em>\n                                                            ))}\n                                                    </div>\n                                                    <div>{count} clicks</div>\n                                                </div>\n                                            </LemonButton>\n                                        )\n                                    })\n                                ) : (\n                                    <div className=\"p-2\">No elements found.</div>\n                                )}\n                            </div>\n                        </>\n                    )}\n                </div>\n            </ToolbarMenu.Body>\n        </ToolbarMenu>\n    )\n}\n"],"names":[],"sourceRoot":""}