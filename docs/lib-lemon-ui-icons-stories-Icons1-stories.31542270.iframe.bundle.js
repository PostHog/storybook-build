"use strict";(self.webpackChunk_posthog_storybook=self.webpackChunk_posthog_storybook||[]).push([[5925],{"../../frontend/src/lib/lemon-ui/icons/stories/Icons1.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Library:()=>Library,ShelfA:()=>ShelfA,ShelfB:()=>ShelfB,ShelfC:()=>ShelfC,ShelfD:()=>ShelfD,ShelfE:()=>ShelfE,ShelfF:()=>ShelfF,ShelfG:()=>ShelfG,ShelfH:()=>ShelfH,ShelfI:()=>ShelfI,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var lib_lemon_ui_LemonButton__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../frontend/src/lib/lemon-ui/LemonButton/index.ts"),lib_lemon_ui_LemonCheckbox__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../frontend/src/lib/lemon-ui/LemonCheckbox/index.ts"),lib_lemon_ui_LemonTable__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../frontend/src/lib/lemon-ui/LemonTable/index.ts"),react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),_icons__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("../../frontend/src/lib/lemon-ui/icons/icons.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");let __WEBPACK_DEFAULT_EXPORT__={title:"Lemon UI/Icons1",parameters:{docs:{description:{component:`

[Related Figma area](https://www.figma.com/file/Y9G24U4r04nEjIDGIEGuKI/PostHog-Design-System-One?node-id=3139%3A1388)

Lemon Icons are generally [Material Icons](https://fonts.google.com/icons) with some matching in-house additions. 
All should be based on a 24px (1.5rem) square viewbox, with icon contents fitting into a 20px (1.25rem) or smaller square. 

When adding new icons from Figma please make sure to:
- [ ] Export the item as an SVG using the 24x24 frame surrounding it
- [ ] Follow the existing \`IconFoo\` naming convention and use the \`<SvgIcon>\` component instead of \`<svg>\`
- [ ] Ensure all colors in the SVG are set to \`currentColor\` so that themes can be applied
`}}},tags:["autodocs"]},allIcons=Object.entries(_icons__WEBPACK_IMPORTED_MODULE_4__).filter(_ref=>{let[key]=_ref;return"IconWithCount"!==key&&"IconWithBadge"!==key}).map(_ref2=>{let[key,Icon]=_ref2;return{name:key,icon:Icon}}).sort((a,b)=>a.name.localeCompare(b.name)),LibraryTemplate=_ref3=>{let{letter}=_ref3,[showBorder,setShowBorder]=react__WEBPACK_IMPORTED_MODULE_3__.useState(!0),filteredIcons=void 0===letter?allIcons:null!==letter?allIcons.filter(icon=>icon.name.replace("Icon","").toLowerCase().startsWith(letter)):allIcons.filter(icon=>!icon.name.replace("Icon","").toLowerCase().match(/[a-z]/));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)("div",{className:"deprecated-space-y-2",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(lib_lemon_ui_LemonCheckbox__WEBPACK_IMPORTED_MODULE_1__.H,{bordered:!0,checked:showBorder,onChange:setShowBorder,label:"Show border"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(lib_lemon_ui_LemonTable__WEBPACK_IMPORTED_MODULE_2__.g,{dataSource:filteredIcons,columns:[{title:"Name",key:"name",dataIndex:"name",render:function RenderName(name){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("code",{children:`<${name} />`})}},{title:"Icon",key:"icon",dataIndex:"icon",render:function RenderIcon(Icon){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Icon,{style:{fontSize:"1.5rem",boxShadow:showBorder?"0px 0px 1px 1px red":null}})}},{title:"In Button",key:"button-icon",dataIndex:"icon",render:function RenderButton(Icon){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(lib_lemon_ui_LemonButton__WEBPACK_IMPORTED_MODULE_0__.J,{type:"secondary",icon:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Icon,{}),children:"Button"})}}],emptyState:letter?`No icons start with the letter ${letter.toUpperCase()}`:"No icons"})]})},Library=LibraryTemplate.bind({});Library.tags=["autodocs","test-skip"];let ShelfA=LibraryTemplate.bind({});ShelfA.args={letter:"a"},ShelfA.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};let ShelfB=LibraryTemplate.bind({});ShelfB.args={letter:"b"},ShelfB.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};let ShelfC=LibraryTemplate.bind({});ShelfC.args={letter:"c"},ShelfC.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};let ShelfD=LibraryTemplate.bind({});ShelfD.args={letter:"d"},ShelfD.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};let ShelfE=LibraryTemplate.bind({});ShelfE.args={letter:"e"},ShelfE.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};let ShelfF=LibraryTemplate.bind({});ShelfF.args={letter:"f"},ShelfF.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};let ShelfG=LibraryTemplate.bind({});ShelfG.args={letter:"g"},ShelfG.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};let ShelfH=LibraryTemplate.bind({});ShelfH.args={letter:"h"},ShelfH.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}};let ShelfI=LibraryTemplate.bind({});ShelfI.args={letter:"i"},ShelfI.parameters={testOptions:{snapshotTargetSelector:".LemonTable tbody"}},Library.parameters={...Library.parameters,docs:{...Library.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...Library.parameters?.docs?.source}}},ShelfA.parameters={...ShelfA.parameters,docs:{...ShelfA.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfA.parameters?.docs?.source}}},ShelfB.parameters={...ShelfB.parameters,docs:{...ShelfB.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfB.parameters?.docs?.source}}},ShelfC.parameters={...ShelfC.parameters,docs:{...ShelfC.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfC.parameters?.docs?.source}}},ShelfD.parameters={...ShelfD.parameters,docs:{...ShelfD.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfD.parameters?.docs?.source}}},ShelfE.parameters={...ShelfE.parameters,docs:{...ShelfE.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfE.parameters?.docs?.source}}},ShelfF.parameters={...ShelfF.parameters,docs:{...ShelfF.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfF.parameters?.docs?.source}}},ShelfG.parameters={...ShelfG.parameters,docs:{...ShelfG.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfG.parameters?.docs?.source}}},ShelfH.parameters={...ShelfH.parameters,docs:{...ShelfH.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfH.parameters?.docs?.source}}},ShelfI.parameters={...ShelfI.parameters,docs:{...ShelfI.parameters?.docs,source:{originalSource:"({\n  letter\n}) => {\n  const [showBorder, setShowBorder] = React.useState(true);\n  const filteredIcons = letter === undefined ? allIcons : letter !== null ? allIcons.filter(icon => icon.name.replace('Icon', '').toLowerCase().startsWith(letter)) : allIcons.filter(icon => !icon.name.replace('Icon', '').toLowerCase().match(/[a-z]/));\n  return <div className=\"deprecated-space-y-2\">\n            <LemonCheckbox bordered checked={showBorder} onChange={setShowBorder} label=\"Show border\" />\n            <LemonTable dataSource={filteredIcons} columns={[{\n      title: 'Name',\n      key: 'name',\n      dataIndex: 'name',\n      render: function RenderName(name) {\n        return <code>{`<${name as string} />`}</code>;\n      }\n    }, {\n      title: 'Icon',\n      key: 'icon',\n      dataIndex: 'icon',\n      render: function RenderIcon(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <Icon style={{\n          fontSize: '1.5rem',\n          boxShadow: showBorder ? '0px 0px 1px 1px red' : null\n        }} />;\n      }\n    }, {\n      title: 'In Button',\n      key: 'button-icon',\n      dataIndex: 'icon',\n      render: function RenderButton(Icon) {\n        Icon = Icon as IconDefinition['icon'];\n        return <LemonButton type=\"secondary\" icon={<Icon />}>\n                                    Button\n                                </LemonButton>;\n      }\n    }]} emptyState={letter ? `No icons start with the letter ${letter.toUpperCase()}` : 'No icons'} />\n        </div>;\n}",...ShelfI.parameters?.docs?.source}}};let __namedExportsOrder=["Library","ShelfA","ShelfB","ShelfC","ShelfD","ShelfE","ShelfF","ShelfG","ShelfH","ShelfI"]}}]);
//# sourceMappingURL=lib-lemon-ui-icons-stories-Icons1-stories.31542270.iframe.bundle.js.map