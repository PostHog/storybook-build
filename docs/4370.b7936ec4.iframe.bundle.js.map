{"version":3,"file":"4370.b7936ec4.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AA6EA","sources":["webpack://posthog/./frontend/src/scenes/web-analytics/SessionDebugger/sessionAttributionExplorerLogic.ts"],"sourcesContent":["import { actions, connect, kea, path, reducers, selectors } from 'kea'\nimport { actionToUrl, urlToAction } from 'kea-router'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { urls } from 'scenes/urls'\n\nimport { DataTableNode, DateRange, HogQLQuery, NodeKind } from '~/queries/schema'\nimport { isSessionPropertyFilters } from '~/queries/schema-guards'\nimport { SessionPropertyFilter } from '~/types'\n\nimport type { sessionAttributionExplorerLogicType } from './sessionAttributionExplorerLogicType'\n\nexport const initialProperties = [] as SessionPropertyFilter[]\nexport const defaultDateRange: DateRange = { date_from: '-7d', date_to: 'now' }\nexport const sessionAttributionExplorerLogic = kea<sessionAttributionExplorerLogicType>([\n    path(['scenes', 'webAnalytics', 'sessionDebuggerLogic']),\n    connect(() => ({\n        values: [featureFlagLogic, ['featureFlags']],\n    })),\n    actions({\n        setProperties: (properties: SessionPropertyFilter[]) => ({ properties }),\n        setDateRange: (dateRange: DateRange) => ({ dateRange }),\n        setStateFromUrl: (state: { properties: SessionPropertyFilter[]; dateRange: DateRange | null }) => ({\n            state,\n        }),\n    }),\n    reducers({\n        properties: [\n            initialProperties,\n            {\n                setProperties: (_, { properties }) => properties,\n                setStateFromUrl: (_, { state }) => state.properties,\n            },\n        ],\n        dateRange: [\n            null as DateRange | null,\n            {\n                setDateRange: (_, { dateRange }) => dateRange,\n                setStateFromUrl: (_, { state }) => state.dateRange,\n            },\n        ],\n    }),\n    selectors({\n        query: [\n            (s) => [s.properties, s.dateRange],\n            (properties: SessionPropertyFilter[], dateRange): DataTableNode => {\n                const source: HogQLQuery = {\n                    kind: NodeKind.HogQLQuery,\n                    filters: {\n                        properties,\n                        dateRange: dateRange ?? defaultDateRange,\n                    },\n                    query: `\nSELECT\n    count() as \"context.columns.count\",\n    \"$channel_type\" as \"context.columns.channel_type\",\n    \"$entry_referring_domain\" as \"context.columns.referring_domain\",\n    \"$entry_utm_source\" as \"context.columns.utm_source\",\n    \"$entry_utm_medium\" as \"context.columns.utm_medium\",\n    \"$entry_utm_campaign\" as \"context.columns.utm_campaign\",\n    nullIf(arrayStringConcat([\n        if(isNotNull($entry_gclid), 'glcid', NULL),\n        if(isNotNull($entry_gad_source), 'gad_source', NULL)\n        -- add more here if we add more ad ids\n    ], ','), '') as \"context.columns.has_ad_id\",\n    topK(3)($entry_current_url) as \"context.columns.example_entry_urls\"\nFROM sessions\nWHERE {filters}\nGROUP BY\n    \"context.columns.referring_domain\",\n    \"context.columns.utm_source\",\n    \"context.columns.utm_medium\",\n    \"context.columns.utm_campaign\",\n    \"context.columns.has_ad_id\",\n    \"context.columns.channel_type\"\nORDER BY \n    \"context.columns.count\" DESC\n`,\n                }\n                return {\n                    kind: NodeKind.DataTableNode,\n                    source: source,\n                    showPropertyFilter: [TaxonomicFilterGroupType.SessionProperties],\n                    showDateRange: true,\n                    showOpenEditorButton: true,\n                    showReload: true,\n                }\n            },\n        ],\n    }),\n\n    actionToUrl(({ values }) => {\n        const stateToUrl = (): [string, Record<string, string>] => {\n            const { properties, dateRange } = values\n\n            const urlParams = {}\n            if (properties.length > 0) {\n                urlParams['properties'] = properties\n            }\n            if (dateRange) {\n                urlParams['dateRange'] = dateRange\n            }\n\n            return [urls.sessionAttributionExplorer(), urlParams]\n        }\n\n        return {\n            setProperties: stateToUrl,\n            setDateRange: stateToUrl,\n        }\n    }),\n\n    urlToAction(({ actions }) => ({\n        [urls.sessionAttributionExplorer()]: (_, { properties, dateRange }) => {\n            const parsedProperties = isSessionPropertyFilters(properties) ? properties : initialProperties\n            const parsedDateRange = dateRange ?? null\n\n            actions.setStateFromUrl({\n                properties: parsedProperties,\n                dateRange: parsedDateRange,\n            })\n        },\n    })),\n])\n"],"names":[],"sourceRoot":""}